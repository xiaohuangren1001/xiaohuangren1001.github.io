{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u4f60\u662f\uff1f","text":"<p>\u6211\u662f\u7ea2\u706f/Oildum/Atklom/one737/\u5c0f\u9ec4\u4eba1001/\u4e8b\u521b\u9020\u952e\u554a/uii/unsigned_int_i/CreativeFlourine \uff08\u4e3a\u4ec0\u4e48\u4f1a\u6709\u4eba\u4ece\u8fd9\u4e2a\u7f51\u540d\u627e\u5230\u6211\u554a\uff09</p> <p>\u4ee5\u4e0a\u51e0\u4e2a\u7f51\u540d\u7684\u6f14\u53d8\u53f2\uff1a</p> <p>\u5c0f\u9ec4\u4eba1001\uff1a\u4e3a\u6700\u5f00\u59cb\u6ce8\u518cb\u7ad9\u65f6\u6240\u7528\u7f51\u540d\uff0c1001\u4e3a\u65e0\u610f\u4e49\u540e\u7f00\u975e\u672c\u4eba\u751f\u65e5\u3002\u76ee\u524d\u4f7f\u7528\u8303\u56f4\uff1agithub\uff1b</p> <p>one737\uff1a\u7b2c\u4e8c\u4e2a\u7f51\u540d\uff0c\u672c\u4eba\u59d3\u540d\u540e\u4e24\u5b57\u518d\u53cd\u8f6c\u4e0e\u201c\u98de\u673a\u201d\u8c10\u97f3\uff0c\u73b0\u5b9e\u91cc\u88ab\u62ff\u6765\u73a9\u6897\u540e\u5e72\u8106\u7528\u4f5c\u7f51\u540d\uff0c737\u662f\u6211\u8111\u5b50\u91cc\u4ec5\u5b58\u7684\u98de\u673a\u578b\u53f7\u6240\u4ee5\u7528\u4e86\u3002\u76ee\u524d\u4f7f\u7528\u8303\u56f4\uff1a\u90e8\u5206OJ\uff1b</p> <p>Oildum/Atklom\uff1a\u6e38\u73a9 Among Us \u65f6\u5f53\u65f6\u7684\u5510\u6c0f\u7cfb\u7edf\u8d77\u7684\u540d\u5b57\uff0c\u7136\u540e\u5c31\u9876\u7740\u8fd9\u4fe9\u540d\u73a9\u4e86\u4e00\u4e2a\u6708\uff0c\u81ea\u7136\u5f62\u6210\u3002\u76ee\u524d\u4f7f\u7528\u8303\u56f4\uff1ab\u7ad9\uff08\u4e24\u4e2a\u53f7\uff09\uff1b</p> <p>uii/unsigned_int_i\uff1auii \u4e3a\u540d\u5b57\u6bcf\u4e00\u4e2a\u5b57\u62fc\u97f3\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u62fc\u63a5\u800c\u6210\uff0c\u6ce8\u610f\u5230\u540e\u8005\u7f29\u5199\u4e3a\u524d\u8005\uff0c\u66fe\u77ed\u6682\u4f7f\u7528\u4e8eb\u7ad9\u53ca\u90e8\u5206mc\u670d\u52a1\u5668\u3002\u76ee\u524d\u4f7f\u7528\u8303\u56f4\uff1a\u5df2\u5f03\u7528\uff1b</p> <p>CreativeFlourine\uff1a\u5fd8\u4e86\u600e\u4e48\u7ed9\u6211\u540d\u5b57\u53d8\u5f62\u6210 Flourine\uff0cCreative \u4e3a\u65e0\u610f\u4e49\u524d\u7f00\u3002\u76ee\u524d\u4f7f\u7528\u8303\u56f4\uff1afandom\uff1b</p> <p>\u7ea2\u706f\uff1a2024\u5e747\u6708\u4e00\u65f6\u5174\u8d77\u62ff\u624b\u673a\u5835\u4f4f\u6444\u50cf\u5934\u5f53\u4e86qq\u5934\u50cf\uff0c\u540e\u5728plos-clan\u4e2d\u88ab\u6a21\u4eff\uff0c\u7ec4\u6210\u7ea2\u7eff\u706f\u9635\u5217\uff0c\u9042\u5f97\u540d\u7ea2\u706f \u5bfc\u81f4\u6211\u73b0\u5728\u60f3\u6362\u4e2a\u5934\u50cf\u90fd\u6ca1\u6cd5\u6362\uff0c\u540e\u4ea7\u751f\u591a\u79cd\u53d8\u4f53\u3002\u76ee\u524d\u4f7f\u7528\u8303\u56f4\uff1aqq\u3002</p> <p>\u9274\u4e8e\u8fd9\u4e48\u5c0f\u4e00\u4e2a\u535a\u5ba2\u65e0\u6cd5\u62e5\u6709\u8fd9\u4e48\u591a\u6240\u6709\u8005\uff0c\u4ee5\u4e0b\u7edf\u4e00\u7528 Atklom \u6307\u4ee3\u3002</p>"},{"location":"#_2","title":"\u8fd9\u4e2a\u9875\u9762\u662f\uff1f","text":"<p>\u5982\u5927\u6807\u9898\u6240\u8bf4\uff0c\u662f Atklom \u7684\u535a\u5ba2\u4e3b\u9875\u3002\u8fd9\u4e00\u9875\u91cc\u6ca1\u5565\u597d\u770b\u7684\uff0c\u6211\u7684\u5efa\u8bae\u662f\u4ece\u4e0a\u9762\u7684\u5bfc\u822a\u680f\u968f\u4fbf\u627e\u4e2a\u5730\u901b\u901b\u3002</p> <p>\u5173\u4e8e\u6211\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u53c2\u89c1\uff1a\u5495\u5495\u5495</p>"},{"location":"os-tutorial/","title":"\u64cd\u4f5c\u7cfb\u7edf\u6559\u7a0b","text":"<p>\u66fe\u7ecf\u5199\u7684\u4e24\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u6559\u7a0b\u3002</p> <p>\u65e7\u6559\u7a0b\u5df2\u63a5\u8fd1\u5b8c\u7ed3\uff0c\u5185\u5bb9\u5c40\u9650\u4e8e\u4fdd\u62a4\u6a21\u5f0f\u4e0e\u5206\u6bb5\u3001TSS\uff0c\u6280\u672f\u5185\u5bb9\u5341\u5206\u8001\u65e7\uff0c\u5982\u679c\u653e\u5728\u5341\u51e0\u5e74\u524d\u6216\u8bb8\u8fd8\u7b97\u662f\u4f18\u8d28\uff0c\u53ef\u60dc\u73b0\u5728\u5df2\u7ecf\u70c2\u5927\u8857\u4e86\uff0c\u751a\u81f3\u90fd\u652f\u6301\u5206\u9875\u3002</p> <p>\u65b0\u6559\u7a0b\u7684\u5185\u5bb9\u662f UEFI \u4e0e x86_64\uff0c\u7531\u4e8e\u6211\u80fd\u529b\u4e0d\u8db3\u4e14\u8d44\u6599\u592a\u5c11\uff0c\u6240\u4ee5\u5df2\u7136\u5199\u4e0d\u4e0b\u53bb\uff0c\u65e9\u5df2\u5f00\u59cb\u5495\u5495\uff0c\u6216\u8bb8\u6709\u4e00\u5929\u6211\u4f1a\u628a\u5b83\u5199\u5b8c\u3002</p>"},{"location":"os-tutorial/new/","title":"\u5495\u5495\u5495\u2026\u2026","text":""},{"location":"os-tutorial/old/00-beforestart/","title":"00 \u5f00\u59cb\u4e4b\u524d","text":""},{"location":"os-tutorial/old/00-beforestart/#_1","title":"\u5199\u5728\u5f00\u59cb\u4e4b\u524d","text":"<p>\u867d\u7136\u7f51\u4e0a\u6b64\u7c7b\u6559\u7a0b\u4e91\u96c6\uff0c\u867d\u7136\u6b64\u7c7b\u4e66\u7c4d\u5f88\u591a\uff0c\u4f46\u662f\uff01</p> <p>\u8fd9\u4e9b\u4e66\u7c4d\u6709\u5f88\u591a\u5730\u65b9\u8bb2\u5f97\u4e0d\u591f\u7ec6\u81f4\uff08\u4e3b\u8981\u662f\u4ee3\u7801\u6709\u7f3a\u6f0f\uff09\uff0c\u6709\u4e9b\u5bf9\u4ee3\u7801\u7684\u66f4\u6539\u751a\u81f3\u5728\u4e66\u4e2d\u4e86\u65e0\u75d5\u8ff9\u3002</p> <p>\u800c\u8fd9\u624d\u662f\u6211\u5f00\u542f\u8fd9\u7bc7\u6559\u7a0b\u7684\u539f\u56e0\u3002</p> <p>\u8fd9\u7bc7\u6559\u7a0b\u4e4b\u4e2d\uff0c\u53ea\u8981\u7167\u7740\u6240\u6709\u7684\u64cd\u4f5c\u505a\u4e86\u4e00\u904d\uff0c\u5e94\u5f53\u80fd\u591f\u5199\u51fa\u5b8c\u6574\u7684\u64cd\u4f5c\u7cfb\u7edf\uff01</p> <p>\u672c\u6559\u7a0b\u9ed8\u8ba4\u5404\u4f4d\u8bfb\u8005\u662f\u4f1a\u6c47\u7f16\u7684\uff0c\u6216\u8005\u8bf4\uff0c\u81f3\u5c11\u5e94\u8be5\u80fd\u770b\u61c2\u6c47\u7f16\u3002</p> <p>\u4e0e\u5176\u8bf4\u8fd9\u7bc7\u6587\u7ae0\u662f\u4e2a\u6559\u7a0b\uff0c\u5012\u4e0d\u5982\u8bf4\u662f\u4e00\u4e2a\u5b66\u4e60\u7b14\u8bb0\u548c\u6211\u81ea\u8eab\u7f16\u7a0b\u7ecf\u9a8c\u7684\u8bb0\u5f55\u3002</p>"},{"location":"os-tutorial/old/00-beforestart/#_2","title":"\u5f00\u53d1\u73af\u5883\u914d\u7f6e","text":"<p>\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f <code>Linux</code>\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8f93\u5165\u4e0b\u9762\u4e00\u884c\u547d\u4ee4\u5373\u53ef\u5b8c\u6210\u5f00\u53d1\u73af\u5883\u7684\u914d\u7f6e\uff1a</p> <p><code>sudo apt-get install nasm build-essential qemu-system-x86</code></p> <p>\u5982\u679c\u60a8\u4f7f\u7528\u7684 <code>Linux</code> \u4e2d\u4e0d\u542b\u6709 <code>apt</code> \u7cfb\u5217\u5305\u7ba1\u7406\u5668\uff0c\u8bf7\u4f7f\u7528\u60a8\u7cfb\u7edf\u4e2d\u7684\u5305\u7ba1\u7406\u5668\u3002</p> <p>\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f <code>Linux</code>\uff0c\u4f46\u60a8\u7684\u7cfb\u7edf\u5185\u6ca1\u6709\u5305\u7ba1\u7406\u5668\uff0c\u90a3\u4e48\u60a8\u53ef\u4ee5\u53bb nasm \u5b98\u7f51\u3001 gcc \u5b98\u7f51\u548c qemu \u5b98\u7f51\u4e0b\u8f7d\u6e90\u7801\uff0c\u7136\u540e configure -&gt; make -&gt; sudo make install\u3002</p> <p>\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f <code>Windows</code>\uff0c\u8bf7\u53bb\u4ee5\u4e0b\u5730\u65b9\u83b7\u53d6\u6240\u9700\u8981\u7684\u5de5\u5177\uff1a</p> <p>nasm</p> <p>\u4ea4\u53c9\u7f16\u8bd1\u7684gcc\uff08\u8bf7\u4e0b\u8f7di686-elf-tools-windows.zip\uff09</p> <p>qemu</p> <p>make</p> <p>dd</p> <p>bochs\uff08\u5176\u5b9e\u6211\u4eec\u53ea\u9700\u8981\u5176\u4e2d\u7684 bximage.exe \uff09\uff08\u5982\u679c\u662f 32 \u4f4d\u7535\u8111\u8bf7\u4e0b\u8f7d 2.5 \u4ee5\u524d\u7684\u7248\u672c\uff09</p> <p>edimg\uff08\u8fd9\u4e2a\u5c31\u662f\u300a30\u5929\u81ea\u5236\u64cd\u4f5c\u7cfb\u7edf\u300b\u7684\u5199\u76d8\u5de5\u5177\uff09</p> <p>\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f <code>macOS</code>\uff0c\u90a3\u4e48\u8bf7\u6ce8\u610f\uff0c\u7cfb\u7edf\u5185\u7f6e\u7684 <code>gcc</code> \u4f1a\u628a\u6587\u4ef6\u7f16\u8bd1\u6210 <code>Mach-O</code> \u683c\u5f0f\uff0c\u8bf7\u901a\u8fc7 <code>Homebrew</code> \u4e0b\u8f7d\u4ea4\u53c9\u7f16\u8bd1\u5668\uff1a</p> <p><code>brew install i386-elf-binutils</code></p> <p><code>brew install i386-elf-gcc</code></p> <p>\u7136\u540e\u6211\u4eec\u8fd8\u9700\u8981\u53bb\u5f80 nasm \u5b98\u7f51\u83b7\u53d6\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5e76\u6267\u884c\uff1a</p> <p><code>brew install qemu</code></p> <p>\u4ee5\u83b7\u53d6 qemu\u3002</p> <p>\u5728\u5b89\u88c5\u5b8c\u4e4b\u540e\uff0c\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f <code>Windows</code>\uff0c\u8bf7\u786e\u4fdd\u5b83\u4eec\u7684\u8def\u5f84\u4f4d\u4e8e PATH \u4e0b\uff01</p> <p>\u9664\u6b64\u4e4b\u5916\u4fbf\u6ca1\u4ec0\u4e48\u91cd\u70b9\u4e86\uff0c\u4e0d\u8fc7\uff0c\u5bf9\u4e8e\u4e0b\u6587\u7ed9\u51fa\u7684\u5de5\u5177\u540d\u79f0\u9ed8\u8ba4\u4ee5 <code>Windows</code> \u4e3a\u51c6\uff0c\u82e5\u60a8\u4f7f\u7528 <code>Linux</code>\uff0c\u8bf7\u53bb\u6389\u5de5\u5177\u524d\u7f00\uff0c\u82e5\u60a8\u4f7f\u7528 <code>macOS</code>\uff0c\u8bf7\u5c06\u5de5\u5177\u524d\u7f00\u4e2d\u7684 <code>i686</code> \u6539\u4e3a <code>i386</code>\uff01\uff01\uff01</p> <p>\u5bf9\u4e86\uff0c\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f <code>Linux</code> \u6216 <code>macOS</code>\uff0c\u8bf7\u786e\u4fdd\u60a8\u5728 <code>dd</code> \u547d\u4ee4\u7684\u540e\u9762\u52a0\u5165 <code>conv=notrunc</code> \uff01\uff01\uff01</p> <p>\u90a3\u4e48\uff0c\u5f00\u53d1\u73af\u5883\u914d\u7f6e\u6b63\u5f0f\u7ed3\u675f\uff0c\u5f81\u7a0b\u5f00\u59cb\uff01</p>"},{"location":"os-tutorial/old/01-first-boot-sector/","title":"01 \u7b2c\u4e00\u4e2a\u5f15\u5bfc\u6247\u533a","text":"<p>\u6240\u8c13\u5f15\u5bfc\u6247\u533a\uff0c\u5176\u5b9e\u5c31\u662f\u4e00\u6bb5\u53ef\u6267\u884c\u7684\u4ee3\u7801\u800c\u5df2\uff0c\u4e0d\u8fc7\u52a0\u5165\u4e86\u4e00\u4e2a\u5c0f\u9650\u5236\uff1a\u7f16\u8bd1\u540e\u7684\u603b\u5b57\u8282\u6570\u4e0d\u80fd\u8d85\u8fc7 512\uff0c\u540c\u65f6\u6247\u533a\uff08\u4e00\u4e2a 512 \u5b57\u8282\u7684\u8fde\u7eed\u533a\u57df\uff0c\u4e00\u822c\u5728\u78c1\u76d8\u91cc\uff09\u6700\u540e\u4e24\u4e2a\u5b57\u8282\u5fc5\u987b\u662f 0x55 0xAA \u3002</p> <p>\u867d\u7136\u73b0\u5728\u770b\u6765\u8fd9\u4e2a\u9650\u5236\u5e76\u4e0d\u600e\u6837\uff0c\u4f46\u4e00\u5230\u540e\u9762\u518d\u56de\u8fc7\u5934\u6765\uff0c\u60a8\u5c06\u4f1a\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u6076\u5fc3\u7684\u9650\u5236\u3002\u4e0d\u8fc7\u6ca1\u5173\u7cfb\uff0c\u5bf9\u4e8e\u73b0\u5728\u7684\u6211\u4eec\u6765\u8bf4\uff0c\u8fd9\u4e2a\u9650\u5236\u5e76\u4e0d\u5927\u3002</p> <p>\u90a3\u4e48\u6211\u4eec\u7684\u76ee\u6807\u5c31\u662f\u7528\u4e00\u4e9b\u529f\u80fd\u5f80\u5c4f\u5e55\u4e0a\u8f93\u51fa\u4fe1\u606f\u3002\u73b0\u5728\u8fd9\u4e2a\u9636\u6bb5\uff0c\u9664\u4e86\u6211\u4eec\u4e4b\u5916\uff0c\u8fd8\u6d3b\u7740\u7684\u4e5f\u5c31\u4e00\u4e2a BIOS \u4e86\u3002\u4e07\u5e78\u7684\u662f\uff0cBIOS \u63d0\u4f9b\u4e86\u663e\u793a\u5b57\u7b26\u4e32\u7684\u65b9\u6cd5\uff0c\u5177\u4f53\u7528\u6cd5\u5982\u4e0b\uff1a</p> <p>\u5411\u4e0b\u5217\u5bc4\u5b58\u5668\u4e2d\u4f9d\u6b21\u5b58\u5165\uff1a</p> <p>AH=013h\uff0c\u8868\u793a\u8f93\u51fa\u4fe1\u606f</p> <p>BH=\u9875\u7801\uff08\u4e00\u822c\u53ef\u4ee5\u7f6e0\uff09</p> <p>BL=\u5c5e\u6027\uff08\u5f53al=0\u62161\u65f6\u624d\u6709\u7528\uff09</p> <p>CX=\u5b57\u7b26\u4e32\u957f\u5ea6</p> <p>(DH, DL)\uff1a\u884c\u548c\u5217</p> <p>ES:BP\uff1a\u5b57\u7b26\u4e32\u5730\u5740</p> <p>AL=\u8f93\u51fa\u65b9\u5f0f</p> <p>AL=0\uff1a\u4ec5\u542b\u663e\u793a\u5b57\u7b26\uff0c\u5b57\u7b26\u5c5e\u6027\uff08\u989c\u8272\u7b49\uff09\u4f4d\u4e8e BL \u4e2d\u3002\u663e\u793a\u540e\uff0c\u5149\u6807\u4f4d\u7f6e\u4e0d\u53d8\u3002</p> <p>AL=1\uff1a\u540c AL=0\uff0c\u4f46\u663e\u793a\u540e\u5149\u6807\u4f4d\u7f6e\u6539\u53d8\u3002</p> <p>AL=2\uff1a\u5b57\u7b26\u4e32\u4e2d\u542b\u6709\u663e\u793a\u5b57\u7b26\u548c\u663e\u793a\u5c5e\u6027\u3002\u663e\u793a\u540e\uff0c\u5149\u6807\u4f4d\u7f6e\u4e0d\u53d8\u3002</p> <p>AL=3\uff1a\u540c AL=2\uff0c\u4f46\u663e\u793a\u540e\u5149\u6807\u4f4d\u7f6e\u6539\u53d8\u3002</p> <p>\u7136\u540e\u6267\u884c <code>int 10h</code>\u3002</p> <p>\u5bc4\u5b58\u5668\u53ef\u4ee5\u8fd1\u4f3c\u7406\u89e3\u4e3a\u53d8\u91cf\uff0c\u8fd9\u91cc\u9762\u7684 <code>AH</code>\u3001<code>BH</code>\u3001<code>BL</code>\u3001<code>DH</code>\u3001<code>DL</code> \u8fd9\u4e9b\u90fd\u662f\u5bc4\u5b58\u5668\u3002\u600e\u4e48\u64cd\u4f5c\u5b83\u4eec\u5462\uff1f\u4e14\u770b\u5f85\u4f1a\u7684\u4ee3\u7801\u3002</p> <p>\u8fd9\u91cc\u9762\u6709\u4e2a\u4e1c\u897f\u53eb <code>ES</code>\uff0c\u5b83\u4e0e\u5176\u4ed6\u5bc4\u5b58\u5668\u4e0d\u540c\uff0c\u5b83\u662f\u6bb5\u5bc4\u5b58\u5668\u3002\u81f3\u4e8e\u6bb5\u5bc4\u5b58\u5668\u662f\u4ec0\u4e48\uff0c <code>ES:BP</code> \u53c8\u662f\u4ec0\u4e48\u610f\u601d\uff0c\u4e14\u770b\u4e0b\u6587\u8bf4\u660e\u3002</p> <p>\u90a3\u4e48\u6b64\u6b21\u6211\u4eec\u8981\u4f7f\u7528\u7684\u5c31\u662f <code>AH=13h AL=01h</code> \u7684\u663e\u793a\u65b9\u6cd5\uff0c\u5373\u663e\u793a\u5b57\u7b26\u4e32\u540e\u5149\u6807\u79fb\u52a8\u3002</p> <p>\u77e5\u9053\u600e\u4e48\u663e\u793a\u5b57\u7b26\u4e32\uff0c\u4e3b\u4f53\u90e8\u5206\u7684\u4ee3\u7801\u9664\u4e86\u6c47\u7f16\u7684\u8bed\u6cd5\u4ee5\u5916\u5c31\u6ca1\u6709\u7406\u89e3\u969c\u788d\u4e86\u3002\u9274\u4e8e\u662f\u7b2c\u4e00\u6bb5\u4ee3\u7801\uff0c\u6211\u4eec\u8fd8\u662f\u6765\u505a\u4e00\u4e2a\u9605\u8bfb\u7406\u89e3\u5427\uff1a</p> <p>\u4ee3\u7801 1-1 \u6700\u7b80\u5355\u7684\u5f15\u5bfc\u6247\u533a\uff08boot.asm\uff09 <pre><code>    org 07c00h ; \u544a\u8bc9\u7f16\u8bd1\u5668\u7a0b\u5e8f\u5c06\u88c5\u8f7d\u81f30x7c00\u5904\n\n    mov ax, cs\n    mov ds, ax\n    mov es, ax ; \u5c06ds es\u8bbe\u7f6e\u4e3acs\u7684\u503c\uff08\u56e0\u4e3a\u6b64\u65f6\u5b57\u7b26\u4e32\u5b58\u5728\u4ee3\u7801\u6bb5\u5185\uff09\n    call DispStr ; \u663e\u793a\u5b57\u7b26\u51fd\u6570\n    jmp $ ; \u6b7b\u5faa\u73af\n\nDispStr:\n    mov ax, BootMessage\n    mov bp, ax ; es\u524d\u9762\u8bbe\u7f6e\u8fc7\u4e86\uff0c\u6240\u4ee5\u6b64\u5904\u7684bp\u5c31\u662f\u4e32\u5730\u5740\n    mov cx, 16 ; \u5b57\u7b26\u4e32\u957f\u5ea6\n    mov ax, 01301h ; \u663e\u793a\u6a21\u5f0f\n    mov bx, 000ch ; \u663e\u793a\u5c5e\u6027\n    mov dl, 0 ; \u663e\u793a\u5750\u6807\uff08\u8fd9\u91cc\u53ea\u8bbe\u7f6e\u5217\u56e0\u4e3a\u884c\u56fa\u5b9a\u662f0\uff09\n    int 10h ; \u663e\u793a\n    ret\n\nBootMessage: db \"Hello, OS world!\"\ntimes 510 - ($ - $$) db 0\ndb 0x55, 0xaa ; \u786e\u4fdd\u6700\u540e\u4e24\u4e2a\u5b57\u8282\u662f0x55AA\n</code></pre></p> <p>\u6c47\u7f16\u8bed\u8a00\u5927\u5c0f\u5199\u4e0d\u654f\u611f\uff0c\u56e0\u6b64\u6211\u4eec\u628a\u6240\u6709\u7684\u6307\u4ee4\u548c\u5bc4\u5b58\u5668\u90fd\u641e\u6210\u4e86\u5c0f\u5199\u3002\u6c47\u7f16\u8bed\u8a00\u4e5f\u4e0d\u5b58\u5728 <code>main</code> \u51fd\u6570\uff0c\u4f1a\u4ece\u7b2c\u4e00\u884c\u5f00\u59cb\u987a\u6b21\u5f80\u4e0b\u6267\u884c\uff08\u5f53\u7136\u5982\u679c\u9047\u5230\u8df3\u8f6c\u4f1a\u8df3\u8d70\uff0c\u8fd9\u4e2a\u6d41\u7a0b\u7c7b\u4f3c Python\uff09\uff0c\u56e0\u6b64\u6211\u4eec\u4e5f\u4e00\u884c\u4e00\u884c\u7684\u770b\u3002</p> <p>\u7b2c\u4e00\u884c\uff0c<code>org 07c00h</code>\uff0c\u610f\u4e49\u5df2\u7ecf\u5199\u5728\u6ce8\u91ca\u91cc\uff0c\u4f46\u662f\u4e3a\u4ec0\u4e48\u8981\u8fd9\u4e48\u505a\uff1f\u8fd9\u662f\u56e0\u4e3a\uff0c\u6309\u7167\u786c\u4ef6\u89c4\u7a0b\uff08\u8fd9\u4e2a\u8bcd\u6c47\u540e\u9762\u8fd8\u4f1a\u51fa\u73b0\u591a\u6b21\uff09\uff0cBIOS \u5728\u6267\u884c\u5b8c\u81ea\u68c0\u7b49\u4e00\u7cfb\u5217\u64cd\u4f5c\u4ee5\u540e\uff0c\u5c06\u6267\u884c\u4f4d\u4e8e <code>0x7c00</code> \u5904\u7684\u4ee3\u7801\u3002<code>07c00h</code>\uff0c\u4e0e <code>0x7c00</code> \u540c\u4e49\uff1b\u540c\u7406\uff0c<code>0\uff08\u7ba1\u4f60\u662f\u5565\uff09h</code> \u548c <code>0x\uff08\u7ba1\u4f60\u662f\u5565\uff09</code> \u4e5f\u540c\u4e49\u3002\u8fd9\u6837\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u624d\u6709\u88ab\u6267\u884c\u5230\u7684\u673a\u4f1a\u3002\u7531\u4e8e\u5b83\u5b9e\u9645\u4e0a\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u673a\u5668\u7801\uff0c\u56e0\u6b64\u5b83\u4e5f\u88ab\u53eb\u505a\u4f2a\u6307\u4ee4\u3002</p> <p>\u4e0b\u9762\u7684 <code>mov ax, cs</code>\uff0c\u53ef\u4ee5\u8fd1\u4f3c\u7406\u89e3\u4e3a <code>ax = cs</code>\uff0c\u8fd9\u91cc\u7684 <code>ax</code> \u4e5f\u662f\u5bc4\u5b58\u5668\uff0c<code>cs</code> \u4e5f\u662f\u5bc4\u5b58\u5668\uff0c\u4f46\u8fd9\u4e24\u8005\u5e76\u4e0d\u5c3d\u76f8\u540c\uff1a<code>ax</code> \u88ab\u79f0\u4e3a\u901a\u7528\u5bc4\u5b58\u5668\uff0c\u987e\u540d\u601d\u4e49\u53ef\u4ee5\u968f\u4fbf\u7528\uff1b\u800c <code>cs</code> \u5219\u662f\u6bb5\u5bc4\u5b58\u5668\uff0c\u6bb5\u4e0e\u5185\u5b58\u6709\u83ab\u5927\u7684\u5173\u7cfb\uff0c\u5982\u679c\u4e71\u52a8\u5c06\u5bfc\u81f4\u5185\u5b58\u64cd\u4f5c\u4e0d\u5408\u9884\u671f\uff0c\u8fd9\u4e2a <code>cs</code> \u66f4\u662f\u548c <code>code</code> \u6709\u5173\uff0c\u4e71\u52a8\u4f1a\u5bfc\u81f4\u6267\u884c\u51fa\u6545\u969c\uff0c\u56e0\u6b64\u9664\u4e86\u67d0\u4e9b\u5fc5\u7136\u66f4\u6539\u7684\u65b9\u6cd5\u4ee5\u5916\uff0c\u5b83\u4e00\u822c\u90fd\u662f\u53ea\u8bfb\u7684\u3002</p> <p>\u63a5\u4e0b\u6765\u7684\u4e24\u4e2a <code>mov</code> \u672c\u8eab\uff0c\u6211\u60f3\u8bfb\u8005\u53ef\u4ee5\u81ea\u5df1\u5f15\u7533\u7406\u89e3\u3002\u8fd9\u5176\u4e2d\uff0c<code>ds</code> \u548c <code>es</code> \u4e5f\u662f\u6bb5\u5bc4\u5b58\u5668\u3002\u6bb5\u4e0e\u5185\u5b58\u6709\u4ec0\u4e48\u5173\u7cfb\u5462\uff1f\u5728\u521a\u521a\u8fdb\u5165\u5f15\u5bfc\u6247\u533a\u7684\u5b9e\u6a21\u5f0f\u4e0b\uff0c\u6211\u4eec\u8ba4\u4e3a\u4e00\u4e2a\u6bb5\u7ba1\u7406 64KB \u5185\u5b58\u3002\u5982\u679c\u67d0\u4e2a\u6bb5\u5bc4\u5b58\u5668\u7684\u6570\u503c\u662f <code>x</code>\uff0c\u90a3\u4e48\u4ece <code>x * 16</code> \u5f00\u59cb\u7684 64KB \u5c31\u5f52\u5b83\u7ba1\uff0c<code>x</code> \u672c\u8eab\u5219\u4ee3\u8868\u4e00\u4e2a\u6bb5\u3002\u8fd9\u6837\u7684\u5bfb\u5740\u65b9\u6cd5\uff0c\u7528 <code>\u6bb5\u5bc4\u5b58\u5668:\u5bfb\u5740\u5bc4\u5b58\u5668</code> \u6765\u8868\u793a\u3002\u6216\u8bb8\u6709\u4eba\u5c31\u8981\u95ee\u4e86\uff1a</p> <p>\u5509\uff0c\u8fd9\u4e0d\u5bf9\u554a\uff0c\u90a3\u4e24\u4e2a\u6bb5\u96be\u9053\u4e0d\u4f1a\u91cd\u5408\u4e48\uff1f</p> <p>\u597d\u95ee\u9898\uff0c\u4e24\u4e2a\u6bb5\u8fd8\u771f\u4f1a\u91cd\u5408\u3002\u90a3\u4e48\u91cd\u5408\u90e8\u5206\u7684\u5185\u5b58\u5f52\u8c01\u7ba1\u5462\uff1f\u6bb5\u5bc4\u5b58\u5668\u91cc\u662f\u54ea\u4e2a\u6bb5\uff0c\u8fd9\u4e2a\u5185\u5b58\u5c31\u5f52\u8c01\u7ba1\u3002</p> <p>\u81f3\u4e8e\u8fd9\u4e2a\u5bfb\u5740\u5bc4\u5b58\u5668\u53c8\u662f\u4ec0\u4e48\u4e1c\u897f\uff0c\u7531\u4e8e\u6211\u4eec\u4e0d\u4f1a\u5728\u5b9e\u6a21\u5f0f\u5f85\u592a\u4e45\uff08\u6211\u662f\u4e0d\u662f\u542c\u5230\u4e86\u201c\u8fd8\u6709\u5176\u4ed6\u6a21\u5f0f\uff1f\u201d\uff09\uff0c\u6240\u4ee5\u5c31\u5148\u4e0d\u89e3\u91ca\u4e86\u3002</p> <p>\u8fd9\u91cc\u4e4b\u6240\u4ee5\u8981\u628a <code>ds</code> \u548c <code>es</code> \u7528 <code>cs</code> \u8d4b\u503c\uff0c\u5219\u53c8\u662f\u56e0\u4e3a\u8fd9\u4e24\u8005\u5728 BIOS \u6267\u884c\u671f\u95f4\u53ef\u80fd\u8fd8\u5b58\u7740 BIOS \u65f6\u671f\u7684\u6bb5\uff0c\u5982\u679c\u4e0d\u8fdb\u884c\u8986\u5199\uff0c\u540e\u9762\u7684 <code>int 10h</code> \u4f1a\u89c9\u5f97\u6211\u8981\u4ece BIOS \u7684\u67d0\u5904\u53d6\u5b57\u7b26\u4e32\uff0c\u5b9e\u9645\u5219\u5e94\u8be5\u4ece\u6267\u884c\u4ee3\u7801\u7684\u67d0\u5904\u8bfb\u5b57\u7b26\u4e32\uff0c\u800c\u540e\u8005\u662f\u7531 <code>cs</code> \u8fdb\u884c\u8868\u793a\u7684\u3002</p> <p>\u7136\u540e <code>call DispStr</code>\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u8fd1\u4f3c\u7406\u89e3\u4e3a <code>DispStr();</code>\u3002\u81f3\u4e8e\u5177\u4f53\u53d1\u751f\u4e86\u4ec0\u4e48\uff0c\u7531\u4e8e\u672c\u8282\u6559\u7a0b\uff08\u751a\u81f3\u53ef\u80fd\u4e00\u76f4\u5230\u5f88\u540e\u9762\u7684\u6559\u7a0b\uff09\u90fd\u6ca1\u6709\u7528\u5230\uff0c\u6240\u4ee5\u5148\u4e0d\u89e3\u91ca\uff0c\u7528\u5230\u4e86\u518d\u8bf4\u3002</p> <p>\u6700\u540e\u8fd9\u4e2a <code>jmp $</code>\uff0c\u76f8\u5f53\u4e8e <code>while (1);</code>\u3002\u4f46\u662f\u9700\u8981\u6ce8\u610f\uff0c<code>jmp</code> \u5e76\u4e0d\u662f\u5faa\u73af\uff0c\u5b83\u662f\u4e00\u4e2a\u8df3\u8f6c\u8bed\u53e5\uff0c\u548c <code>goto</code> \u53cd\u800c\u66f4\u4e3a\u63a5\u8fd1\u3002<code>$</code> \u5219\u8868\u793a\u8fd9\u6761\u6307\u4ee4\u7684\u8d77\u59cb\u5730\u5740\u3002\u8fd9\u4e48\u4e00\u6765\uff0c\u8fd9\u6761\u6307\u4ee4\u5c31\u76f8\u5f53\u4e8e\u8df3\u8f6c\u5230\u8fd9\u6761\u6307\u4ee4\u5f00\u59cb\u7684\u4f4d\u7f6e\uff0c\u4ece\u800c\u7ee7\u7eed\u6267\u884c\u8df3\u8f6c\uff0c\u4e8e\u662f\u5c31\u8d77\u5230\u4e86\u65e0\u9650\u5faa\u73af\u7684\u4f5c\u7528\u3002</p> <p>\u7136\u540e\u662f <code>DispStr:</code>\uff0c\u5b83\u65e2\u53ef\u4ee5\u8868\u793a <code>void DispStr()</code>\uff0c\u4e5f\u53ef\u4ee5\u5e72\u8106\u4f5c\u4e3a <code>goto</code> \u7684\u6807\u7b7e\u540d\uff0c\u4ece\u540e\u9762\u7684\u4ecb\u7ecd\u8fd8\u53ef\u4ee5\u77e5\u9053\uff0c\u5b83\u8fd8\u80fd\u8868\u793a\u66f4\u591a\u7684\u610f\u601d\uff0c\u5c31\u5148\u4e0d\u8bf4\u4e86\u3002</p> <p>\u4e0b\u9762 <code>mov ax, BootMessage</code>\uff0c\u76f8\u5f53\u4e8e <code>ax = BootMessage</code>\u3002\u8fd9\u4e2a <code>BootMessage</code> \u53c8\u662f\u4ece\u4ec0\u4e48\u5730\u65b9\u6765\u7684\uff1f\u4ed4\u7ec6\u89c2\u5bdf\u53d1\u73b0\uff0c\u539f\u6765\u5c31\u5728\u4e0b\u9762\uff0c<code>BootMessage: db \"Hello, OS world!\"</code>\u3002\u8fd9\u4e2a <code>db</code> \u4e5f\u662f\u4e2a\u4f2a\u6307\u4ee4\uff0c\u4f5c\u7528\u662f\u628a\u540e\u9762\u7684\u4e1c\u897f\u539f\u6837\u5199\u8fdb\u5185\u5b58\uff0c\u4e0d\u7ba1\u5b83\u662f\u4e00\u4e2a\u6570\uff0c\u4e00\u4e32\u6570\uff0c\u6216\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u53ea\u8981\u5b83\u6216\u5b83\u7684\u6bcf\u4e00\u4e2a\u6700\u5c0f\u5355\u5143\u90fd\u5728\u4e00\u4e2a\u5b57\u8282\u7684\u8303\u56f4\u5185\uff0c\u5c31\u4ece\u5934\u5f00\u59cb\u5230\u6700\u540e\uff0c\u4f9d\u6b21\u628a\u8fd9\u4e2a\u6570\u539f\u6837\u5199\u5728\u751f\u6210\u7684\u6587\u4ef6\u91cc\u3002\u5927\u6982\u76f8\u5f53\u4e8e\u8fd9\u6837\uff1a</p> <p><code>db 0x55, 0xaa</code> -&gt; <code>char sth[] = {0x55, 0xaa};</code></p> <p><code>db \"Hello, OS World!</code> -&gt; <code>char sth[] = \"Hello, OS World!\"</code></p> <p><code>db 0x55</code> -&gt; <code>char sth[] = {0x55}</code></p> <p>\u8fd9\u4e2a <code>db</code> \u5176\u5b9e\u4e5f\u662f\u4e00\u7cfb\u5217\u4f2a\u6307\u4ee4\u91cc\u7684\u4e00\u4e2a\uff0c\u8fd8\u6709 <code>dw</code> \u548c <code>dd</code>\uff0c\u5206\u522b\u662f\u628a\u90a3\u4e2a\u6570\u7ec4\u7684\u7c7b\u578b\u6539\u6210\u4e86 <code>short</code> \u548c <code>int</code>\u3002\u518d\u5f80\u4e0a\u8fd8\u6709\u66f4\u5927\u5c3a\u5ea6\u7684\uff0c\u4f46\u662f\u6211\u4eec\u7528\u4e0d\u5230\u3002</p> <p>\u628a\u4e00\u4e2a <code>BootMessage:</code> \u52a0\u5728 <code>db</code> \u524d\u9762\uff0c\u5c31\u76f8\u5f53\u4e8e\u628a\u8fd9\u4e00\u4e32\u6570\u7ec4\u7684\u540d\u5b57\u7ed9\u641e\u6210\u4e86 <code>BootMessage</code>\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c</p> <p><code>BootMessage: db \"Hello, OS world!\"</code> \u7b49\u4ef7\u4e8e <code>char BootMessage[] = \"Hello, OS world!\"</code></p> <p>\u56e0\u6b64\u8fd9\u4e2a <code>mov</code> \u4ee3\u8868\u7684\u610f\u601d\uff0c\u5c31\u76f8\u5f53\u4e8e\u662f\u628a <code>BootMessage</code> \u5bf9\u5e94\u7684\u5185\u5b58\u5730\u5740\u8d4b\u503c\u7ed9\u4e86 <code>ax</code>\u3002</p> <p>\u63a5\u4e0b\u6765 <code>mov bp, ax</code>\uff0c\u5c31\u662f <code>bp = ax</code>\u3002\u6216\u8bb8\u6709\u4eba\u8981\u95ee\uff1a</p> <p>\u90a3\u4e48\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5 <code>bp = BootMessage</code> \u5462\uff0c\u8f6c\u5199\u6210\u6c47\u7f16\u5c31\u662f <code>mov bp, BootMessage</code>\uff1f\u8fd9\u6837\u96be\u9053\u4e0d\u662f\u6548\u7387\u66f4\u9ad8\u3001\u6307\u4ee4\u66f4\u5c11\u5417\uff1f</p> <p>\u8fd9\u662f\u56e0\u4e3a\uff0c\u6709\u7684\u5bc4\u5b58\u5668\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\u5185\u5b58\u5730\u5740\u548c\u6570\u5b57\uff08\u6211\u4eec\u7edf\u79f0\u8fd9\u4fe9\u4e3a\u7acb\u5373\u6570\uff0c\u610f\u601d\u662f\u53ef\u4ee5\u7acb\u5373\u77e5\u9053\u6570\u503c\u7684\u6570\uff09\u8d4b\u503c\uff0c\u6bd4\u5982\u6bb5\u5bc4\u5b58\u5668\u3002\u867d\u7136 <code>bp</code> \u4e0d\u5728\u6b64\u5217\uff0c\u4f46\u4e3a\u4e86\u4fdd\u9669\u7684\u9700\u8981\uff0c\u8fd8\u662f\u4f7f\u7528 <code>ax</code> \u8fdb\u884c\u4e2d\u8f6c\u3002</p> <p>\u63a5\u4e0b\u6765\u5c31\u662f\u6309\u7167\u8981\u6c42\uff0c\u4f9d\u6b21\u5bf9\u8fd9\u4e9b\u5bc4\u5b58\u5668\u8fdb\u884c\u5199\u5165\u4e86\u3002\u5148\u662f <code>mov cx, 16</code>\uff08<code>cx = 16</code>\uff09\uff0c\u8fd9\u662f\u624b\u52a8\u8ba1\u7b97\u7684\u4e0b\u9762\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff1b\u7136\u540e <code>mov ax, 01301h</code>\uff08<code>ax = 0x1301</code>\uff09\u3001<code>mov bx, 000ch</code>\uff08<code>bx = 0x000c</code>\uff09\uff0c\u518d\u4e4b\u540e\u662f <code>mov dl, 0</code> \u8bbe\u7f6e\u5728\u7b2c 0 \u5217\u663e\u793a\u3002\u7531\u6ce8\u91ca\u53ef\u77e5\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u9ed8\u8ba4\u6b64\u65f6\u7684 <code>dh</code> \u662f 0 \u7684\u7f18\u6545\u3002\u795e\u5947\u7684\u4e8b\u60c5\u53d1\u751f\u4e86\uff0c\u6211\u4eec\u597d\u50cf\u5e76\u6ca1\u6709\u5bf9 <code>ah</code>\u3001<code>al</code>\u3001<code>bh</code>\u3001<code>bl</code> \u8d4b\u503c\uff01\u8fd9\u53c8\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f</p> <p>\u5982\u679c\u60a8\u7684\u89c2\u5bdf\u6bd4\u8f83\u654f\u9510\uff0c\u90a3\u4e48\u5c31\u4f1a\u53d1\u73b0\uff0c<code>ah</code> \u672c\u8be5\u83b7\u5f97\u7684 <code>0x13</code>\uff0c\u88ab\u653e\u5728\u4e86 <code>ax</code> \u7684\u9ad8 8 \u4f4d\uff1b<code>al</code> \u672c\u8be5\u83b7\u5f97\u7684 <code>0x01</code>\uff0c\u88ab\u653e\u5728\u4e86 <code>ax</code> \u7684\u4f4e 8 \u4f4d\u3002\u96be\u9053\u8bf4\u2026\u2026\uff1f</p> <p>\u6ca1\u9519\uff01<code>ah</code> \u548c <code>al</code>\uff0c\u5176\u5b9e\u5c31\u4ee3\u8868\u4e86 <code>ax</code> \u7684\u9ad88\u4f4d\u548c\u4f4e8\u4f4d\uff08\u8fd9\u4e5f\u662f\u5b83\u4eec <code>h</code> \u548c <code>l</code> \u7684\u6765\u6e90\uff09\u3002\u540c\u7406\uff0c<code>bh</code>\u3001<code>bl</code> \u5bf9\u5e94 <code>bx</code>\uff0c<code>ch</code>\u3001<code>cl</code> \u5bf9\u5e94 <code>cx</code>\uff0c<code>dh</code>\u3001<code>dl</code> \u5bf9\u5e94 <code>dx</code>\u3002\u5176\u4f59\u7684\u901a\u7528\u5bc4\u5b58\u5668\uff1a<code>di</code>\u3001<code>si</code>\u3001<code>sp</code> \u548c <code>bp</code>\uff0c\u6ca1\u6709\u5bf9\u5e94\u7684 <code>h</code> \u548c <code>l</code>\u3002</p> <p>\u63a5\u4e0b\u6765\u7684 <code>int 10h</code>\uff0c\u76f8\u5f53\u4e8e\u5728\u8c03\u7528\u5e93\u51fd\u6570\uff0c\u4e0a\u9762\u7684 <code>ah</code> \u4ec0\u4e48\u7684\u90fd\u662f\u53c2\u6570\u3002\u5982\u679c\u786c\u8981\u7c7b\u6bd4\uff0c\u53ef\u80fd\u7c7b\u4f3c\u4e8e\u8fd9\u6837\uff1a</p> <p><code>sort(v.begin(), v.end(), cmp);</code>\uff0c<code>int 10h</code> \u5c31\u7c7b\u4f3c <code>sort</code>\uff08\u53ea\u662f\u89d2\u8272\uff0c\u529f\u80fd\u5f88\u4e0d\u540c\uff09\uff0c<code>v.begin()</code>\u3001<code>v.end()</code>\u3001<code>cmp</code> \u4f5c\u4e3a\u53c2\u6570\u5219\u548c\u90a3\u4e9b\u5bc4\u5b58\u5668\u7c7b\u4f3c\uff08\u5f53\u7136\u540e\u9762\u77e5\u9053\u5176\u5b9e\u4e5f\u5f88\u4e0d\u540c\uff09\u3002</p> <p>\u6700\u540e\u7684 <code>ret</code>\uff0c\u76f8\u5f53\u4e8e <code>return ax;</code>\u3002\u8fd9\u4e2a\u8fd4\u56de\u503c\u600e\u4e48\u5904\u7f6e\uff0c\u6700\u7ec8\u662f\u7531\u8c03\u7528\u65b9\u8bf4\u4e86\u7b97\u3002</p> <p>\u4e0b\u9762\u7684 <code>BootMessage</code> \u90a3\u4e00\u884c\u5df2\u89e3\u91ca\u8fc7\uff0c\u518d\u5f80\u4e0b\u6bd4\u8f83\u6709\u610f\u601d\uff0c<code>times 510 - ($ - $$) db 0</code>\uff0c\u8fd9\u662f\u5728\u5e72\u4ec0\u4e48\uff0c\u53d1\u5200\u4e50\u4e48\uff1f</p> <p>\u5148\u8bf4 <code>times</code>\u3002<code>times xxx aaa</code>\uff0c\u76f8\u5f53\u4e8e\u505a <code>xxx</code> \u6b21 <code>aaa</code>\u3002<code>times</code> \u672c\u8eab\u4e5f\u5c31\u4e2a\u4f2a\u6307\u4ee4\u3002\u4e00\u822c <code>times</code> \u90fd\u4e0e <code>db</code> \u7cfb\u5217\u7684\u4f2a\u6307\u4ee4\u914d\u5408\u4f7f\u7528\uff0c\u548c\u5176\u4ed6\u7684\u8054\u5408\u4f7f\u7528\u7684\uff0c\u6211\u662f\u6ca1\u89c1\u8fc7\u4f8b\u5b50\u3002</p> <p>\u4e0b\u9762\u7684 <code>$</code> \u5df2\u7ecf\u89e3\u91ca\u8fc7\uff0c\u8868\u793a\u73b0\u5728\u8fd9\u4e2a\u6307\u4ee4\u7684\u8d77\u59cb\u5185\u5b58\u5730\u5740\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u5176\u5b9e\u4f2a\u6307\u4ee4\u7684\u8d77\u59cb\u5730\u5740\u4e5f\u53ef\u4ee5\u7528 <code>$</code> \u8868\u793a\uff1b<code>$$</code> \u5219\u6bd4\u8f83\u590d\u6742\uff0c\u4e0d\u8fc7\u5728\u8fd9\u4e2a\u8bed\u5883\u4e0b\uff0c\u53ef\u4ee5\u9ed8\u8ba4\u5b83\u662f 0\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5199\u6210 <code>times 510 - $ db 0</code> \u4e5f\u662f\u6ca1\u6709\u95ee\u9898\u7684\u3002</p> <p>\u6700\u540e <code>db 0x55, 0xAA</code>\uff0c\u662f\u4e3a\u4e86\u987a\u5e94\u786c\u4ef6\u89c4\u7a0b\u7684\u9700\u8981\uff0c\u201c\u6247\u533a\u6700\u540e\u4e24\u4e2a\u5b57\u8282\u5fc5\u987b\u662f 55 AA\u201d\u3002\u4e00\u4e2a\u6247\u533a\u4e00\u5171 512 \u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u5148\u628a\u6700\u540e\u8fd9\u4e00\u53e5\u4e00\u76f4\u5230 510 \u5b57\u8282\u586b\u5145\u6210 0\uff0c\u7136\u540e\u5199 <code>55 AA</code>\uff0c\u5c31\u80fd\u591f\u4fdd\u8bc1\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u662f\u4e00\u4e2a\u7b26\u5408\u786c\u4ef6\u89c4\u7a0b\u7684\u6247\u533a\uff0c\u4ece\u800c\u80fd\u591f\u88ab\u6267\u884c\u3002</p> <p>\u7a0b\u5e8f\u8bfb\u5b8c\u4e86\uff0c\u60f3\u5fc5\u5728\u8fd9\u4e4b\u524d\u5927\u5bb6\u4e5f\u5199 \u6284 \u597d\u4e86\uff0c\u6211\u4eec\u8be5\u600e\u4e48\u8fd0\u884c\u5462\uff1f\u9996\u5148\u7f16\u8bd1\u4e00\u4e0b\uff1a</p> <pre><code>nasm boot.asm -o boot.bin\n</code></pre> <p>\u5bf9\u4e8e <code>Linux</code> \u548c <code>macOS</code> \u7528\u6237\u800c\u8a00\uff0c\u53ea\u9700\u8981\u4e0b\u9762\u4e24\u884c\u547d\u4ee4\u5c31\u53ef\u4ee5\u5b8c\u6210\u8f6f\u76d8\u6620\u50cf\u7684\u521b\u5efa\u4e0e\u5199\u5165\uff1a</p> <pre><code>dd if=/dev/zero of=a.img bs=512 count=2880\ndd if=boot.bin of=a.img bs=512 count=1 conv=notrunc\n</code></pre> <p>\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f <code>Windows</code>\uff0c\u90a3\u4e48\u9700\u8981\u6267\u884c <code>bximage</code>\u3002\u4e0b\u9762\u662f\u4f7f\u7528 <code>bximage</code> \u521b\u5efa\u8f6f\u76d8\u6620\u50cf\u7684\u5b9e\u4f8b\uff1a</p> <pre><code>&gt; bximage\n========================================================================\n                                bximage\n                  Disk Image Creation Tool for Bochs\n        $Id: bximage.c,v 1.34 2009/04/14 09:45:22 sshwarts Exp $\n========================================================================\n\nDo you want to create a floppy disk image or a hard disk image?\nPlease type hd or fd. [hd] fd\n\nChoose the size of floppy disk image to create, in megabytes.\nPlease type 0.16, 0.18, 0.32, 0.36, 0.72, 1.2, 1.44, 1.68, 1.72, or 2.88. [1.44]\n\nI will create a floppy image with\n  heads=2\n  sectors per track=18\n  total sectors=2880\n  total bytes=1474560\n\nWhat should I name the image? [a.img]\n\nWriting: [] Done.\n\nI wrote 1474560 bytes to a.img.\n\nThe following line should appear in your bochsrc:\n  floppya: image=\"a.img\", status=inserted\n(The line is stored in your windows clipborad, use CTRL-V to paste)\n\nPress any key to continue\n&gt;\n</code></pre> <p>\u786c\u76d8\u955c\u50cf\u5236\u4f5c\u5b8c\u6210\u4e4b\u540e\uff0c\u6211\u4eec\u518d\u6267\u884c\u4e00\u6761\u5199\u5165\u547d\u4ee4\uff1a <pre><code>dd if=boot.bin of=a.img bs=512 count=1\n</code></pre></p> <p>\u6ce8\u610f\uff0c<code>Windows</code> \u4e0b\u7684 <code>dd</code> \u4e0d\u652f\u6301 <code>conv</code> \u9009\u9879\u3002</p> <p>\u53e6\u5916\uff0c\u5982\u679c\u60a8\u7684 <code>boot.bin</code> \u88ab\u62a5\u6bd2 <code>KillMBR</code>\uff0c\u8bf7\u4e0d\u8981\u60ca\u614c\uff0c\u56e0\u4e3a\u5b83\u5c31\u662f\u4e00\u4e2a <code>MBR</code>\uff0c\u56e0\u6b64\u88ab\u5224\u4e3a\u8986\u76d6 <code>MBR</code> \u7684\u75c5\u6bd2\u975e\u5e38\u6b63\u5e38\uff0c\u9ed8\u8ba4\u4e0d\u505a\u64cd\u4f5c\u5373\u53ef\u3002</p> <p>\u65e0\u8bba\u662f\u4e0a\u8ff0\u54ea\u79cd\u60c5\u51b5\uff0c\u5728\u5236\u4f5c\u5b8c\u6210\u4e4b\u540e\uff0c\u76f4\u63a5\u6267\u884c\u4e00\u884c\u547d\u4ee4\u6765\u6267\u884c\uff1a <pre><code>qemu-system-i386 -fda a.img\n</code></pre></p> <p>\u5982\u679c\u60a8\u7684\u6267\u884c\u7ed3\u679c\u5982\u4e0b\u56fe\uff0c\u90a3\u4e48\u606d\u559c\u60a8\uff0c\u60a8\u7684\u5f15\u5bfc\u6247\u533a\u6210\u529f\u6267\u884c\u4e86\uff01</p> <p></p> <p>\uff08\u56fe 1-1 \u8fd0\u884c\u7ed3\u679c\uff09</p> <p>\u65e0\u8bba\u60a8\u4f7f\u7528\u7684\u662f\u54ea\u79cd\u865a\u62df\u673a\uff0c\u53ea\u8981\u5de6\u4e0a\u89d2\u51fa\u73b0 <code>Hello, OS world!</code> \u5c31\u7b97\u662f\u6210\u529f\u3002</p>"},{"location":"os-tutorial/old/02-fat12-file-system/","title":"02 \u521b\u5efa FAT12 \u6587\u4ef6\u7cfb\u7edf","text":"<p>\u524d\u9762\u6211\u4eec\u82b1\u4e86\u6781\u5927\u7684\u7bc7\u5e45\u6765\u5199\u4e00\u4e2a\u6781\u7b80\u5f15\u5bfc\u6247\u533a\u7684\u5b9e\u73b0\uff0c\u4f46\u662f\u672c\u8282\u76f8\u6bd4\u4e4b\u4e0b\u5c31\u8981\u77ed\u5f88\u591a\u4e86\uff0c\u6211\u4eec\u8981\u5728\u6211\u4eec\u7684\u8f6f\u76d8\u4e2d\u521b\u5efa FAT12 \u6587\u4ef6\u7cfb\u7edf\uff0c\u8fd9\u6837\u540e\u7eed\u6211\u4eec\u5199\u5165 <code>Loader</code> \u548c <code>Kernel</code> \u5c31\u8981\u65b9\u4fbf\u5f88\u591a\u4e86\u3002</p> <p>\u4e00\u4e2a\u78c1\u76d8\u4e2d\u6709\u6ca1\u6709\u6587\u4ef6\u7cfb\u7edf\uff0c\u662f\u4f9d\u9760\u4ec0\u4e48\u6765\u8fdb\u884c\u6807\u8bc6\u7684\u5462\uff1f\u4e00\u822c\u800c\u8a00\uff0c\u6bcf\u4e00\u4e2a\u6587\u4ef6\u7cfb\u7edf\u90fd\u6709\u7279\u5b9a\u7684\u4e00\u4e2a\u7ed3\u6784\u7528\u6765\u63cf\u8ff0\u81ea\u5df1\uff0c\u65e0\u8bba\u662f ext2 \u7684 metadata \u5757\uff0c\u8fd8\u662f FAT12/16/32 \u5728\u5f15\u5bfc\u6247\u533a\u4e2d\u52a0\u5165\u7684 BPB\uff0c\u90fd\u662f\u4e00\u79cd\u5bf9\u6587\u4ef6\u7cfb\u7edf\u7684\u6807\u8bc6\u3002</p> <p>BPB \u7684\u5177\u4f53\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff08\u5b9e\u5728\u61d2\u5f97\u6253\u5217\u8868\u4e86\uff0c\u5e72\u8106\u642c\u4e86\u4e00\u5f20\u7f51\u56fe\uff09\uff1a</p> <p></p> <p>\uff08\u56fe 2-1 BPB \u7684\u7ed3\u6784\uff09</p> <p>\u5982\u8bf8\u4f4d\u6240\u89c1\uff0c<code>FAT12</code> \u6587\u4ef6\u7cfb\u7edf\u5934\u5360\u7528\u4e86\u6c47\u7f16\u7a0b\u5e8f\u5f00\u5934\u7684 64 \u4e2a\u5b57\u8282\u3002\u8fd9\u4e0b\u53ef\u7528\u7684\u7a7a\u95f4\u53c8\u5c11\u4e86 64 \u5b57\u8282\uff08\u6cea\u76ee\uff09</p> <p>\u4e0d\u8fc7\u5b83\u4e5f\u5e26\u7ed9\u6211\u4eec\u4e00\u4e2a\u597d\u5904\uff0c\u4e00\u822c\u7684 FAT \u5b9e\u73b0\u90fd\u8ba4\u4e3a\u53ea\u8981\u6709 BPB \u5c31\u662f\u6709 FAT \u6587\u4ef6\u7cfb\u7edf\uff08\u6709\u7684\u5b9e\u73b0\u751a\u81f3\u4e0d\u4f1a\u7ba1 BPB\uff09\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528\u4e00\u4e9b\u5de5\u5177\u6765\u65b9\u4fbf\u5730\u64cd\u4f5c\u78c1\u76d8\u4e86\u3002</p> <p>\u90a3\u4e48\u6211\u4eec\u5c31\u4f9d\u7167\u6b64\u7ed3\u6784\u5199\u5165\u4e00\u4e0b\u8fd9\u4e9b\u7ed3\u6784\u5427\uff1a</p> <p>\u4ee3\u7801 2-1 <code>FAT12</code> \u6587\u4ef6\u7cfb\u7edf\u5934\uff08boot.asm\uff09 <pre><code>    org 07c00h ; \u544a\u8bc9\u7f16\u8bd1\u5668\u7a0b\u5e8f\u5c06\u88c5\u8f7d\u81f30x7c00\u5904\n\n    jmp short LABEL_START\n    nop ; BS_JMPBoot \u7531\u4e8e\u8981\u4e09\u4e2a\u5b57\u8282\u800cjmp\u5230LABEL_START\u53ea\u6709\u4e24\u4e2a\u5b57\u8282 \u6240\u4ee5\u52a0\u4e00\u4e2anop\n\n    BS_OEMName     db 'tutorial'    ; 8\u4e2a\u5b57\u8282\uff0c\u5185\u5bb9\u968f\u610f\n    BPB_BytsPerSec dw 512           ; \u6bcf\u6247\u533a\u56fa\u5b9a512\u4e2a\u5b57\u8282\n    BPB_SecPerClus db 1             ; \u6bcf\u7c07\u56fa\u5b9a1\u4e2a\u6247\u533a\n    BPB_RsvdSecCnt dw 1             ; MBR\u56fa\u5b9a\u5360\u75281\u4e2a\u6247\u533a\n    BPB_NumFATs    db 2             ; FAT12 \u6587\u4ef6\u7cfb\u7edf\u56fa\u5b9a2\u4e2a FAT \u8868\n    BPB_RootEntCnt dw 224           ; FAT12 \u6587\u4ef6\u7cfb\u7edf\u4e2d\u6839\u76ee\u5f55\u6700\u5927224\u4e2a\u6587\u4ef6\n    BPB_TotSec16   dw 2880          ; 1.44MB\u78c1\u76d8\u56fa\u5b9a2880\u4e2a\u6247\u533a\n    BPB_Media      db 0xF0          ; \u4ecb\u8d28\u63cf\u8ff0\u7b26\uff0c\u56fa\u5b9a\u4e3a0xF0\n    BPB_FATSz16    dw 9             ; \u4e00\u4e2aFAT\u8868\u6240\u5360\u7684\u6247\u533a\u6570\uff0cFAT12 \u6587\u4ef6\u7cfb\u7edf\u56fa\u5b9a\u4e3a9\u4e2a\u6247\u533a\n    BPB_SecPerTrk  dw 18            ; \u6bcf\u78c1\u9053\u6247\u533a\u6570\uff0c\u56fa\u5b9a\u4e3a18\n    BPB_NumHeads   dw 2             ; \u78c1\u5934\u6570\uff0cbximage \u7684\u8f93\u51fa\u544a\u8bc9\u6211\u4eec\u662f2\u4e2a\n    BPB_HiddSec    dd 0             ; \u9690\u85cf\u6247\u533a\u6570\uff0c\u6ca1\u6709\n    BPB_TotSec32   dd 0             ; \u82e5\u4e4b\u524d\u7684 BPB_TotSec16 \u5904\u6ca1\u6709\u8bb0\u5f55\u6247\u533a\u6570\uff0c\u5219\u7531\u6b64\u5730\u5740\u8bb0\u5f55\uff0c\u5982\u679c\u8bb0\u5f55\u4e86\uff0c\u8fd9\u91cc\u76f4\u63a5\u7f6e0\u5373\u53ef\n    BS_DrvNum      db 0             ; int 13h \u8c03\u7528\u65f6\u6240\u8bfb\u53d6\u7684\u9a71\u52a8\u5668\u53f7\uff0c\u7531\u4e8e\u53ea\u6709\u4e00\u4e2a\u8f6f\u76d8\u6240\u4ee5\u662f0 \n    BS_Reserved1   db 0             ; \u672a\u4f7f\u7528\uff0c\u9884\u7559\n    BS_BootSig     db 29h           ; \u6269\u5c55\u5f15\u5bfc\u6807\u8bb0\uff0c\u56fa\u5b9a\u4e3a 0x29\n    BS_VolID       dd 0             ; \u5377\u5e8f\u5217\u53f7\uff0c\u7531\u4e8e\u53ea\u6302\u8f7d\u4e00\u4e2a\u8f6f\u76d8\u6240\u4ee5\u4e3a0\n    BS_VolLab      db 'OS-tutorial' ; \u5377\u6807\uff0c11\u4e2a\u5b57\u8282\uff0c\u5185\u5bb9\u968f\u610f\n    BS_FileSysType db 'FAT12   '    ; \u7531\u4e8e\u662f FAT12 \u6587\u4ef6\u7cfb\u7edf\uff0c\u6240\u4ee5\u5199\u5165 FAT12 \u540e\u8865\u9f508\u4e2a\u5b57\u8282\n\nLABEL_START: ; \u540e\u9762\u5c31\u662f\u6b63\u5e38\u7684\u5f15\u5bfc\u4ee3\u7801\n    mov ax, cs\n    mov ds, ax\n    mov es, ax ; \u5c06ds es\u8bbe\u7f6e\u4e3acs\u7684\u503c\uff08\u56e0\u4e3a\u6b64\u65f6\u5b57\u7b26\u4e32\u5b58\u5728\u4ee3\u7801\u6bb5\u5185\uff09\n    call DispStr ; \u663e\u793a\u5b57\u7b26\u51fd\u6570\n    jmp $ ; \u6b7b\u5faa\u73af\n\nDispStr:\n    mov ax, BootMessage\n    mov bp, ax ; es\u524d\u9762\u8bbe\u7f6e\u8fc7\u4e86\uff0c\u6240\u4ee5\u6b64\u5904\u7684bp\u5c31\u662f\u4e32\u5730\u5740\n    mov cx, 16 ; \u5b57\u7b26\u4e32\u957f\u5ea6\n    mov ax, 01301h ; \u663e\u793a\u6a21\u5f0f\n    mov bx, 000ch ; \u663e\u793a\u5c5e\u6027\n    mov dl, 0 ; \u663e\u793a\u5750\u6807\uff08\u8fd9\u91cc\u53ea\u8bbe\u7f6e\u5217\u56e0\u4e3a\u884c\u56fa\u5b9a\u662f0\uff09\n    int 10h ; \u663e\u793a\n    ret\n\nBootMessage: db \"Hello, OS world!\"\ntimes 510 - ($ - $$) db 0\ndb 0x55, 0xaa ; \u786e\u4fdd\u6700\u540e\u4e24\u4e2a\u5b57\u8282\u662f0x55AA\n</code></pre></p> <p>\u6309\u4e0a\u6587\u7684\u65b9\u6cd5\u7f16\u8bd1\u8fd0\u884c\uff0c\u7ed3\u679c\u4ecd\u5e94\u5982\u56fe 1-1 \u6240\u793a\u3002\u867d\u7136\u663e\u793a\u7ed3\u679c\u6ca1\u6709\u53d8\u5316\uff0c\u4f46\u6b64\u65f6\u7684\u8f6f\u76d8\u5df2\u7ecf\u62e5\u6709\u4e86 <code>FAT12</code> \u6587\u4ef6\u7cfb\u7edf\u3002</p>"},{"location":"os-tutorial/old/03-find-loader/","title":"03 \u67e5\u627e Loader","text":"<p>\u603b\u662f\u56f0\u5728\u5c0f\u5c0f\u7684\u5f15\u5bfc\u6247\u533a\u4e4b\u4e2d\uff0c\u4e5f\u4e0d\u662f\u957f\u4e45\u4e4b\u8ba1\uff0c\u6bd5\u7adf\u53ea\u6709 446 \u4e2a\u5b57\u8282\u80fd\u7ed9\u6211\u4eec\u81ea\u7531\u652f\u914d\uff0c\u800c\u4fdd\u62a4\u6a21\u5f0f\u7684\u6808\u52a8\u4e0d\u52a8\u5c31 512 \u5b57\u8282\uff0c\u4e00\u4e2a\u5f15\u5bfc\u6247\u533a\u5b8c\u5168\u76db\u4e0d\u4e0b\u3002\u6240\u4ee5\u6211\u4eec\u6709\u5fc5\u8981\u8fdb\u5165\u4e00\u4e2a\u8df3\u677f\u6a21\u5757\uff0c\u5e76\u5728\u5176\u4e2d\u8fdb\u884c\u521d\u59cb\u5316\u5de5\u4f5c\uff0c\u518d\u8fdb\u5165\u5185\u6838\u3002</p> <p>\u8fd9\u65f6\u5019\u53c8\u8be5\u6709\u4eba\u95ee\u4e86\uff1a</p> <p>\u554a\u6240\u4ee5\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u8fdb\u5185\u6838\u5462\uff1f</p> <p>emmm\uff0c\u4e8b\u5b9e\u4e0a\u4e5f\u6709\u8fd9\u79cd\u7cfb\u7edf\uff08\u6bd4\u5982 <code>haribote</code>\uff09\uff0c\u4f46\u8fd9\u6837\u7684\u4e00\u4e2a\u7f3a\u70b9\u5c31\u662f\u4f60\u7684\u5185\u6838\u6587\u4ef6\u7ed3\u6784\u5fc5\u987b\u5f88\u7b80\u5355\u751a\u81f3\u6839\u672c\u6ca1\u6709\u7ed3\u6784\u624d\u884c\u3002</p> <p>\u6240\u4ee5\u6211\u4eec\u8fd8\u662f\u8001\u8001\u5b9e\u5b9e\u5730\u8df3\u5165 <code>Loader</code> \u518d\u8fdb\u5185\u6838\u5427\uff0c\u4e0d\u8fc7\u8bdd\u8bf4\u56de\u6765\uff0c\u6211\u4eec\u73b0\u5728\u8fde\u4e00\u4e2a\u6b63\u7ecf\u516b\u767e\u7684 <code>Loader</code> \u90fd\u8fd8\u6ca1\u6709\uff0c\u4e0d\u7740\u6025\uff0c\u6211\u4eec\u9a6c\u4e0a\u521b\u5efa\u4e00\u4e2a\uff1a</p> <p>\u4ee3\u7801 3-1 \u6781\u7b80 <code>Loader</code>\uff08loader.asm\uff09 <pre><code>    org 0100h\n\n    mov ax, 0B800h\n    mov gs, ax ; \u5c06gs\u8bbe\u7f6e\u4e3a0xB800\uff0c\u5373\u6587\u672c\u6a21\u5f0f\u4e0b\u7684\u663e\u5b58\u5730\u5740\n    mov ah, 0Fh ; \u663e\u793a\u5c5e\u6027\uff0c\u6b64\u5904\u6307\u767d\u8272\n    mov al, 'L' ; \u5f85\u663e\u793a\u7684\u5b57\u7b26\n    mov [gs:((80 * 0 + 39) * 2)], ax ; \u76f4\u63a5\u5199\u5165\u663e\u5b58\n\n    jmp $ ; \u5361\u6b7b\u5728\u6b64\u5904\n</code></pre></p> <p>\u8fd9\u4e2a <code>Loader</code> \u7684\u4f5c\u7528\u5f88\u7b80\u5355\uff0c\u53ea\u662f\u5728\u5c4f\u5e55\u7b2c\u4e00\u884c\u7684\u6b63\u4e2d\u592e\u663e\u793a\u4e00\u4e2a\u767d\u8272\u7684 \u201cL\u201d\u3002\u4e0d\u8fc7\uff0c\u5b83\u8fd8\u662f\u9700\u8981\u4e00\u4e9b\u89e3\u91ca\u7684\u3002</p> <p>\u9996\u5148\u7b2c\u4e00\u884c\u60f3\u5fc5\u4e0d\u7528\u89e3\u91ca\uff0c\u4e0d\u7ba1\u5b83\u52a0\u8f7d\u5230\u4e86\u4ec0\u4e48\u6bb5\uff0c\u90fd\u628a\u5b83\u52a0\u8f7d\u5230 <code>0x100</code> \u7684\u504f\u79fb\u5904\u3002\u63a5\u4e0b\u6765\u4e24\u884c\u8ba9 <code>gs = 0xB800</code>\uff0c\u7531\u7b2c\u4e00\u8282\u7684\u77e5\u8bc6\u53ef\u77e5\uff0c\u8fd9\u4e2a <code>gs</code> \u7ba1\u7684\u662f\u4ece <code>0xB8000</code> \u5f00\u59cb\u7684 64KB\uff0c\u800c\u8fd9\u4e2a\u4f4d\u7f6e\u6070\u597d\uff08\u867d\u7136\u6ca1\u90a3\u4e48\u5927\uff09\u662f\u6587\u672c\u6a21\u5f0f\u4e0b\u7684\u663e\u5b58\uff0c\u8fd9\u91cc\u4f46\u51e1\u6709\u98ce\u5439\u8349\u52a8\uff0c\u90fd\u4f1a\u88ab\u7acb\u5373\u663e\u793a\u5728\u5c4f\u5e55\u4e0a\u3002</p> <p>0Fh \u4ee3\u8868\u767d\u8272\uff0c'L' \u4ee3\u8868\u5b57\u7b26\u3002\u628a\u5b83\u4eec\u5206\u522b\u653e\u5728 <code>ah</code> \u548c <code>al</code>\uff0c\u7ec4\u6210\u7684 <code>ax</code> \u5c31\u662f\u4e00\u4e2a\u53ef\u4ee5\u88ab\u663e\u793a\u7684\u5b57\u7b26\u4e86\u3002\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u800c\u8a00\uff0c\u90fd\u9700\u8981\u7528\u9ad8 8 \u4f4d\u653e\u989c\u8272\uff0c\u4f4e 8 \u4f4d\u653e\u5b57\u7b26\u672c\u8eab\uff0c\u7136\u540e\u518d\u8fdb\u884c\u663e\u793a\u3002</p> <p>\u6700\u540e\u4e00\u884c\u51fa\u73b0\u4e86\u6211\u4eec\u6ca1\u89c1\u8fc7\u7684 <code>[]</code>\uff0c\u5b83\u662f\u4ec0\u4e48\u610f\u601d\uff1f\u6211\u4eec\u5148\u628a\u8fd9\u4e2a <code>[]</code> \u53bb\u6389\u770b\u770b\u3002<code>gs:((80 * 0 + 39) * 2)</code>\uff0c\u8fd9\u50cf\u662f\u4e00\u4e2a\u5750\u6807\u3002\u786e\u5b9e\u5982\u6b64\uff0c\u6587\u672c\u6a21\u5f0f\u7684\u663e\u5b58\u6a2a\u5411\u4e3a 80 \u5b57\u7b26\uff0c\u7eb5\u5411\u4e3a 25 \u5b57\u7b26\u3002\u524d\u9762\u7684 <code>80 * 0</code>\uff0c\u4ee3\u8868\u7b2c 0 \u884c\uff0c\u540c\u6837\uff0c<code>80 * k</code> \u5c31\u4ee3\u8868\u7b2c k \u884c\uff08\u7b2c 0 \u5230 k-1 \u884c\u4e00\u5171\u6709 80k \u4e2a\u5b57\u7b26\uff09\u3002\u540e\u9762\u7684 <code>+ 39</code>\uff0c\u81ea\u7136\u5c31\u8868\u793a\u7b2c 39 \u5217\u3002\u7531\u4e8e\u8fd9\u4e00\u884c\u524d\u9762 k \u884c\u4e00\u5171\u6709 80k \u4e2a\u5b57\u7b26\uff0c\u8fd9\u4e00\u5217\u524d\u9762 n \u5217\u53c8\u6709 n \u4e2a\u5b57\u7b26\uff0c\u90a3\u4e48 (k, n) \u8fd9\u4e2a\u5750\u6807\uff0c\u81ea\u7136\u5c31\u5bf9\u5e94 80k+n \u8fd9\u4e2a\u4f4d\u7f6e\uff08\u7531\u6b64\u53ef\u89c1\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u7684\u597d\u5904\uff09\u3002</p> <p>\u90a3\u4e48\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u5750\u6807\u8981\u4e58 2 \u5462\uff1f\u8fd9\u4e2a\u95ee\u9898\u7684\u56de\u7b54\u5219\u66f4\u4e3a\u7b80\u5355\uff0c\u7531\u4e0a\u9762\u7684\u8bf4\u660e\u5c31\u77e5\u9053\uff0c\u6bcf\u4e00\u4e2a\u5b57\u7b26\u5728\u663e\u5b58\u4e2d\u5360\u636e 2 \u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u81ea\u7136\u8981\u4e58 2 \u624d\u80fd\u5b9a\u4f4d\u5230\u663e\u5b58\u4e2d\u7684\u504f\u79fb\u3002</p> <p>\u6700\u540e\u52a0\u4e0a\u524d\u9762\u7684 <code>gs:</code>\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u8fd9\u4e2a\u5b57\u7b26\u5c06\u8981\u88ab\u663e\u793a\u7684\u5185\u5b58\u5730\u5740\u3002\u800c\u52a0\u4e0a\u8fd9\u4e2a\u4e2d\u62ec\u53f7\uff0c\u5c31\u610f\u5473\u7740\u5f80\u8fd9\u4e2a\u5730\u5740\u5bf9\u5e94\u7684\u5185\u5b58\u91cc\u5199\u5165\u4e1c\u897f\uff0c\u8fd9\u91cc\u662f <code>ax</code>\u3002\u81f3\u6b64\uff0c\u53ea\u8981\u5b83\u88ab\u6267\u884c\u5230\uff0c\u5c31\u53ef\u4ee5\u5728\u5c4f\u5e55\u4e0a\u663e\u793a\u4e00\u4e2a\u767d\u8272 L\u3002</p> <p>\u60f3\u8981\u6267\u884c <code>Loader</code>\uff0c\u81ea\u7136\u9700\u8981\u5148\u628a\u5b83\u8bfb\u53d6\u5230\u5185\u5b58\uff0c\u7136\u540e\u8df3\u8f6c\u8fc7\u53bb\uff1b\u800c\u60f3\u8981\u8bfb\u53d6 <code>Loader</code>\uff0c\u81ea\u7136\u9700\u8981\u5148\u627e\u5230\u5b83\u3002</p> <p>\u4e8e\u662f\u73b0\u5728\u6700\u4e3b\u8981\u7684\u95ee\u9898\u5c31\u53d8\u6210\u4e86\uff1a\u6211\u4eec\u5e94\u8be5\u600e\u6837\u5bfb\u627e <code>Loader</code> \u5462\uff1f</p> <p>\u8fd9\u4e2a\u5f88\u7b80\u5355\uff0c\u5728\u6839\u76ee\u5f55\u533a\u4e2d\u662f\u4e00\u4e2a\u4e00\u4e2a\u4e00\u4e2a 32 \u5b57\u8282\u7684\u6587\u4ef6\u7ed3\u6784\uff0c\u5176\u4e2d\u5c31\u5305\u542b\u6587\u4ef6\u540d\uff0c\u6211\u4eec\u5728\u6839\u76ee\u5f55\u533a\u4e2d\u67e5\u627e\u5373\u53ef\u3002</p> <p>\u4f9d\u7167 FAT12 \u6587\u4ef6\u7cfb\u7edf\u7684\u7ed3\u6784\u89c4\u5b9a\uff0c\u6839\u76ee\u5f55\u533a\u6392\u5728 FAT \u8868\u548c\u5f15\u5bfc\u6247\u533a\u540e\u9762\uff0c\u56e0\u6b64\u5b83\u7684\u8d77\u59cb\u6247\u533a\u662f BPB_RsvdSecCnt + BPB_NumFATs * BPB_FATSz16 = 19 \u53f7\u6247\u533a\uff1b\u5b83\u7684\u7ed3\u675f\u4f4d\u7f6e\u5219\u662f 19 + BPB_RootEntCnt * 32 / BPB_BytsPerSec = 33 \u53f7\u6247\u533a\u3002\u5728\u7b2c\u4e00\u8282\u4e5f\u66fe\u63d0\u5230\uff0c\u6247\u533a\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 512 \u5b57\u8282\u7684\u7ed3\u6784\uff0c\u5927\u591a\u6570\u65f6\u5019\u4f4d\u4e8e\u78c1\u76d8\u4e2d\u3002\u4e0d\u8fc7\u5b83\u8fd8\u6709\u4e00\u4e2a\u5730\u4f4d\uff0c\u90a3\u5c31\u662f\u78c1\u76d8\u8bfb\u5199\u7684\u6700\u5c0f\u5355\u4f4d\u3002\u5f53\u6211\u4eec\u8bf4\u7b2c\u67d0\u67d0\u6247\u533a\u6216\u8005\u662f\u67d0\u67d0\u53f7\u6247\u533a\u65f6\uff0c\u9ed8\u8ba4\u5b83\u4ece 0 \u5f00\u59cb\uff0c\u4e5f\u5c31\u662f\u8bf4\u5f15\u5bfc\u6247\u533a\u662f\u7b2c 0 \u4e2a\u800c\u975e\u7b2c 1 \u4e2a\u6247\u533a\u3002</p> <p>\u4e8e\u662f\u6211\u4eec\u7684\u601d\u8def\u4fbf\u6709\u4e86\uff1a\u4ece\u7b2c 19 \u53f7\u6247\u533a\u5f00\u59cb\uff0c\u4f9d\u6b21\u8bfb\u53d6\u6bcf\u4e00\u4e2a\u6247\u533a\uff0c\u5e76\u5728\u8bfb\u5230\u7684\u6247\u533a\u4e2d\u67e5\u627e <code>LOADER  BIN</code>\uff08loader.bin\u5199\u5165\u4e4b\u540e\u7684\u6587\u4ef6\u540d\uff09\u3002\u5982\u679c\u5df2\u7ecf\u8bfb\u5230\u7b2c 34 \u6247\u533a\u800c\u4ecd\u7136\u6ca1\u6709\u627e\u5230 <code>LOADER  BIN</code>\uff0c\u90a3\u4e48\u5c31\u9ed8\u8ba4\u8be5\u78c1\u76d8\u5185\u4e0d\u5b58\u5728 <code>loader</code> \u3002\u81f3\u4e8e\u600e\u4e48\u627e <code>LOADER  BIN</code>\uff0c\u73b0\u5728\u6ca1\u6709\u5b9e\u73b0\u90a3\u4e48\u591a\u9ad8\u7ea7\u7b97\u6cd5\u7684\u6761\u4ef6\uff0c\u53ea\u6709\u4e00\u4e2a\u5c0f\u7a8d\u95e8\uff1a\u6839\u76ee\u5f55\u533a\u662f\u4ece\u67d0\u67d0\u6247\u533a\u5f00\u59cb\u7684\uff0c\u800c\u67d0\u67d0\u6247\u533a\u7684\u5f00\u59cb\u4f4d\u7f6e\uff0c\u4e00\u5b9a\u662f 512 \u7684\u500d\u6570\uff0c\u4ece\u800c\u4e00\u5b9a\u662f 32 \u7684\u500d\u6570\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u5c31\u53ea\u9700\u8981\u904d\u5386\u5f00\u5934 11 \u5b57\u8282\uff0c\u82e5\u4e0d\u7b49\u4e8e <code>LOADER  BIN</code>\uff0c\u5219\u5148\u6307\u56de\u5f00\u5934\uff0c\u7136\u540e\u52a0 32\uff0c\u5c31\u6765\u5230\u4e86\u4e0b\u4e00\u4e2a\u6587\u4ef6\u7ed3\u6784\u3002\u7531\u4e8e\u67d0\u67d0\u6247\u533a\u7684\u5f00\u59cb\u4f4d\u7f6e\u662f 32 \u7684\u500d\u6570\uff0c\u6240\u6709\u6587\u4ef6\u4fe1\u606f\u7684\u5f00\u59cb\u4f4d\u7f6e\u4e5f\u90fd\u662f 32 \u7684\u500d\u6570\uff0c\u4ece\u800c\u6307\u56de\u5f00\u5934\u53ef\u4ee5\u901a\u8fc7\u4f4d\u8fd0\u7b97\u5b9e\u73b0\uff1a<code>32=0b100000</code>\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u4e0e\u4e0a 0\\text{xffff} - (32 - 1) = 0\\text{xffe}0\uff0c\u6211\u4eec\u5c31\u56de\u5230\u4e86\u5f00\u5934\u3002</p> <p>\u90a3\u4e48\u6211\u4eec\u8be5\u600e\u4e48\u8bfb\u53d6\u78c1\u76d8\u5462\uff1f\u4e8b\u5b9e\u4e0a\uff0cBIOS \u4e5f\u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86\u8fd9\u4e2a\u529f\u80fd\uff1a</p> <p>\u5411\u4e0b\u5217\u5bc4\u5b58\u5668\u4e2d\u4f9d\u6b21\u5b58\u5165\uff1a</p> <p>AH=02h\uff0c\u8868\u793a\u8bfb\u53d6\u78c1\u76d8</p> <p>AL\uff1a\u5f85\u8bfb\u53d6\u6247\u533a\u6570</p> <p>CH\uff1a\u8d77\u59cb\u6247\u533a\u6240\u5728\u7684\u67f1\u9762</p> <p>DH\uff1a\u8d77\u59cb\u6247\u533a\u6240\u5728\u7684\u78c1\u5934</p> <p>CL\uff1a\u8d77\u59cb\u6247\u533a\u5728\u67f1\u9762\u5185\u7684\u7f16\u53f7</p> <p>DL\uff1a\u9a71\u52a8\u5668\u53f7</p> <p>ES:BX\uff1a\u8bfb\u5165\u7f13\u51b2\u533a\u7684\u5730\u5740</p> <p>\u7136\u540e\u6267\u884c <code>int 13h</code>\u3002</p> <p>\u8fd4\u56de\u503c\uff1a</p> <p>FLAGS.CF=0\uff1a\u64cd\u4f5c\u6210\u529f\uff0cAH=0\uff0cAL=\u6210\u529f\u8bfb\u5165\u7684\u6247\u533a\u603b\u6570</p> <p>FLAGS.CF=1\uff1a\u64cd\u4f5c\u5931\u8d25\uff0cAH \u5b58\u653e\u9519\u8bef\u7f16\u7801</p> <p>\u8fd9\u91cc\u53c8\u51fa\u73b0\u4e86\u4e00\u5806\u65b0\u540d\u8bcd\uff0c\u67f1\u9762\u3001\u78c1\u5934\uff0c\u8fd9\u53c8\u662f\u4ec0\u4e48\uff1f\u8fd9\u662f\u5728\u7269\u7406\u4e0a\u78c1\u76d8\u7684\u5b58\u50a8\u7ed3\u6784\uff0c\u5177\u4f53\u7684\u7ed3\u6784\u4e0d\u9700\u8981\u77e5\u9053\uff0c\u4f60\u53ea\u9700\u8981\u77e5\u9053\uff0c\u6bcf\u4e00\u4e2a\u78c1\u76d8\u6709\u4e24\u9762\uff0c\u5206\u522b\u5bf9\u5e94\u4e0a\u4e0b\u4e24\u4e2a\u78c1\u5934\uff0c\u7f16\u53f7\u4e3a 0 \u548c 1\uff0c\u800c\u6bcf\u4e00\u9762\u4e0a\u53c8\u88ab\u7ec6\u7ec6\u5206\u4e3a 80 \u4e2a\u67f1\u9762\uff08\u67f1\u9762\u4e5f\u79f0\u78c1\u9053\uff09\uff0c\u800c\u8fd9\u91cc\u7684\u6247\u533a\u7f16\u53f7\uff0c\u5219\u662f\u628a\u67f1\u9762\u518d\u4e00\u6b21\u7ec6\u5206\u7684\u7ed3\u679c\uff0c\u6bcf\u4e00\u4e2a\u67f1\u9762\u53c8\u88ab\u5206\u4e3a 18 \u4e2a\u6247\u533a\u3002\u8fd9\u4e00\u4e2a\u67f1\u9762\u7684 18 \u4e2a\u6247\u533a\u7ed3\u675f\u540e\uff0c\u4e0b\u4e00\u4e2a\u6247\u533a\u5e76\u4e0d\u662f\u7d27\u90bb\u7740\u7684\u76f8\u90bb\u6247\u533a\uff0c\u800c\u662f\u78c1\u76d8\u5bf9\u9762\u7684\u90a3\u4e2a\u67f1\u9762\u7684\u7b2c\u4e00\u4e2a\u6247\u533a\u3002\u53ef\u80fd\u6709\u4e9b\u96be\u7406\u89e3\uff0c\u8bf4\u767d\u4e86\uff0c\u5176\u5b9e\u5c31\u662f 0 \u78c1\u5934\u30010 \u67f1\u9762\u300118 \u6247\u533a\uff08\u7b2c 17 \u6247\u533a\uff0c\u7262\u8bb0\u6211\u4eec\u8bf4\u7b2c\u67d0\u67d0\u6247\u533a\u65f6\u662f\u4ece 0 \u5f00\u59cb\u7684\uff09\u7684\u4e0b\u4e00\u4e2a\u6247\u533a\uff0c\u5e76\u4e0d\u662f 0 \u78c1\u5934\u30011 \u67f1\u9762\u30011 \u6247\u533a\uff08\u7b2c 36 \u6247\u533a\uff09\uff0c\u800c\u662f 1 \u78c1\u5934\u30010 \u67f1\u9762\u30011 \u6247\u533a\uff08\u7b2c 18 \u6247\u533a\uff09\uff1b\u800c 1 \u78c1\u5934\u30010 \u67f1\u9762\u300118 \u6247\u533a\u7684\u4e0b\u4e00\u4e2a\u6247\u533a\uff08\u7b2c 35 \u6247\u533a\uff09\uff0c\u624d\u662f 0 \u78c1\u5934\u30011 \u67f1\u9762\u30011 \u6247\u533a\uff08\u7b2c 36 \u6247\u533a\uff09\u3002</p> <p>\u7531\u4e8e\u8fd9\u79cd\u5bfb\u5740\u65b9\u6cd5\u592a\u8fc7\u5177\u4f53\uff0c\u8981\u7ed9\u7684\u53c2\u6570\u592a\u591a\uff0c\u73b0\u5728\u5df2\u7ecf\u666e\u904d\u5f03\u7528\u8fd9\u79cd\u6307\u5b9a\u6247\u533a\u7684\u65b9\u6cd5\uff1b\u7531\u4e8e\u7528\u5230\u67f1\u9762 Cylinder\u3001\u78c1\u5934 Head \u548c\u78c1\u5934\u5185\u7684\u6247\u533a\u7f16\u53f7 Sector\uff0c\u8fd9\u79cd\u65b9\u6cd5\u88ab\u79f0\u4e3a CHS \u65b9\u5f0f\u3002\u73b0\u5728\u4e00\u822c\u91c7\u7528\u76f4\u63a5\u6307\u5b9a\u603b\u7684\u6247\u533a\u7f16\u53f7\u7684\u65b9\u6cd5\uff0c\u8fd9\u4e2a\u6247\u533a\u7f16\u53f7\u53c8\u6709\u4e00\u4e2a\u540d\u5b57\u53eb\u505a\u903b\u8f91\u533a\u5757\u5730\u5740\uff08Logical Block Address\uff09\uff0c\u6240\u4ee5\u8fd9\u79cd\u65b9\u6cd5\u53c8\u88ab\u79f0\u4e3a LBA \u65b9\u5f0f\u3002\u4e4b\u6240\u4ee5\u73b0\u5728\u7a81\u7136\u63d0\u5230\u8fd9\u4e2a\uff0c\u662f\u4e3a\u4e86\u7ed9\u540e\u9762\u4e00\u4e2a\u65b9\u4fbf\uff0c\u4ee5\u540e\u5c31\u53ef\u4ee5\u53eb CHS\u3001LBA \u4e86\uff0c\u66f4\u4f55\u51b5 LBA \u8fd9\u4e2a\u6982\u5ff5\u6211\u4eec\u540e\u9762\u8fd8\u8981\u7528\u5230\u3002\u4ece\u4e0a\u9762\u7684\u63cf\u8ff0\u4e5f\u53ef\u4ee5\u5927\u81f4\u731c\u51fa\uff0c\u4e3a\u4ec0\u4e48 CHS \u91cc C \u6392\u5728 H \u524d\u9762\uff0c\u5b9e\u8bdd\u8bf4\u4e0d\u67e5\u8d44\u6599\u8c01\u80fd\u60f3\u5230\u554a\u3002</p> <p>\u8fd8\u6709\u4e00\u4e2a\u66f4\u5751\u7684\u70b9\uff0cCHS \u65b9\u5f0f\u4e0b\u7684\u7b2c\u4e00\u4e2a\u6247\u533a\u662f 0 \u78c1\u5934\u30010 \u67f1\u9762\u7684\u7b2c 1 \u6247\u533a\uff0c\u4f46 LBA \u65b9\u5f0f\u4e0b\u7684\u7b2c\u4e00\u4e2a\u6247\u533a\u7f16\u53f7\u662f 0\u3002\u5904\u7406\u5dee\u4e00\u95ee\u9898\u7684\u75db\u82e6\u56de\u5fc6\u53c8\u5f00\u59cb\u56de\u8361\u2026\u2026\uff08\u7b11\uff09</p> <p>\u603b\u4e4b\uff0c\u6211\u4eec\u73b0\u5728\u6700\u5927\u7684\u9700\u6c42\uff0c\u53c8\u53d8\u6210\u4e86\u628a LBA \u65b9\u5f0f\u4e0b\u7684\u6247\u533a\u8f6c\u6362\u6210 CHS \u7684\u5f62\u5f0f\u3002\u6211\u4eec\u5148\u4ece\u6247\u533a\u627e\u5230\u67f1\u9762\uff0c\u7136\u540e\u4ece\u67f1\u9762\u627e\u5230\u78c1\u5934\uff0c\u8fd9\u4e00\u6d41\u7a0b\u5927\u6982\u662f\u8fd9\u6837\u7684\uff1a</p> <p>\u9996\u5148\uff0c\u7528 LBA \u65b9\u5f0f\u7684\u6247\u533a\u53bb\u9664\u6bcf\u78c1\u9053\u6247\u533a\u6570\uff0c\u8fd9\u4e2a\u4e1c\u897f\u5199\u5728\u4e86 BPB \u91cc\u3002\u524d\u9762\u5b9a\u4e49 BPB \u7528\u7684\u90fd\u662f <code>db</code>\u3001<code>dw</code>\u3001<code>dd</code>\uff0c\u4e5f\u5c31\u662f\u5b58\u4e86\u4e00\u5806\u6570\u7ec4\u3002\u5176\u4e2d\uff0c<code>BPB_SecPerTrk</code> \u8868\u793a\u6bcf\u4e2a\u78c1\u9053\uff08\u5176\u5b9e\u5c31\u662f\u67f1\u9762\uff09\u6709\u591a\u5c11\u4e2a\u6247\u533a\uff0c\u5b83\u5927\u6982\u957f\u8fd9\u6837\uff1a<code>short BPB_SecPerTrk[] = {18};</code>\u3002\u6240\u4ee5\uff0c\u8bfb\u53d6\u7684\u65f6\u5019\u4e5f\u8981\u8bfb\u5185\u5b58\u5730\u5740\uff0c\u4e5f\u5c31\u662f\u7c7b\u4f3c <code>*BPB_SecPerTrk</code> \u7684\u4e1c\u897f\u3002\u5982\u679c\u60a8\u6709\u4e00\u5b9a C \u8bed\u8a00\u50a8\u5907\uff0c\u5c31\u77e5\u9053\u5b83\u76f8\u5f53\u4e8e <code>BPB_SecPerTrk[0]</code>\u3002\u8fd9\u6837\uff0c\u5546\u5c31\u5bf9\u5e94\u67f1\u9762\uff0c\u4f59\u6570\u5c31\u662f\u8fd9\u4e2a\u6247\u533a\u5728\u67f1\u9762\u5185\u7684\u4f4d\u7f6e\uff0cCHS \u7684 S \u5c31\u5df2\u7ecf\u5230\u624b\u4e86\u3002\u7531\u4e8e CHS \u65b9\u5f0f\u4e0e LBA \u65b9\u5f0f\u8d77\u59cb\u6247\u533a\u7684\u4e0d\u540c\uff0c\u8fd9\u91cc\u9700\u8981\u7ed9\u4f59\u6570\u52a0 1\u3002</p> <p>\u518d\u7136\u540e\uff0c\u4ece\u67f1\u9762\u627e\u78c1\u5934\uff0c\u7531\u4e0a\u9762\u7684\u63cf\u8ff0\u53ef\u4ee5\u63a8\u77e5\uff0c\u7ed9\u67f1\u9762\u9664\u4ee5 2\uff0c\u4f59\u6570\u5c31\u662f\u78c1\u5934\uff0c\u5546\u5c31\u662f\u5bf9\u5e94\u7684\u90a3\u4e2a\u67f1\u9762\u3002\u4e3e\u4e2a\u4f8b\u5b50\u770b\u770b\uff0c\u7b2c 36 \u6247\u533a\u9664\u4ee5 18\uff0c\u53ef\u4ee5\u77e5\u9053\u662f\u7b2c 2 \u4e2a\u67f1\u9762\uff08\u8fd9\u4e2a\u73a9\u610f\u4e5f\u662f\u4ece 0 \u5f00\u59cb\uff09\uff0c\u800c\u5b83\u5bf9\u5e94\u7684\u78c1\u5934\u5219\u5728\u6b63\u9762\uff0c\u96b6\u5c5e 0 \u78c1\u5934\uff1b\u7b2c 35 \u6247\u533a\u9664\u4ee5 18\uff0c\u662f\u7b2c 1 \u4e2a\u67f1\u9762\uff0c\u800c\u5b83\u5219\u5728\u80cc\u9762\uff0c\u96b6\u5c5e 1 \u78c1\u5934\u3002\u8fd9\u662f\u56e0\u4e3a\u6cbf\u7740\u6247\u533a\u53f7\u8d70\u4e0b\u53bb\u65f6\uff0c\u78c1\u5934\u6574\u4f53\u4e0a\u5448\u4e00\u4e2a 0\u30011\u30010\u30011 \u4ea4\u66ff\u7684\u6001\u52bf\uff08\u5177\u4f53\u5730\u8bf4\uff0c\u662f\u4e00\u6bb5 0\u3001\u4e00\u6bb5 1 \u8fd9\u4e48\u4ea4\u66ff\u4e0b\u53bb\u7684\uff09\u3002</p> <p>\u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u4ece LBA \u4e2d\u4e00\u4e2a\u5355\u72ec\u7684\u6247\u533a\u53f7\uff0c\u5b8c\u6574\u5730\u63a8\u51fa CHS \u4e09\u4e2a\u5206\u91cf\u7684\u503c\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u4e5f\u5c31\u53ea\u9700\u8981\u4e00\u4e2a LBA \u6247\u533a\u53f7\u5c31\u884c\u4e86\uff0c\u4e0a\u9762\u7684 BIOS \u8c03\u7528\u4e2d\uff0c<code>CH</code>\u3001<code>DH</code>\u3001<code>CL</code> \u53ef\u4ee5\u5f52\u4e00\u3002\u800c\u9a71\u52a8\u5668\u53f7\uff0c\u5219\u660e\u660e\u767d\u767d\u5730\u5199\u5728 <code>BS_DrvNum</code> \u8fd9\u4e2a\u6570\u7ec4\u91cc\uff08\u5b83\u4e5f\u662f\u7531 <code>db</code> \u5b9a\u4e49\u7684\uff09\uff0c\u5230\u65f6\u5019\u4ece\u8fd9\u4e2a\u6570\u7ec4\u53d6\u503c\u5c31\u884c\u4e86\uff0c<code>DL</code> \u4e5f\u53ef\u4ee5\u4e0d\u8981\u3002\u8fd9\u6837\uff0c\u5c31\u53ea\u5269\u4e0b\u4e09\u4e2a\u5fc5\u8981\u7684\u53c2\u6570\uff1a\u7f13\u51b2\u533a <code>ES:BX</code>\u3001\u8bfb\u53d6\u6247\u533a\u6570 <code>AL</code> \u4ee5\u53ca\u8d77\u59cb\u6247\u533a\u53f7\u3002\u7531\u4e8e\u8d77\u59cb\u6247\u533a\u53f7\u53ef\u80fd\u5f88\u5927\uff0c\u6211\u4eec\u628a\u5b83\u5206\u914d\u7ed9 <code>AX</code>\uff0c\u539f\u5148\u8bfb\u53d6\u6247\u533a\u6570\u7684\u4f4d\u7f6e\u5c31\u968f\u4fbf\u6311\u4e2a\u4e1c\u897f\u7ed9\u4e86\uff0c\u5c31 <code>CL</code> \u5427\u3002</p> <p>\u8fd4\u56de\u503c\u4e2d\uff0c\u9519\u8bef\u7f16\u7801\u6211\u4eec\u5e76\u4e0d\u9700\u8981\uff0c\u53ea\u9700\u8981\u4fdd\u8bc1 <code>FLAGS.CF</code> \u7684\u503c\u4e3a <code>0</code> \u5c31\u53ef\u4ee5\u4e86\u3002\u5bf9\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u6267\u884c\u4e00\u4e2a <code>jc</code> \u8df3\u8f6c\u547d\u4ee4\uff0c\u5b83\u7684\u4f5c\u7528\u662f\u5f53 <code>FLAGS.CF</code> \u4e3a <code>1</code> \u65f6\u8df3\u8f6c\u3002\u5728\u8fd9\u4e2a\u6848\u4f8b\u91cc\uff0c\u6211\u4eec\u8ba9\u5b83\u591a\u8bd5\u51e0\u904d\uff0c\u4e0d\u8981\u56e0\u5931\u8d25\u800c\u653e\u5f03\uff0c\u6bcf\u6b21\u8ba9\u5b83\u5728\u51fa\u9519\u7684\u65f6\u5019\u8df3\u8f6c\u56de\u8bfb\u53d6\u5faa\u73af\u7684\u5f00\u5934\u91cd\u65b0\u8bfb\u5165\u3002</p> <p>\u601d\u8def\u6709\u4e86\uff0c\u8bfb\u76d8\u529f\u80fd\u4e5f\u6709\u4e86\uff0c\u6211\u4eec\u5c31\u5f00\u59cb\u5199\u7a0b\u5e8f\u5427\u3002\u9996\u5148\u5728 <code>DispStr</code> \u51fd\u6570\u7684\u540e\u9762\u52a0\u5165\u4e00\u4e2a\u8bfb\u53d6\u6247\u533a\u7684\u51fd\u6570 <code>ReadSector</code>\uff0c\u5b83\u7684\u4f5c\u7528\u4e0a\u9762\u5df2\u7ecf\u8bb2\u8fc7\uff0c\u4ece\u7b2c <code>ax</code> \u53f7\u6247\u533a\u5f00\u59cb\uff0c\u8fde\u7eed\u8bfb\u53d6 <code>cl</code> \u4e2a\u6247\u533a\u5230 <code>es:bx</code>\u3002</p> <p>\u4ee3\u7801 3-2 \u8bfb\u53d6\u8f6f\u76d8\u7684\u51fd\u6570\uff08boot.asm\uff09 <pre><code>ReadSector:\n    push bp\n    mov bp, sp\n    sub esp, 2 ; \u7a7a\u51fa\u4e24\u4e2a\u5b57\u8282\u5b58\u653e\u5f85\u8bfb\u6247\u533a\u6570\uff08\u56e0\u4e3acl\u5728\u8c03\u7528BIOS\u65f6\u8981\u7528\uff09\n\n    mov byte [bp-2], cl\n    push bx ; \u8fd9\u91cc\u4e34\u65f6\u7528\u4e00\u4e0bbx\n    mov bl, [BPB_SecPerTrk]\n    div bl ; \u6267\u884c\u5b8c\u540e\uff0cax\u5c06\u88ab\u9664\u4ee5bl\uff08\u6bcf\u78c1\u9053\u6247\u533a\u6570\uff09\uff0c\u8fd0\u7b97\u7ed3\u675f\u540e\u5546\u4f4d\u4e8eal\uff0c\u4f59\u6570\u4f4d\u4e8eah\uff0c\u90a3\u4e48al\u4ee3\u8868\u7684\u5c31\u662f\u603b\u78c1\u9053\u4e2a\u6570\uff08\u4e0b\u53d6\u6574\uff09\uff0cah\u4ee3\u8868\u7684\u662f\u5269\u4f59\u6ca1\u9664\u5f00\u7684\u6247\u533a\u6570\n    inc ah ; +1\u8868\u793a\u8d77\u59cb\u6247\u533a\uff08\u8fd9\u4e2a\u624d\u548cBIOS\u4e2d\u7684\u8d77\u59cb\u6247\u533a\u4e00\u4e2a\u610f\u601d\uff0c\u662f\u8bfb\u5165\u5f00\u59cb\u7684\u7b2c\u4e00\u4e2a\u6247\u533a\uff09\n    mov cl, ah ; \u6309\u7167BIOS\u6807\u51c6\u7f6e\u5165cl\n    mov dh, al ; \u7528dh\u6682\u5b58\u4f4d\u4e8e\u54ea\u4e2a\u78c1\u9053\n    shr al, 1 ; \u6bcf\u4e2a\u78c1\u9053\u4e24\u4e2a\u78c1\u5934\uff0c\u9664\u4ee52\u53ef\u5f97\u771f\u6b63\u7684\u67f1\u9762\u7f16\u53f7\n    mov ch, al ; \u6309\u7167BIOS\u6807\u51c6\u7f6e\u5165ch\n    and dh, 1 ; \u5bf9\u78c1\u9053\u6a212\u53d6\u4f59\uff0c\u53ef\u5f97\u4f4d\u4e8e\u54ea\u4e2a\u78c1\u5934\uff0c\u7ed3\u679c\u5df2\u7ecf\u7f6e\u5165dh\n    pop bx ; \u5c06bx\u8fd8\u539f\n    mov dl, [BS_DrvNum] ; \u5c06\u9a71\u52a8\u5668\u53f7\u5b58\u5165dl\n.GoOnReading: ; \u4e07\u4e8b\u4ff1\u5907\uff0c\u53ea\u6b20\u8bfb\u53d6\uff01\n    mov ah, 2 ; \u8bfb\u76d8\n    mov al, byte [bp-2] ; \u5c06\u4e4b\u524d\u5b58\u5165\u7684\u5f85\u8bfb\u6247\u533a\u6570\u53d6\u51fa\u6765\n    int 13h ; \u6267\u884c\u8bfb\u76d8\u64cd\u4f5c\n    jc .GoOnReading ; \u5982\u53d1\u751f\u9519\u8bef\u5c31\u7ee7\u7eed\u8bfb\uff0c\u5426\u5219\u8fdb\u5165\u4e0b\u9762\u7684\u6d41\u7a0b\n\n    add esp, 2\n    pop bp ; \u6062\u590d\u5806\u6808\n\n    ret\n</code></pre></p> <p>\u8fd9\u91cc\u51fa\u73b0\u4e86\u5f88\u591a\u6ca1\u6709\u89c1\u8fc7\u7684\u4e1c\u897f\uff0c\u9274\u4e8e\u5b9e\u5728\u662f\u6709\u70b9\u591a\uff0c\u6240\u4ee5\u6211\u8fd9\u91cc\u628a\u5b83\u8f6c\u5199\u4e3a\u7c7b\u4f3c C \u7684\u7a0b\u5e8f\uff1a</p> <p>\u4ee3\u7801 3-2 \u7684\u8f6c\u5199\uff08\u4e3b\u4f53\u90e8\u5206\uff09 <pre><code>void ReadSector(short ax, short cl, short *es:bx)\n{\n    save(cl); // \u5728\u6808\u91cc\u4fdd\u5b58cl\uff0c\u4f46\u8fd9\u4e2a\u548c\u5b58 bx \u6709\u5f88\u5927\u4e0d\u540c\uff0c\u5f85\u4f1a\u518d\u8bf4\n    push_to_stack(bx); // \u6682\u5b58bx\n    bl = BPB_SecPerTrk[0]; // 18\n    short quot = ax / bl, remain = ax % bl; // quot -&gt; \u5546\uff0c\u662f\u4ece0\u5f00\u59cb\u4f4d\u4e8e\u7b2c\u51e0\u4e2a\u67f1\u9762\uff1bremain -&gt; \u4f59\u6570\uff0c\u662f\u67f1\u9762\u5185\u7b2c\u51e0\u4e2a\u6247\u533a\n    ah = remain, al = quot; // div bl\u7684\u6548\u679c\u5c31\u662f\u8fd9\u6837\n    ah++; // inc ah\n    cl = ah; // cl\uff1a\u8d77\u59cb\u6247\u533a\u5728\u67f1\u9762\u5185\u7f16\u53f7\uff0c\u5df2\u83b7\u5f97\n    dh = al; // dh\uff1a\u4ece0\u5f00\u59cb\u7684\u67f1\u9762\u53f7\n    al &gt;&gt;= 1; // shr al, 1\uff0c\u6b64\u65f6\u7684al\u4e3a\u67f1\u9762\u53f7\n    ch = al; // ch\uff1a\u67f1\u9762\u53f7\uff0c\u5df2\u83b7\u5f97\n    dh &amp;= 1; // dh\uff1a\u78c1\u5934\u53f7\uff0c\u5df2\u83b7\u5f97\n    // \u81f3\u6b64 LBA \u683c\u5f0f\u7684 ax \u5df2\u7ecf\u6210\u529f\u8f6c\u6362\u4e3a CHS \u683c\u5f0f\u7684 cl\u3001ch \u548c dh\n    pop_from_stack(bx); // \u8fd8\u539fbx\n    dl = BS_DrvNum[0]; // \u83b7\u53d6\u9a71\u52a8\u5668\u53f7\n    do {\n        ah = 2; // ah = 0x02\uff0c\u8bfb\u76d8\n        al = load(); // \u8bfb\u53d6\u5148\u524d\u4fdd\u5b58\u7684cl\n        INT(0x13, ah, al, ch, dh, cl, dl, es:bx);\n    } while (flags.cf);\n}\n</code></pre></p> <p>\u4ec0\u4e48 <code>inc</code> \u5566\uff0c<code>shr</code> \u5566\uff0c<code>and</code> \u5566\uff0c\u5230\u5e95\u4ec0\u4e48\u610f\u601d\u90fd\u5df2\u7ecf\u8bb2\u660e\u767d\u4e86\u3002\u4e0b\u9762\u90a3\u4e2a <code>jc</code>\uff0c\u6211\u4eec\u4e5f\u628a\u5b83\u8868\u793a\u6210\u4e86 <code>do-while</code> \u7684\u5f62\u5f0f\u3002</p> <p>\u90a3\u4e48\u73b0\u5728\uff0c\u9700\u8981\u89e3\u91ca\u6e05\u695a\u7684\u5c31\u662f\u51e0\u70b9\uff1a1\u3001\u5f00\u5934\u7ed3\u5c3e\u7684 <code>push bp</code>\u3001<code>mov bp, sp</code> \u548c\u7ed3\u5c3e\u7684 <code>pop bp</code> \u662f\u5728\u5e72\u4ec0\u4e48\uff1b2\u3001\u8fd9\u4e2a <code>cl</code> \u5230\u5e95\u5b58\u54ea\u53bb\u4e86\uff1b3\u3001\u8fd9\u4e2a <code>.GoOnReading</code> \u5e26 <code>.</code> \u662f\u5728\u5e72\u4ec0\u4e48 \uff08\u867d\u7136\u6211\u89c9\u5f97\u6709\u8fd9\u4e2a\u95ee\u9898\u7684\u4e0d\u4f1a\u591a\uff09\u3002</p> <p>\u6211\u4eec\u4ece\u6613\u5230\u96be\u5427\u3002\u5148\u8bf4\u6700\u540e\u4e00\u70b9\uff0c\u8fd9\u5b9e\u9645\u4e0a\u662f <code>nasm</code> \u7684\u79c1\u8d27\uff0c\u8fd9\u79cd\u4e1c\u897f\u4e0d\u80fd\u5355\u72ec\u5b58\u5728\uff0c\u5fc5\u987b\u957f\u6210\u7c7b\u4f3c\u8fd9\u6837\uff1a</p> <pre><code>xxx:\n.xxx:\naaa:\n</code></pre> <p>\u624d\u884c\u3002\u53ea\u8981\u73b0\u5728\u7684\u4ee3\u7801\u8fd8\u5728\u6700\u4e0a\u9762\u90a3\u4e2a <code>xxx:</code> \u4e4b\u4e0b\uff0c\u8bbf\u95ee\u4e0b\u9762\u90a3\u4e2a <code>.xxx</code> \u5c31\u53ef\u4ee5\u76f4\u63a5\u7528 <code>.xxx</code> \u7684\u5f62\u5f0f\uff0c\u6bd4\u5982 <code>mov</code>\u3001<code>jmp</code>\u3001<code>call</code> \u90fd\u884c\uff1b\u4f46\u4e00\u65e6\u5230\u4e86\u4e0b\u9762\u90a3\u4e2a <code>aaa:</code> \u7684\u4e0b\u9762\uff0c\u5c31\u4e0d\u80fd\u518d\u8fd9\u4e48\u505a\u4e86\uff0c\u5982\u679c\u8fd8\u60f3\u8bbf\u95ee\u4e0a\u9762\u90a3\u4e2a <code>.xxx</code>\uff0c\u5fc5\u987b\u901a\u8fc7 <code>xxx.xxx</code> \u7684\u65b9\u5f0f\u3002\u6216\u8bb8\u6709\u4eba\u4f1a\u6709\u7591\u95ee\uff1a</p> <p>\u5982\u679c\u6211\u5728 <code>aaa</code> \u4e0b\u9762\u518d\u5b9a\u4e49\u4e00\u4e2a <code>.xxx</code> \u5462\uff1f</p> <p>\u90a3\u81ea\u7136\u662f\u6beb\u65e0\u95ee\u9898\uff0c<code>aaa</code> \u4e0b\u9762\u7684\u4ee3\u7801\u8bbf\u95ee <code>.xxx</code>\uff0c\u8bbf\u95ee\u7684\u5c31\u662f <code>aaa</code> \u4e0b\u9762\u5b9a\u4e49\u7684\u90a3\u4e2a\uff0c\u800c\u975e <code>xxx</code> \u4e0b\u9762\u5b9a\u4e49\u7684\u90a3\u4e2a\u3002\u8fd9\u4e2a\u4e1c\u897f\u5c31\u7c7b\u4f3c\u5728\u522b\u7684\u4ec0\u4e48\u9ad8\u7ea7\u7f16\u7a0b\u8bed\u8a00\u91cc\u7684\u79c1\u6709\u5c5e\u6027\uff0c\u56e0\u6b64\u6709\u4e2a\u540d\u5b57\u53eb\u672c\u5730\u6807\u7b7e\u3002\u4e0d\u8fc7\u76ee\u524d\u77e5\u9053\u5c31\u884c\u4e86\uff0c\u5177\u4f53\u7528\u5904\u6ca1\u6709\u4f53\u73b0\u3002</p> <p>\u63a5\u4e0b\u6765\u6765\u89e3\u51b3 1 \u548c 2\uff0c\u8fd9\u4fe9\u5176\u5b9e\u662f\u540c\u4e00\u4e2a\u95ee\u9898\u3002<code>push bp</code> \u548c <code>mov bp, sp</code> \u662f C \u8bed\u8a00\u51fd\u6570\u9ed8\u8ba4\u5e26\u6709\u7684\u4e24\u6761\u6307\u4ee4\uff0c\u8868\u793a\u51fd\u6570\u5f00\u59cb\uff0c\u6240\u8c13\u7684\u6808\u5e27\u4e5f\u5c31\u662f\u8fd9\u4e2a\u4e1c\u897f\u3002\u800c\u6700\u540e\u7684 <code>pop bp</code>\uff0c\u81ea\u7136\u662f\u53cd\u8fc7\u6765\u7684\u64cd\u4f5c\uff0c\u8868\u793a\u51fd\u6570\u7ed3\u675f\uff0c\u9000\u51fa\u6808\u5e27\u3002</p> <p>\u63a5\u4e0b\u6765\u7684 <code>mov byte [bp - 2], cl</code>\uff0c<code>bp - 2</code> \u5904\u6b64\u65f6\u662f\u4e2a\u4ec0\u4e48\u5730\u65b9\u5462\uff1f\u6ce8\u610f\u5728\u5b58\u5b8c\u6808\u5e27\u4ee5\u540e\uff0c\u7acb\u523b\u6267\u884c\u4e86 <code>sub esp, 2</code>\uff08<code>esp -= 2</code>\uff09\u7684\u64cd\u4f5c\uff0c\u800c <code>bp</code> \u5219\u76f8\u5f53\u4e8e\u8fd8\u6ca1\u51cf\u65f6\u5019\u7684 <code>sp</code>\uff0c<code>bp - 2</code> \u81ea\u7136\u5c31\u662f\u73b0\u5728\u7684 <code>sp</code>\u3002</p> <p>\u8bf4\u767d\u4e86\uff0c\u8fd9\u4e00\u756a\u64cd\u4f5c\u5176\u5b9e\u5c31\u76f8\u5f53\u4e8e\uff1a<code>push cl</code>\uff0c\u800c\u5df2\u3002\u53ea\u4e0d\u8fc7\u4e3a\u4e86\u5bf9\u79f0\uff0c\u4e00\u822c\u6709 <code>push</code> \u5fc5\u6709 <code>pop</code>\uff0c\u9664\u975e\u8fd4\u56de\uff0c\u800c\u8fd9\u4e2a\u4f4d\u7f6e\u540e\u9762\u8fd8\u8981\u7528\u5230\u591a\u6b21\uff0c\u4e0d\u80fd <code>pop</code>\uff0c\u56e0\u6b64\u6700\u5f00\u5934\u4e3a\u4e86\u5bf9\u79f0\u8d77\u89c1\uff08\u7b11\uff09\u4e5f\u5c31\u6ca1\u6709\u7528 <code>push</code>\u3002\u8fd9\u6837\u4e00\u6765\uff0c<code>cl</code> \u548c <code>bx</code> \u5176\u5b9e\u7c7b\u4f3c\uff0c\u90fd\u662f\u88ab\u6682\u5b58\u5728\u6808\u4e0a\u4e86\uff0c\u53ea\u662f <code>bx</code> \u53ea\u88ab\u7528\u5230\u4e00\u6b21\uff0c\u5f88\u5feb\u5c31 <code>pop</code> \u6389\u4e86\uff0c\u4f46 <code>cl</code> \u88ab\u7528\u5230\u591a\u6b21\uff0c\u4e00\u76f4\u5230\u6700\u540e\u7684 <code>add esp, 2</code> \u624d\u76f8\u5f53\u4e8e\u628a\u5b83 <code>pop</code> \u4e86\u51fa\u53bb\u3002</p> <p>\u597d\u4e86\uff0c<code>ReadSector</code> \u5c31\u89e3\u91ca\u5b8c\u4e86\uff0c\u4e0d\u77e5\u9053\u5927\u5bb6\u660e\u767d\u6ca1\u6709\uff08\u7b11\uff09\uff0c\u6211\u4eec\u7ee7\u7eed\u5427\u3002</p> <p>\u4e0b\u4e00\u6b65\uff0c\u6211\u4eec\u5b9a\u4e49\u51e0\u4e2a\u5e38\u91cf\uff0c\u5b83\u4eec\u7684\u4f5c\u7528\u662f\u589e\u52a0\u53ef\u8bfb\u6027\uff0c\u6bd5\u7adf\u6ee1\u7bc7\u5199\u6b7b\u7684\u6839\u76ee\u5f55\u5927\u5c0f14\u4e4b\u7c7b\u7684\uff0c\u5f88\u96be\u8ba9\u4eba\u770b\u61c2\u3002</p> <p>\u4ee3\u7801 3-3 \u653e\u5728\u5f00\u5934\u7684\u5e38\u91cf\u5b9a\u4e49\uff08boot.asm\uff09 <pre><code>BaseOfStack             equ 07c00h ; \u6808\u7684\u57fa\u5740\nBaseOfLoader            equ 09000h ; Loader\u7684\u57fa\u5740\nOffsetOfLoader          equ 0100h  ; Loader\u7684\u504f\u79fb\nRootDirSectors          equ 14     ; \u6839\u76ee\u5f55\u5927\u5c0f\nSectorNoOfRootDirectory equ 19     ; \u6839\u76ee\u5f55\u8d77\u59cb\u6247\u533a\n</code></pre></p> <p>\u5e38\u91cf\u8fc7\u540e\u8fd8\u6709\u53d8\u91cf\uff0c\u6211\u4eec\u5728\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\u5c06\u8981\u7528\u5230\u7684\u53d8\u91cf\u4e5f\u4e0d\u5c11\uff0c\u5b83\u4eec\u5c06\u88ab\u653e\u7f6e\u5728 <code>DispStr</code> \u51fd\u6570\u7684\u524d\u9762\u3002</p> <p>\u4ee3\u7801 3-4 \u653e\u5728\u4e2d\u95f4\u7684\u53d8\u91cf\u5b9a\u4e49\uff08boot.asm\uff09 <pre><code>wRootDirSizeForLoop dw RootDirSectors ; \u67e5\u627eloader\u7684\u5faa\u73af\u4e2d\u5c06\u4f1a\u7528\u5230\nwSectorNo           dw 0              ; \u7528\u4e8e\u4fdd\u5b58\u5f53\u524d\u6247\u533a\u6570\nbOdd                db 0              ; \u8fd9\u4e2a\u5176\u5b9e\u662f\u4e0b\u4e00\u8282\u7684\u4e1c\u897f\uff0c\u4e0d\u8fc7\u5148\u653e\u5728\u8fd9\u4e5f\u4e0d\u662f\u4e0d\u884c\n\nLoaderFileName      db \"LOADER  BIN\", 0 ; loader\u7684\u6587\u4ef6\u540d\n\nMessageLength       equ 9 ; \u4e0b\u9762\u662f\u4e09\u6761\u5c0f\u6d88\u606f\uff0c\u6b64\u53d8\u91cf\u7528\u4e8e\u4fdd\u5b58\u5176\u957f\u5ea6\uff0c\u4e8b\u5b9e\u4e0a\u5728\u5185\u5b58\u4e2d\u5b83\u4eec\u7684\u6392\u5e8f\u7c7b\u4f3c\u4e8e\u4e8c\u7ef4\u6570\u7ec4\nBootMessage:        db \"Booting  \" ; \u6b64\u5904\u5b9a\u4e49\u4e4b\u540e\u5c31\u53ef\u4ee5\u5220\u9664\u539f\u5148\u5b9a\u4e49\u7684BootMessage\u5b57\u7b26\u4e32\u4e86\nMessage1            db \"Ready.   \" ; \u663e\u793a\u5df2\u51c6\u5907\u597d\nMessage2            db \"No LOADER\" ; \u663e\u793a\u6ca1\u6709Loader\n</code></pre></p> <p><code>BootMessage</code> \u6539\u8fc7\u4e4b\u540e\uff0c<code>DispStr</code> \u4e5f\u505a\u4e86\u5fae\u8c03\uff0c\u73b0\u5728\u53ef\u4ee5\u7528 <code>dh</code> \u4f20\u9012\u6d88\u606f\u7f16\u53f7\u6765\u6253\u5370\u4e86\uff1a</p> <p>\u4ee3\u7801 3-5 \u6539\u8fdb\u540e\u7684 <code>DispStr</code>\uff08boot.asm\uff09 <pre><code>DispStr:\n    mov ax, MessageLength\n    mul dh ; \u5c06ax\u4e58\u4ee5dh\u540e\uff0c\u7ed3\u679c\u4ecd\u7f6e\u5165ax\uff08\u4e8b\u5b9e\u4e0a\u8fdc\u6bd4\u6b64\u590d\u6742\uff0c\u6b64\u5904\u5148\u89e3\u91ca\u5230\u8fd9\u91cc\uff09\n    add ax, BootMessage ; \u627e\u5230\u7ed9\u5b9a\u7684\u6d88\u606f\n    mov bp, ax ; \u5148\u7ed9\u5b9a\u504f\u79fb\n    mov ax, ds\n    mov es, ax ; \u4ee5\u9632\u4e07\u4e00\uff0c\u91cd\u65b0\u8bbe\u7f6ees\n    mov cx, MessageLength ; \u5b57\u7b26\u4e32\u957f\u5ea6\n    mov ax, 01301h ; ah=13h, \u663e\u793a\u5b57\u7b26\u7684\u540c\u65f6\u5149\u6807\u79fb\u4f4d\n    mov bx, 0007h ; \u9ed1\u5e95\u7070\u5b57\n    mov dl, 0 ; \u7b2c0\u884c\uff0c\u524d\u9762\u6307\u5b9a\u7684dh\u4e0d\u53d8\uff0c\u6240\u4ee5\u7ed9\u5b9a\u7b2c\u51e0\u6761\u6d88\u606f\u5c31\u6253\u5370\u5230\u7b2c\u51e0\u884c\n    int 10h ; \u663e\u793a\u5b57\u7b26\n    ret\n</code></pre></p> <p>\u6216\u8bb8\u6709\u4eba\u770b\u4e0d\u61c2\u8fd9\u4e2a <code>DispStr</code> \u6700\u5f00\u5934\u7684\u4e09\u884c\u4ee3\u7801\u5728\u5e72\u4ec0\u4e48\uff0c\u628a\u5b83\u548c\u90a3\u4e00\u5806\u53d8\u91cf\u8f6c\u5199\u6210 C \u4f1a\u66f4\u597d\u7406\u89e3\u4e00\u70b9\uff1a</p> <p>\u4ee3\u7801 3-5 \u7684\u8f6c\u5199 <pre><code>#define MessageLength 9\nchar BootMessage[MessageLength][3] = {\n    \"Booting  \",\n    \"Ready.   \",\n    \"No LOADER\"\n};\n\nvoid DispStr()\n{\n    bp = BootMessage[dh];\n    // ...\u4e0b\u7565\n}\n</code></pre></p> <p>\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0a\u9762\u7684\u4e09\u4e2a <code>Message</code> \u5728\u5185\u5b58\u4e2d\u7684\u6392\u5e03\u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u800c <code>mov ax, MessageLength</code> \u548c <code>mul dh</code> \u7684\u64cd\u4f5c\u76f8\u5f53\u4e8e\u5728\u627e\u5b83\u7684\u7b2c <code>dh</code> \u884c\u3002</p> <p>\u4e3a\u4ec0\u4e48\u7528 <code>dh</code> \u5f53\u53c2\u6570\u5462\uff1f\u91cd\u65b0\u7ffb\u9605\u7b2c\u4e00\u8282\u53ef\u4ee5\u77e5\u9053\uff0c\u8fd9\u6837\u8fd8\u987a\u4fbf\u6307\u5b9a\u4e86\u884c\u6570\uff0c\u786e\u5b9e\u662f\u4e00\u6761\u5999\u8ba1\u3002</p> <p>\u4e00\u5207\u51c6\u5907\u5de5\u4f5c\u5747\u5df2\u529e\u59a5\uff0c\u4e0b\u9762\u6211\u4eec\u5f00\u59cb\u4e3b\u5faa\u73af\u5427\u2026\u2026\u4e14\u6162\uff0c\u6211\u4eec\u8fd8\u6709\u4e00\u70b9\u70b9\u9884\u5907\u77e5\u8bc6\u8981\u8865\u5145\uff0c\u4e0b\u9762\u662f <code>int 13h</code> \u7684\u53e6\u4e00\u79cd\u7528\u9014\u3002</p> <p>\u5411\u4e0b\u5217\u5bc4\u5b58\u5668\u4e2d\u4f9d\u6b21\u5b58\u5165\uff1a</p> <p>AH=00h\uff1a\u590d\u4f4d\u78c1\u76d8\u9a71\u52a8\u5668</p> <p>DL=\u9a71\u52a8\u5668\u53f7</p> <p>\u7136\u540e\u6267\u884c <code>int 13h</code>\u3002</p> <p>\u8fd4\u56de\u503c\uff1a</p> <p>FLAGS.CF=0\uff1a\u64cd\u4f5c\u6210\u529f</p> <p>FLAGS.CF=1\uff1a\u64cd\u4f5c\u5931\u8d25\uff0cAH=\u9519\u8bef\u4ee3\u7801</p> <p>\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u5047\u5b9a <code>FLAGS.CF</code> \u4e3a0\uff0c\u4e0d\u505a\u4efb\u4f55\u5224\u65ad\u4e86\u3002\u4e0b\u9762\u4fbf\u662f\u4e3b\u4f53\u4ee3\u7801\uff1a</p> <p>\u4ee3\u7801 3-6 \u67e5\u627e <code>Loader</code> \u7684\u4ee3\u7801\u4e3b\u4f53\uff08boot.asm\uff09 <pre><code>LABEL_START:\n    mov ax, cs\n    mov ds, ax\n    mov es, ax ; \u5c06ds es\u8bbe\u7f6e\u4e3acs\u7684\u503c\uff08\u56e0\u4e3a\u6b64\u65f6\u5b57\u7b26\u4e32\u548c\u53d8\u91cf\u7b49\u5b58\u5728\u4ee3\u7801\u6bb5\u5185\uff09\n    mov ss, ax ; \u5c06\u5806\u6808\u6bb5\u4e5f\u521d\u59cb\u5316\u81f3cs\n    mov sp, BaseOfStack ; \u8bbe\u7f6e\u6808\u9876\n\n    xor ah, ah ; \u590d\u4f4d\n    xor dl, dl\n    int 13h ; \u6267\u884c\u8f6f\u9a71\u590d\u4f4d\n\n    mov word [wSectorNo], SectorNoOfRootDirectory ; \u5f00\u59cb\u67e5\u627e\uff0c\u5c06\u5f53\u524d\u8bfb\u5230\u7684\u6247\u533a\u6570\u8bb0\u4e3a\u6839\u76ee\u5f55\u533a\u7684\u5f00\u59cb\u6247\u533a\uff0819\uff09\nLABEL_SEARCH_IN_ROOT_DIR_BEGIN:\n    cmp word [wRootDirSizeForLoop], 0 ; \u5c06\u5269\u4f59\u7684\u6839\u76ee\u5f55\u533a\u6247\u533a\u6570\u4e0e0\u6bd4\u8f83\n    jz LABEL_NO_LOADERBIN ; \u76f8\u7b49\uff0c\u4e0d\u5b58\u5728Loader\uff0c\u8fdb\u884c\u5584\u540e\n    dec word [wRootDirSizeForLoop] ; \u51cf\u53bb\u4e00\u4e2a\u6247\u533a\n    mov ax, BaseOfLoader\n    mov es, ax\n    mov bx, OffsetOfLoader ; \u5c06es:bx\u8bbe\u7f6e\u4e3aBaseOfLoader:OffsetOfLoader\uff0c\u6682\u4e14\u4f7f\u7528Loader\u6240\u5360\u7684\u5185\u5b58\u7a7a\u95f4\u5b58\u653e\u6839\u76ee\u5f55\u533a\n    mov ax, [wSectorNo] ; \u8d77\u59cb\u6247\u533a\uff1a\u5f53\u524d\u8bfb\u5230\u7684\u6247\u533a\u6570\uff08\u5e9f\u8bdd\uff09\n    mov cl, 1 ; \u8bfb\u53d6\u4e00\u4e2a\u6247\u533a\n    call ReadSector ; \u8bfb\u5165\n\n    mov si, LoaderFileName ; \u4e3a\u6bd4\u5bf9\u505a\u51c6\u5907\uff0c\u6b64\u5904\u662f\u5c06ds:si\u8bbe\u4e3aLoader\u6587\u4ef6\u540d\n    mov di, OffsetOfLoader ; \u4e3a\u6bd4\u5bf9\u505a\u51c6\u5907\uff0c\u6b64\u5904\u662f\u5c06es:di\u8bbe\u4e3aLoader\u504f\u79fb\u91cf\uff08\u5373\u6839\u76ee\u5f55\u533a\u4e2d\u7684\u9996\u4e2a\u6587\u4ef6\u5757\uff09\n    cld ; FLAGS.DF=0\uff0c\u5373\u6267\u884clodsb/lodsw/lodsd\u540e\uff0csi\u81ea\u52a8\u589e\u52a0\n    mov dx, 10h ; \u517116\u4e2a\u6587\u4ef6\u5757\uff08\u4ee3\u8868\u4e00\u4e2a\u6247\u533a\uff0c\u56e0\u4e3a\u4e00\u4e2a\u6587\u4ef6\u575732\u5b57\u8282\uff0c16\u4e2a\u6587\u4ef6\u5757\u6b63\u597d\u4e00\u4e2a\u6247\u533a\uff09\nLABEL_SEARCH_FOR_LOADERBIN:\n    cmp dx, 0 ; \u5c06dx\u4e0e0\u6bd4\u8f83\n    jz LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR ; \u7ee7\u7eed\u524d\u8fdb\u4e00\u4e2a\u6247\u533a\n    dec dx ; \u5426\u5219\u5c06dx\u51cf1\n    mov cx, 11 ; \u6587\u4ef6\u540d\u517111\u5b57\u8282\nLABEL_CMP_FILENAME: ; \u6bd4\u5bf9\u6587\u4ef6\u540d\n    cmp cx, 0 ; \u5c06cx\u4e0e0\u6bd4\u8f83\n    jz LABEL_FILENAME_FOUND ; \u82e5\u76f8\u7b49\uff0c\u8bf4\u660e\u6587\u4ef6\u540d\u5b8c\u5168\u4e00\u81f4\uff0c\u8868\u793a\u627e\u5230\uff0c\u8fdb\u884c\u627e\u5230\u540e\u7684\u5904\u7406\n    dec cx ; cx\u51cf1\uff0c\u8868\u793a\u8bfb\u53d61\u4e2a\u5b57\u7b26\n    lodsb ; \u5c06ds:si\u7684\u5185\u5bb9\u7f6e\u5165al\uff0csi\u52a01\n    cmp al, byte [es:di] ; \u6b64\u5b57\u7b26\u4e0eLOADER  BIN\u4e2d\u7684\u5f53\u524d\u5b57\u7b26\u76f8\u7b49\u5417\uff1f\n    jz LABEL_GO_ON ; \u4e0b\u4e00\u4e2a\u6587\u4ef6\u540d\u5b57\u7b26\n    jmp LABEL_DIFFERENT ; \u4e0b\u4e00\u4e2a\u6587\u4ef6\u5757\nLABEL_GO_ON:\n    inc di ; di\u52a01\uff0c\u5373\u4e0b\u4e00\u4e2a\u5b57\u7b26\n    jmp LABEL_CMP_FILENAME ; \u7ee7\u7eed\u6bd4\u8f83\n\nLABEL_DIFFERENT:\n    and di, 0FFE0h ; \u6307\u5411\u8be5\u6587\u4ef6\u5757\u5f00\u5934\n    add di, 20h ; \u8df3\u8fc732\u5b57\u8282\uff0c\u5373\u6307\u5411\u4e0b\u4e00\u4e2a\u6587\u4ef6\u5757\u5f00\u5934\n    mov si, LoaderFileName ; \u91cd\u7f6eds:si\n    jmp LABEL_SEARCH_FOR_LOADERBIN ; \u7531\u4e8e\u8981\u91cd\u65b0\u8bbe\u7f6e\u4e00\u4e9b\u4e1c\u897f\uff0c\u6240\u4ee5\u56de\u5230\u67e5\u627eLoader\u5faa\u73af\u7684\u5f00\u5934\n\nLABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR:\n    add word [wSectorNo], 1 ; \u4e0b\u4e00\u4e2a\u6247\u533a\n    jmp LABEL_SEARCH_IN_ROOT_DIR_BEGIN ; \u91cd\u65b0\u6267\u884c\u4e3b\u5faa\u73af\n\nLABEL_NO_LOADERBIN: ; \u82e5\u627e\u4e0d\u5230loader.bin\u5219\u5230\u8fd9\u91cc\n    mov dh, 2\n    call DispStr; \u663e\u793aNo LOADER\n    jmp $\n\nLABEL_FILENAME_FOUND: ; \u627e\u5230\u4e86\u5219\u5230\u8fd9\u91cc\n    jmp $ ; \u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c\u76f4\u63a5\u6b7b\u5faa\u73af\n</code></pre></p> <p>\u8fd9\u4e00\u6bb5\u4ee3\u7801\u5b9e\u5728\u662f\u592a\u957f\u4e86\uff0c\u6240\u4ee5\u5728\u6ce8\u91ca\u91cc\u505a\u4e86\u89e3\u8bfb\u3002\u5176\u4e2d\u8fd8\u6709\u76f8\u5f53\u591a\u6211\u4eec\u8fd8\u6ca1\u6709\u63d0\u5230\u7684\u4e1c\u897f\uff0c\u6bd4\u5982 <code>lodsb</code>\uff0c\u6bd4\u5982 <code>dec</code>\uff08\u8fd9\u4e2a\u5176\u5b9e\u5c31\u662f <code>--</code>\uff09\uff0c\u4ee5\u53ca <code>jz</code>\u3002\u9274\u4e8e\u5b9e\u5728\u592a\u957f\uff0c\u4e5f\u5c31\u4e0d\u63d0\u4f9b\u8f6c\u5199\u4e86\uff0c\u611f\u5174\u8da3\u7684\u8bfb\u8005\u53ef\u4ee5\u81ea\u884c\u5f53\u4f5c\u4e60\u9898\u6765\u505a\uff08\uff1f\uff09</p> <p>\u540e\u9762\u7684\u4ee3\u7801\u8bb2\u7684\u5c31\u4e0d\u4f1a\u518d\u50cf\u7b2c\u4e00\u8282\u548c\u8fd9\u4e00\u8282\u8fd9\u4e48\u8be6\u7ec6\u4e86\uff0c\u5927\u90e8\u5206\u7684\u89e3\u8bfb\u90fd\u5728\u6ce8\u91ca\uff0c\u6240\u4ee5\u4e00\u5b9a\u8981\u5584\u7528\u54e6\u3002</p> <p>\u5982\u679c\u76f4\u63a5\u6309\u7167\u4e0a\u6587\u7684\u65b9\u6cd5\uff0c\u5148 <code>nasm</code> \u540e <code>dd</code>\uff0c\u4e00\u987f\u64cd\u4f5c\u731b\u5982\u864e\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd0\u884c\u7ed3\u679c\u5e94\u8be5\u662f\u8fd9\u6837\u7684\uff1a</p> <p></p> <p>\uff08\u56fe 3-1 \u76f4\u63a5\u8fd0\u884c\u7684\u6548\u679c\uff09</p> <p>\u7b2c\u4e09\u884c\u5c06\u4f1a\u51fa\u73b0\u4e00\u4e2a <code>No LOADER</code> \u7684\u6807\u8bc6\uff0c\u867d\u7136\u4e0d\u7b26\u5408\u9884\u671f\uff08\u5e94\u8be5\u6ca1\u6709\u4efb\u4f55\u8f93\u51fa\u624d\u5bf9\uff09\uff0c\u4f46\u8fd9\u4e5f\u6b63\u597d\u8bf4\u660e\u4e86\u6211\u4eec\u7684\u4e3b\u5faa\u73af\u5728\u5de5\u4f5c\u3002</p> <p>\u90a3\u4e48\u4e0b\u9762\u6211\u4eec\u7684\u5de5\u4f5c\u5c31\u662f\u628a <code>Loader</code> \u5199\u5165\u78c1\u76d8\u4e86\uff0c\u4e0d\u8fc7\u60a8\u53ef\u80fd\u4f1a\u53d1\u73b0\uff0c\u6211\u4eec\u751a\u81f3\u90fd\u6ca1\u6709\u7f16\u8bd1 <code>Loader</code>\uff0c\u6ca1\u4e8b\uff0c\u9a6c\u4e0a\u7f16\u8bd1\u4e00\u4e0b\uff1a <pre><code>nasm loader.asm -o loader.bin\n</code></pre></p> <p>\u867d\u7136\u5f97\u5230\u4e86 <code>loader.bin</code>\uff0c\u4f46\u6211\u4eec\u7684\u5199\u5165\u5de5\u4f5c\u5728\u6b64\u5904\u5c31\u6709\u4e24\u4e2a\u5206\u652f\u4e86\u3002\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f <code>Linux</code> \u6216 <code>macOS</code>\uff0c\u8bf7\u4f7f\u7528\u4e0b\u5217\u547d\u4ee4\u5c06 <code>loader.bin</code> \u5199\u5165\u78c1\u76d8\uff1a <pre><code>mkdir floppy\nsudo mount -o loop a.img ./floppy/\ncp loader.bin ./floppy/ -v\nsudo umount ./floppy/\nrmdir floppy\n</code></pre></p> <p>\u5728 <code>Windows</code> \u4e0b\u6211\u4eec\u5219\u9700\u8981\u8fd9\u6837\uff1a <pre><code>edimg imgin:a.img copy from:loader.bin to:@: imgout:a.img\n</code></pre></p> <p>\u65e0\u8bba\u7528\u4ec0\u4e48\u65b9\u5f0f\uff0c\u53ea\u8981\u60a8\u6210\u529f\u628a <code>Loader</code> \u5199\u5165\u4e86\u78c1\u76d8\uff0c\u4fbf\u65e0\u5927\u788d\u3002\u603b\u4e4b\uff0c\u5199\u5165\u4e4b\u540e\u7684\u8fd0\u884c\u7ed3\u679c\u662f\u8fd9\u6837\u7684\uff1a</p> <p></p> <p>\uff08\u56fe 3-2 \u5199\u5165\u540e\u518d\u8fd0\u884c\uff0c\u7b2c 3 \u884c\u5df2\u7ecf\u6ca1\u6709\u4e86 <code>No LOADER</code>\uff09</p> <p>\u5982\u679c\u60a8\u7684\u8fd0\u884c\u7ed3\u679c\u4e0e\u4e4b\u76f8\u7b26\uff0c\u90a3\u4e48\u60a8\u5c31\u53ef\u4ee5\u8fdb\u5165\u4e0b\u4e00\u8282\u7684\u5b66\u4e60\uff0c\u6211\u4eec\u5c06\u8981\u52a0\u8f7d\u6211\u4eec\u7684 <code>Loader</code>\uff0c\u5e76\u8df3\u5165\u5176\u4e2d\uff0c\u8fd9\u6837\uff0c\u6211\u4eec\u7684\u53ef\u652f\u914d\u7a7a\u95f4\u5c31\u4ece <code>0.5KB</code> \u6269\u5f20\u5230\u4e86 <code>63KB</code>\uff0c\u8db3\u6709 <code>126</code> \u500d\u7684\u63d0\u5347\u3002<code>64KB</code> \u662f\u4e00\u4e2a\u6bb5\u7684\u5927\u5c0f\uff0c\u6211\u4eec\u7684 <code>Loader</code> \u5c31\u6d3b\u5728\u4e00\u4e2a\u6bb5\u91cc\uff1b\u81f3\u4e8e\u8fd8\u6709 <code>1KB</code> \u5219\u662f\u88ab <code>org 0100h</code> \u7ed9\u5403\u4e86\u3002</p>"},{"location":"os-tutorial/old/04-load-and-jump-into-loader/","title":"04 \u52a0\u8f7d\u5e76\u8df3\u5165 Loader","text":"<p>\u5728\u6267\u884c\u6d41\u5230\u8fbe <code>LABEL_FILENAME_FOUND</code> \u65f6\uff0c\u6b64\u65f6\u7684 <code>di</code> \u5e94\u5f53\u6b63\u597d\u4f4d\u4e8e <code>Loader</code> \u6240\u5728\u7684\u6587\u4ef6\u5757\u4e2d\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u65b9\u6cd5\u83b7\u5f97 <code>Loader</code> \u7684\u8d77\u59cb\u6247\u533a\u3002</p> <p>\u81f3\u4e8e\u600e\u4e48\u83b7\u5f97\uff0c\u8fd9\u5c31\u4e0e\u90a3\u4e2a 32 \u5b57\u8282\u6587\u4ef6\u5757\u7684\u7ed3\u6784\u6709\u5173\u3002</p> <pre><code>typedef struct FILEINFO {\n    uint8_t name[8], ext[3];\n    uint8_t type, reserved[10];\n    uint16_t time, date, clustno;\n    uint32_t size;\n}  __attribute__((packed)) fileinfo_t;\n</code></pre> <p>\u8fd9\u4e2a\u7ed3\u6784\u4f53\u5c31\u662f\u5bf9\u6587\u4ef6\u5757\u7684\u63cf\u8ff0\uff0c\u540e\u9762\u6211\u4eec\u8fd8\u4f1a\u89c1\u5230\u5b83\u7684\u3002\u5176\u4e2d\u7684 <code>clustno</code> \u662f\u5b83\u8d77\u59cb\u7684\u7c07\uff0c\u4e00\u4e2a\u7c07\u5bf9\u5e94\u4e00\u4e2a\u6247\u533a\u3002</p> <p>\u4ece\u7c07\u53f7\u8f6c\u5316\u5230\u6247\u533a\u53f7\u8981\u600e\u4e48\u529e\u5462\uff1f\u8fd9\u5c31\u4e0d\u5f97\u4e0d\u63d0\u5230 FAT12 \u6587\u4ef6\u7cfb\u7edf\u7684\u7ed3\u6784\u4e86\u3002\u4ee5\u4e0b\u53d9\u8ff0\u9ed8\u8ba4\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u3002</p> <p>FAT12 \u6587\u4ef6\u7cfb\u7edf\u5728\u78c1\u76d8\u4e2d\u662f\u8fd9\u6837\u7684\uff1a\u7b2c 0 \u4e2a\u6247\u533a\uff0c\u662f\u5f15\u5bfc\u6247\u533a\uff0c\u63a5\u4e0b\u6765\u662f\u4e24\u5757\u5927\u5c0f\u4e3a 9 \u6247\u533a\u7684 FAT \u8868\uff0c\u518d\u5f80\u4e0b\u662f 14 \u4e2a\u6247\u533a\u7684\u6839\u76ee\u5f55\u533a\uff0c\u5269\u4e0b\u7684\u90e8\u5206\u90fd\u662f\u6570\u636e\u533a\u3002</p> <p>\u6570\u636e\u533a\u7684\u6bcf\u4e00\u4e2a\u6247\u533a\uff0c\u90fd\u53eb\u505a\u4e00\u4e2a\u7c07\u3002\u6570\u636e\u533a\u7684\u7b2c 0 \u4e2a\u6247\u533a\uff0c\u662f\u7b2c 2 \u4e2a\u7c07\u3002\u8fd9\u4e2a\u65f6\u5019\u6216\u8bb8\u6709\u4eba\u8981\u95ee\u4e86\uff1a</p> <p>\u90a3\u4e48\u7b2c 0 \u4e2a\u7c07\u548c\u7b2c 1 \u4e2a\u7c07\u53bb\u54ea\u91cc\u4e86\uff1f</p> <p>\u5b83\u4eec\u88ab FAT \u8868\u7ed9\u66b4\u529b\u5f3a\u5360\u4e86\u3002</p> <p>FAT \u8868\u548c\u6570\u636e\u533a\u4e0d\u662f\u5f7c\u6b64\u72ec\u7acb\u7684\u5417\uff0c\u600e\u4e48\u4f1a\u53d1\u751f\u8fd9\u79cd\u4e8b\u60c5\uff1f</p> <p>\u662f\u8fd9\u6837\u7684\uff0c\u6211\u6765\u89e3\u91ca\u4e00\u4e0b\u3002FAT \u8868\u7684\u6bcf\u4e00\u9879\uff0c\u90fd\u548c\u6570\u636e\u533a\u7684\u7c07\u606f\u606f\u76f8\u5173\uff0c\u5177\u4f53\u800c\u8a00\uff0cFAT \u8868\u6bcf\u4e00\u9879\u7684\u7d22\u5f15\uff0c\u90fd\u4ee3\u8868\u7740\u5b83\u7684\u7d22\u5f15\u5bf9\u5e94\u7684\u7c07\u7684\u4e0b\u4e00\u4e2a\u7c07\u662f\u7b2c\u51e0\u4e2a\uff1b\u5982\u679c\u8fd9\u4e2a\u6570\u5b57 \\ge 0\\text{xFF}8\uff0c\u5219\u8868\u793a\u8fd9\u4e2a\u7c07\u94fe\u5230\u6b64\u4e3a\u6b62\uff0c\u6ca1\u6709\u4e0b\u4e00\u4e2a\u7c07\u3002\u4e00\u822c\u7684\u5b9e\u73b0\u90fd\u628a 0\\text{xFFF} \u4f5c\u4e3a\u7ed3\u675f\u6807\u8bb0\u3002</p> <p>\u7136\u800c\uff0c\u4e0d\u77e5\u9053\u56e0\u4e3a\u4ec0\u4e48\uff0c\u524d\u4e24\u4e2a\u672c\u8be5\u5bf9\u5e94 0 \u53f7\u7c07\u548c 1 \u53f7\u7c07\u7684\u9879\uff0c\u5206\u522b\u5b58\u50a8\u7684\u662f\u574f\u7c07\u6807\u8bb0 FF0 \u548c\u7ed3\u675f\u6807\u8bb0 FFF\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u4f7f\u7528\u7684\u7b2c\u4e00\u4e2a\u7c07\u4e5f\u5c31\u53d8\u6210\u4e86\u7b2c 2 \u4e2a\u3002\u8fd9\u4e24\u4e2a\u7c07\u4e0d\u80fd\u4f7f\u7528\uff0c\u53c8\u4e0d\u80fd\u771f\u7a7a\u51fa\u4e24\u4e2a\u6247\u533a\u6765\u5565\u4e5f\u4e0d\u5e72\uff0c\u6240\u4ee5\u5e72\u8106\u628a\u6570\u636e\u533a\u7684\u7b2c 0 \u4e2a\u6247\u533a\uff08\u4e5f\u5c31\u662f\u7b2c 33 \u6247\u533a\uff09\u5f53\u6210\u7b2c 2 \u53f7\u7c07\u3002</p> <p>\u65e2\u7136\u8fd9\u5806\u7c07\u6392\u6210\u4e86\u4e00\u4e2a\u94fe\u8868\uff0c\u81ea\u7136\u9700\u8981\u77e5\u9053\u7b2c\u4e00\u4e2a\u7c07\u5728\u4ec0\u4e48\u5730\u65b9\uff0c\u800c\u8fd9\u4e2a\u503c\u5c31\u4fdd\u5b58\u5728\u6587\u4ef6\u4fe1\u606f\u5757 <code>fileinfo_t</code> \u7684 <code>clustno</code> \u6210\u5458\u4e2d\uff0c\u504f\u79fb\u91cf\u4e3a 26\u3002</p> <p>\u83b7\u5f97\u7b2c\u4e00\u4e2a\u7c07\u4ee5\u540e\u4e4b\u540e\u6211\u4eec\u4fbf\u53ef\u4ee5\u505a\u51e0\u4ef6\u4e8b\uff1a\u8bfb\u53d6\u7b2c\u4e00\u4e2a\u6247\u533a\uff0c\u67e5\u627e <code>FAT</code>\uff0c\u8bfb\u5165\u4e0b\u4e00\u4e2a\u6247\u533a\uff0c\u76f4\u81f3\u6240\u6709\u6247\u533a\u90fd\u88ab\u8bfb\u5b8c\u3002</p> <p>\u4e0d\u96be\u53d1\u73b0\u6211\u4eec\u9700\u8981\u591a\u6b21\u67e5\u627e <code>FAT</code>\uff0c\u6240\u4ee5\u6211\u4eec\u5e72\u8106\u628a\u67e5\u627e <code>FAT</code> \u7684\u8fc7\u7a0b\u4e5f\u5305\u88c5\u4e00\u4e0b\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 <code>ax</code> \u5b58\u50a8\u5f85\u67e5\u8be2\u7684\u7c07\u53f7\uff0c\u67e5\u8be2\u7ed3\u679c\u4e5f\u653e\u5165 <code>ax</code> \u4e2d\u3002</p> <p>\u8bf7\u628a\u4e0b\u9762\u7684\u4ee3\u7801\u653e\u5230 <code>ReadSector</code> \u4e4b\u540e\uff1a</p> <p>\u4ee3\u7801 4-1 \u8bfb\u53d6 <code>FAT</code> \u9879\u7684\u51fd\u6570\uff08boot.asm\uff09 <pre><code>GetFATEntry:\n    push es\n    push bx\n    push ax ; \u90fd\u4f1a\u7528\u5230\uff0cpush\u4e00\u4e0b\n    mov ax, BaseOfLoader ; \u83b7\u53d6Loader\u7684\u57fa\u5740\n    sub ax, 0100h ; \u7559\u51fa4KB\u7a7a\u95f4\n    mov es, ax ; \u6b64\u5904\u5c31\u662f\u7f13\u51b2\u533a\u7684\u57fa\u5740\n    pop ax ; ax\u6211\u4eec\u5c31\u7528\u4e0d\u5230\u4e86\n    mov byte [bOdd], 0 ; \u8bbe\u7f6ebOdd\u7684\u521d\u503c\n    mov bx, 3\n    mul bx ; dx:ax=ax * 3\uff08mul\u7684\u7b2c\u4e8c\u91cd\u7528\u6cd5\uff1a\u5982\u6709\u8fdb\u4f4d\uff0c\u9ad8\u4f4d\u5c06\u653e\u5165dx\uff09\n    mov bx, 2\n    div bx ; dx:ax / 2 -&gt; dx\uff1a\u4f59\u6570 ax\uff1a\u5546\n; \u6b64\u5904* 1.5\u7684\u539f\u56e0\u662f\uff0c\u6bcf\u4e2aFAT\u9879\u5b9e\u9645\u5360\u7528\u7684\u662f1.5\u6247\u533a\uff0c\u6240\u4ee5\u8981\u628a\u8868\u9879 * 1.5\n    cmp dx, 0 ; \u6ca1\u6709\u4f59\u6570\n    jz LABEL_EVEN\n    mov byte [bOdd], 1 ; \u90a3\u5c31\u662f\u5947\u6570\u4e86\nLABEL_EVEN:\n    ; \u6b64\u65f6ax\u4e2d\u5e94\u5f53\u5df2\u7ecf\u5b58\u50a8\u4e86\u5f85\u67e5\u627eFAT\u76f8\u5bf9\u4e8eFAT\u8868\u7684\u504f\u79fb\uff0c\u4e0b\u9762\u6211\u4eec\u501f\u6b64\u6765\u67e5\u627e\u5b83\u7684\u6247\u533a\u53f7\n    xor dx, dx ; dx\u7f6e0\n    mov bx, [BPB_BytsPerSec]\n    div bx ; dx:ax / 512 -&gt; ax\uff1a\u5546\uff08\u6247\u533a\u53f7\uff09dx\uff1a\u4f59\u6570\uff08\u6247\u533a\u5185\u504f\u79fb\uff09\n    push dx ; \u6682\u5b58dx\uff0c\u540e\u9762\u8981\u7528\n    mov bx, 0 ; es:bx\uff1a(BaseOfLoader - 4KB):0\n    add ax, SectorNoOfFAT1 ; \u5b9e\u9645\u6247\u533a\u53f7\n    mov cl, 2\n    call ReadSector ; \u76f4\u63a5\u8bfb2\u4e2a\u6247\u533a\uff0c\u907f\u514d\u51fa\u73b0\u8de8\u6247\u533aFAT\u9879\u51fa\u73b0bug\n    pop dx ; \u7531\u4e8eReadSector\u672a\u4fdd\u5b58dx\u7684\u503c\u6240\u4ee5\u8fd9\u91cc\u4fdd\u5b58\u4e00\u4e0b\n    add bx, dx ; \u73b0\u5728\u6247\u533a\u5185\u5bb9\u5728\u5185\u5b58\u4e2d\uff0cbx+=dx\uff0c\u5373\u662f\u771f\u6b63\u7684FAT\u9879\n    mov ax, [es:bx] ; \u8bfb\u53d6\u4e4b\n\n    cmp byte [bOdd], 1\n    jnz LABEL_EVEN_2 ; \u662f\u5076\u6570\uff0c\u5219\u8fdb\u5165LABEL_EVEN_2\n    shr ax, 4 ; \u9ad812\u4f4d\u4e3a\u771f\u6b63\u7684FAT\u9879\nLABEL_EVEN_2:\n    and ax, 0FFFh ; \u53ea\u4fdd\u7559\u4f4e4\u4f4d\n\nLABEL_GET_FAT_ENRY_OK: ; \u80dc\u5229\u6267\u884c\n    pop bx\n    pop es ; \u6062\u590d\u5806\u6808\n    ret\n</code></pre></p> <p>\u8fd9\u4e00\u6bb5\u4ee3\u7801\u6050\u6015\u4e5f\u9700\u8981\u89e3\u91ca\u4e00\u4e0b\u3002FAT12 \u6587\u4ef6\u7cfb\u7edf\u7684 12 \u6765\u6e90\u4e8e\u5b83\u7684 FAT \u9879\u5927\u5c0f\uff0c\u6bcf\u4e00\u4e2a FAT \u9879\u5360 12 \u4f4d\uff1b\u540c\u7406\uff0cFAT16\u3001FAT32 \u7684 FAT \u9879\u5206\u522b\u5360 16\u300132 \u4f4d\u3002\u540e\u4e24\u8005\u7531\u4e8e\u6bd4\u8f83\u6574\uff0c\u6240\u4ee5\u662f\u76f4\u63a5\u5199\u5728\u78c1\u76d8\u91cc\uff1b\u4f46\u662f\u524d\u8005\u662f\u4e00\u4e2a\u5b57\u8282\u534a\uff0c\u76f4\u63a5\u5199\u7684\u8bdd\u6709\u6574\u6574\u56db\u4f4d\u7a7a\u51fa\u6765\u6ca1\u7528\uff0c\u8fd9\u53ef\u4e0d\u597d\u3002</p> <p>\u4e8e\u662f\u7f3a\u5fb7\u5fae\u8f6f\u5c31\u8111\u5b50\u77ed\u8def\u6ca1\u6709\u9009\u62e9\u8df3\u8fc7 FAT12 \u76f4\u63a5\u53d1\u660e FAT16</p> <p>\u4e8e\u662f\u5fae\u8f6f\u5c31\u641e\u51fa\u4e86\u4e00\u5957\u201c\u538b\u7f29\u201d\u65b9\u6cd5\uff08\u8bf4\u662f\u538b\u7f29\uff0c\u6bcf\u4e00\u4e2a FAT \u9879\u8fd8\u662f\u5360\u4e00\u4e2a\u5b57\u8282\u534a\uff0c\u5176\u5b9e\u6ca1\u6709\u4efb\u4f55\u4f18\u5316\uff09\uff0c\u628a\u4e24\u4e2a FAT \u9879\u786c\u6324\u5728\u4e09\u4e2a\u5b57\u8282\u91cc\uff0c\u5177\u4f53\u800c\u8a00\u662f\u957f\u8fd9\u6837\u7684\uff1a</p> FAT \u9879 \u78c1\u76d8\u4e2d\u7684\u8868\u793a <code>FF0 FFF</code> <code>F0 FF FF</code> <code>abc def</code> <code>bc fa de</code> <p>\u8fd9\u6837\u5c31\u641e\u5f97\u5f88\u6076\u5fc3\uff0cFAT12 \u8981\u8003\u8651\u7684\u7ec6\u8282\u6709\u4e00\u534a\u90fd\u6765\u81ea\u8fd9\u4e2a\u7834\u7b97\u6cd5\u3002\u6bd4\u5982\uff0c\u7531\u4e8e\u6bcf\u4e24\u4e2a FAT \u9879\u5360\u4e09\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u6781\u7aef\u60c5\u51b5\u4e0b\u4f1a\u51fa\u73b0\u67d0\u4e2a FAT \u9879\u7684\u4f4e\u516b\u4f4d\u5728\u6247\u533a a\uff0c\u9ad8\u56db\u4f4d\u5728\u6247\u533a a+1\uff0c\u6240\u4ee5\u8bfb\u53d6\u78c1\u76d8\u65f6\uff0c\u4e00\u6b21\u8981\u8bfb\u4e24\u4e2a\u6247\u533a\uff0c\u8bfb\u5230\u4e4b\u540e\u8fd8\u5f97\u8d39\u5c3d\u5fc3\u601d\u8f6c\u6362\u3002</p> <p>\u4e0d\u8fc7\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u4f7f\u7528\u4e86\u975e\u5e38\u5de7\u5999\u7684\u65b9\u6cd5\u8f97\u8f6c\u817e\u632a\uff0c\u6700\u7ec8\u53ea\u7528\u4e86\u4e94\u884c\u4ee3\u7801\u5c31\u5b8c\u6210\u4e86\u8f6c\u6362\uff0c\u6211\u4eec\u5230\u65f6\u5019\u518d\u8bf4\u3002</p> <p>\u8bf4\u7684\u6709\u70b9\u8fdc\uff0c\u6211\u4eec\u4ece\u7b2c\u4e00\u884c\u5f00\u59cb\u770b\u3002\u5f00\u5c40\u5b58\u4e86\u4e09\u4e2a\u5bc4\u5b58\u5668 <code>es</code>\u3001<code>bx</code> \u548c <code>ax</code>\uff0c\u8fd9\u662f\u56e0\u4e3a\u8bfb\u53d6\u78c1\u76d8\u8981\u7528 <code>es</code> \u548c <code>bx</code>\uff0c\u800c\u8bbe\u7f6e\u65b0\u7f13\u51b2\u533a\u8981\u7528 <code>ax</code>\uff0c\u6240\u4ee5\u90fd\u5f97\u5b58\u4e00\u4e0b\u3002</p> <p>\u63a5\u4e0b\u6765\u8fd9\u51e0\u884c\uff0c\u628a Loader \u524d\u9762 4KB\uff080x100 * 16 = 4096 = 4KB\uff09\u7684\u4f4d\u7f6e\u5f53\u505a\u7f13\u51b2\u533a\uff0c\u7136\u540e\u8fd8\u539f <code>ax</code>\u3002\u5176\u5b9e\u9009\u4ec0\u4e48\u5730\u65b9\u5f53\u7f13\u51b2\u533a\u5e76\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u7684\u89c4\u5b9a\uff0c\u57fa\u672c\u4e0a\u662f\u60f3\u653e\u54ea\u653e\u54ea\uff0c\u8fd9\u91cc\u4f7f\u7528 Loader \u7684\u5f00\u5934\u4f5c\u4e3a\u57fa\u51c6\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u3002</p> <p>\u8fd8\u539f <code>ax</code> \u4ee5\u540e\uff0c\u7531\u4e8e\u6bcf\u4e24\u4e2a FAT \u9879\u5360\u4e09\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u5148\u7ed9\u5b83\u4e58 3 \u627e\u5230\u5bf9\u5e94\u7684\u4e24\u4e2a FAT \u9879\u3002\u7531\u4e8e <code>ax</code> \u53ef\u80fd\u8fc7\u5927\uff0c\u518d\u4e58\u4e00\u4e2a <code>bx</code> \u6709\u7206\u6389 16 \u4f4d\u7684\u5371\u9669\uff08\u5176\u5b9e\u7b97\u4e00\u7b97\u5c31\u77e5\u9053\u6839\u672c\u4e0d\u53ef\u80fd\uff09\uff0c\u56e0\u6b64 CPU \u4f1a\u628a\u4e58\u79ef\u7684\u4f4e 16 \u4f4d\u653e\u5728 <code>ax</code>\uff0c\u9ad8 16 \u4f4d\u653e\u5728 <code>dx</code>\u3002\u6ce8\u91ca\u91cc\u4f7f\u7528 <code>dx:ax</code>\uff0c\u7b97\u662f\u4e00\u79cd\u60ef\u7528\u6cd5\uff0c\u8868\u793a\u9ad8 16 \u4f4d\u548c\u4f4e 16 \u4f4d\u662f\u8fd9\u4e24\u4e2a\u5bc4\u5b58\u5668\uff0c\u4e0e <code>es:bx</code> \u8fd9\u79cd\u5bfb\u5740\u610f\u4e49\u4e0d\u540c\uff0c\u9700\u8981\u6ce8\u610f\u4e00\u4e0b\u3002</p> <p>\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u4f60\u73b0\u5728\u627e\u5230\u4e86\u4e24\u4e2a\u4e00\u5171\u5360\u4e09\u5b57\u8282\u7684 FAT \u9879\uff0c\u5b83\u4eec\u53ef\u662f\u7f20\u5728\u4e00\u8d77\u7684\uff0c\u4f60\u600e\u4e48\u77e5\u9053\u4f60\u8981\u627e\u7684\u90a3\u4e2a\u9879\u88ab\u585e\u5728\u4e86\u54ea\u4e24\u4e2a\u5b57\u8282\u91cc\u5462\uff1f</p> <p>\u8fd9\u4e0e intel \u5bf9\u6570\u636e\u7684\u5b58\u50a8\u7b56\u7565\u5bc6\u5207\u76f8\u5173\u3002\u4e8b\u5b9e\u4e0a\uff0c\u90a3\u79cd\u538b\u7f29\u770b\u4f3c\u5f88\u6076\u5fc3\uff0c\u4e5f\u548c\u8fd9\u79cd\u6570\u636e\u5b58\u50a8\u7b56\u7565\u6709\u5343\u4e1d\u4e07\u7f15\u7684\u8054\u7cfb\u3002\u8fd9\u662f\u600e\u4e48\u56de\u4e8b\u5462\uff1f</p> <p>\u6211\u4eec\u80fd\u76f4\u63a5\u4f7f\u7528\u7684\u53d8\u91cf\uff0c\u90fd\u662f\u4ee5\u5b57\u8282\uff08<code>char</code>\uff09\u4e3a\u6700\u5c0f\u5355\u4f4d\u3002\u60f3\u8981\u8bbf\u95ee\u5b83\u7684\u7b2c\u51e0\u4f4d\uff0c\u5c31\u9700\u8981\u7528\u4f4d\u8fd0\u7b97\u6765\u5904\u7406\u3002\u540c\u7406\uff0c\u5185\u5b58\u5904\u7406\u7684\u6700\u5c0f\u5355\u4f4d\u4e5f\u662f\u5b57\u8282\uff0c\u4f4e\u4e8e\u4e00\u4e2a\u5b57\u8282\u7684\u90fd\u8981\u7528\u4f4d\u8fd0\u7b97\u6765\u63d0\u53d6\u3002\u7531\u6b64\u5c31\u5f15\u53d1\u4e86\u4e00\u4e2a\u95ee\u9898\uff1a\u9ad8\u4e8e\u4e00\u4e2a\u5b57\u8282\u7684\u4e1c\u897f\u600e\u4e48\u5728\u5185\u5b58\u91cc\u50a8\u5b58\u5462\uff1f\u6bd4\u5982\u8fd9\u6709\u4e2a\u4e24\u5b57\u8282\u7684\u4e1c\u897f\uff1a<code>0xAA55</code>\uff0c\u5b83\u653e\u5728\u5185\u5b58\u91cc\u957f\u4ec0\u4e48\u6837\u5462\uff1f</p> <p>\u5bf9\u6b64\uff0c\u4e0d\u540c\u7684 CPU \u6709\u4e0d\u540c\u7684\u65b9\u6cd5\uff0c\u5176\u4e2d\u6700\u6d41\u884c\u7684\uff0c\u662f\u5c0f\u7aef\uff08intel \u91c7\u7528\u8fd9\u79cd\u6a21\u5f0f\uff09\u548c\u5927\u7aef\u3002\u8fd8\u6709\u4e00\u4e9b\u66f4\u4e3a\u590d\u6742\u7684\uff0c\u4ec0\u4e48\u7f51\u7edc\u5e8f\u4e4b\u7c7b\u7684\uff0c\u5728\u6b64\u4e0d\u63d0\u3002\u628a\u6570\u6309\u4ece\u9ad8\u5b57\u8282\u5230\u4f4e\u5b57\u8282\u7684\u987a\u5e8f\u6392\u5217\uff0c\u4e00\u822c\u7684\u5341\u516d\u8fdb\u5236\u6570\u90fd\u662f\u5929\u7136\u6309\u8fd9\u79cd\u65b9\u6cd5\u6392\u5217\u7684\uff0c\u6bd4\u5982\uff1a0x12345678\uff0c\u5b83\u7684\u9ad8\u5b57\u8282\u5c31\u662f <code>0x12</code>\uff0c\u4f4e\u5b57\u8282\u5c31\u662f <code>0x78</code>\uff1b\u5982\u679c\u6309\u5b57\u8282\u4ece\u9ad8\u5230\u4f4e\u7684\u987a\u5e8f\u987a\u6b21\u5199\u5165\u5185\u5b58\uff0c\u5c31\u53eb\u5927\u7aef\uff0c\u53cd\u4e4b\u5c31\u662f\u5c0f\u7aef\u3002</p> <p>\u6bd4\u5982\u6211\u8981\u628a 0x12345678 \u5b58\u50a8\u5230 0x100 \u5f00\u5934\u7684\u56db\u4e2a\u5b57\u8282\u3002\u5148\u628a\u6570\u6309\u7167\u4ece\u9ad8\u5230\u4f4e\u5b57\u8282\u987a\u5e8f\u6392\u5217\uff1a0x12\u30010x34\u30010x56\u30010x78\u3002\u5927\u7aef\u6309\u5b57\u8282\u4ece\u9ad8\u5230\u4f4e\u987a\u5e8f\u5199\u5165\u5185\u5b58\uff0c\u4e5f\u5c31\u662f 0x100 \u5904\u5b58 0x12\uff0c0x101 \u5904\u5b58 0x34\uff0c0x102 \u5904\u5b58 0x56\uff0c0x103 \u5904\u5b58 0x78\u3002\u5c0f\u7aef\u5219\u53cd\u8fc7\u6765\uff0c0x100 \u5904\u5b58 0x78\uff0c0x101 \u5904\u5b58 0x56\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002</p> <p>\u8fd9\u4e24\u79cd\u6392\u5217\u65b9\u5f0f\u5b70\u4f18\u5b70\u52a3\uff0c\u6211\u4eec\u8fd8\u771f\u4e0d\u597d\u5224\u65ad\u3002\u4e0d\u8fc7\uff0c\u7528\u8fd9\u79cd\u89c6\u89d2\u91cd\u65b0\u56de\u770b\u4e0a\u9762\u63d0\u5230\u7684 FAT \u7684\u201c\u538b\u7f29\u201d\uff0c\u6216\u8bb8\u4f60\u77ac\u95f4\u5c31\u80fd\u53d1\u73b0\u5176\u4e0d\u5bf9\u52b2\u4e4b\u5904\uff1a\u6309\u7167\u5c0f\u7aef\u6765\u89e3\u91ca\uff0c<code>bc fa de</code> \u4e0d\u4ec5\u4e0d\u62bd\u8c61\uff0c\u53cd\u800c\u521a\u597d\u662f <code>defabc</code> \u7684\u8868\u793a\uff01\u4e5f\u5c31\u662f\u8bf4\uff0c\u5fae\u8f6f\u7684\u8fd9\u79cd\u7f16\u7801\u53cd\u800c\u5f88\u81ea\u7136\uff0cFAT \u8868\u53d8\u6210\u4e86\u4e00\u4e2a\u9879\u6b63\u597d 1.5 \u5b57\u8282\u7684\u6570\u7ec4\u3002</p> <p>\u8fd9\u6837\u4e00\u6765\uff0c\u6211\u8981\u627e\u7b2c k \u4e2a FAT \u9879\uff0c\u53ea\u9700\u7ed9 k \u4e58 1.5 \u5373\u53ef\uff0c\u8fd9\u4e00\u8fc7\u7a0b\u53c8\u8981\u88ab\u62c6\u6210\u4e58 3 \u518d\u9664\u4ee5 2\u3002\u5982\u679c\u60f3\u8981\u627e\u5947\u6570\u9879\uff0c\u548c\u627e\u5076\u6570\u9879\u5b9e\u73b0\u4e0a\u7565\u6709\u5dee\u522b\uff0c\u56e0\u6b64\u7528\u4e86 <code>cmp dx, 0</code> \u7684\u5224\u65ad\uff08\u603b\u7b97\u8bf4\u56de\u5230\u4ee3\u7801\u4e86\uff09\u3002\u987a\u4fbf\u4e00\u63d0\uff0c<code>div</code> \u6307\u4ee4\u5982\u679c\u53d1\u73b0\u4f60\u5728\u8bd5\u56fe\u9664\u4ee5\u4e00\u4e2a 16 \u4f4d\u6570\uff0c\u5c06\u4f1a\u628a <code>dx:ax</code> \u5f53\u4f5c\u88ab\u9664\u6570\uff0c\u5546\u4ecd\u653e\u5728 <code>ax</code>\uff0c\u4f59\u6570\u653e\u5728 <code>dx</code>\u3002</p> <p>\u8fd9\u4e00\u4e0b\u53ef\u626f\u5f97\u592a\u592a\u592a\u592a\u592a\u8fdc\u4e86\uff0c\u6211\u4eec\u8bf4\u56de\u6765\u3002\u5728\u5224\u65ad\u5947\u5076\u7684\u65f6\u5019\uff0c\u4f7f\u7528\u4e86\u4e00\u4e2a <code>bOdd</code> \u53d8\u91cf\uff0c\u5b83\u662f\u5728\u4e0a\u4e00\u8282\u88ab\u5b9a\u4e49\u7684\u3002\u6700\u7ec8\uff0c\u6267\u884c\u6d41\u90fd\u4f1a\u8fdb\u5165 <code>LABEL_EVEN</code>\u3002</p> <p><code>LABEL_EVEN</code> \u4e00\u4e0a\u6765\u628a <code>dx</code> \u6e05\u96f6\uff0c\u8fd9\u662f\u4e3a\u4e86\u907f\u514d\u5df2\u7ecf\u6ca1\u6709\u7528\u7684\u4f59\u6570\u5f71\u54cd\u63a5\u4e0b\u6765\u7684\u9664\u6cd5\u3002\u7136\u540e\uff0c\u628a\u6b64\u65f6\u7684 <code>ax</code> \u518d\u9664\u4ee5 512\uff0c\u548c\u521a\u624d\u4e00\u6837\uff0c\u5546\u653e\u5728 <code>ax</code> \u4e2d\u8868\u793a\u8ddd\u79bb FAT \u5f00\u5934\u591a\u5c11\u4e2a\u6247\u533a\uff0c\u4f59\u6570\u653e\u5728 <code>dx</code> \u4e2d\u8868\u793a\u8ddd\u79bb\u6247\u533a\u5f00\u5934\u7684\u504f\u79fb\u3002\u63a5\u4e0b\u6765\u8981\u8bfb\u53d6\u78c1\u76d8\uff0c\u7531\u4e8e <code>dx</code> \u88ab\u6539\u53d8\uff0c\u9700\u8981\u6682\u5b58\u4e00\u4e0b\u3002\u63a5\u4e0b\u6765\u628a <code>ax</code> \u52a0\u4e0a\u7b2c\u4e00\u4e2a FAT \u8d77\u59cb\u4f4d\u7f6e\u7684\u6247\u533a\u53f7\uff0c\u5f97\u5230\u5b83\u5728\u78c1\u76d8\u4e2d\u7684\u771f\u6b63\u4f4d\u7f6e\uff0c\u628a <code>cl</code> \u8bbe\u6210 2 \u8868\u793a\u8981\u8bfb\u4e24\u4e2a\u6247\u533a\u3002\u4ece\u4e0a\u9762\u7684\u8bf4\u660e\u4e2d\u53ef\u4ee5\u77e5\u9053\u8fd9\u662f\u4e3a\u4ec0\u4e48\uff0c\u5982\u679c\u8fd9\u4e48\u5feb\u5c31\u5fd8\u4e86\u7f5a\u4f60\u4ece\u5934\u518d\u770b\u4e00\u904d\u3002</p> <p>\u8bfb\u5b8c\u4e24\u4e2a\u6247\u533a\u4ee5\u540e\u628a <code>dx</code> \u5f39\u51fa\u6765\uff0c\u7136\u540e\u52a0\u5230 <code>bx</code> \u4e0a\uff0c\u6b64\u65f6\u7684 <code>bx</code> \u548c\u539f\u672c\u4e00\u6837\uff0c\u5e94\u8be5\u662f 0\uff0c\u6240\u4ee5\u6b64\u65f6 <code>add bx, dx</code> \u5c31\u76f8\u5f53\u4e8e <code>mov bx, dx</code>\u3002\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8981\u632a\u5230 <code>bx</code> \u4e0a\uff0c\u662f\u56e0\u4e3a <code>bx</code> \u53ef\u4ee5\u7528\u6765\u8bbf\u95ee\u5185\u5b58\u800c <code>dx</code> \u4e0d\u53ef\u4ee5\u3002\u63a5\u7740\uff0c\u4ece <code>es:bx</code>\uff0c\u4e5f\u5c31\u662f\u8bfb\u5230\u7684\u6570\u636e\u91cc\u62ff\u5230\u4e24\u4e2a\u5b57\u8282\u7684 FAT \u9879\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5176\u4e2d\u7684 1.5 \u5b57\u8282\uff0c\u6240\u4ee5\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u5c0f\u5c0f\u7684\u5904\u7406\u3002</p> <p>\u63a5\u4e0b\u6765\u7684\u4e94\u884c\uff0c\u582a\u79f0\u662f\u8fd9\u4e00\u6574\u6bb5\u7a0b\u5e8f\u6700\u5de7\u5999\u7684\u4e94\u884c\uff0c\u5145\u5206\u5229\u7528\u4e86 intel \u662f\u5c0f\u7aef\u7684\u7279\u6027\u3002</p> <p>\u6211\u4eec\u6765\u624b\u52a8\u6a21\u62df\u4e00\u4e0b\u3002\u6211\u60f3\u8981\u53d6\u7b2c 2k+1 \u4e2a FAT \u9879\uff0c\u5219\u8981\u628a\u5b83\u4e58 1.5\uff0c\u53d8\u6210\u7b2c 3k + 1 \u5b57\u8282\uff08\u5c0f\u6570\u90e8\u5206\u5df2\u820d\u53bb\uff09\u5f00\u5934\u7684\u4e24\u4e2a\u5b57\u8282\u3002\u540c\u7406\uff0c\u82e5\u8981\u8bfb\u53d6\u7b2c 2k \u4e2a FAT \u9879\uff0c\u5219\u6700\u7ec8\u4f1a\u641e\u5230\u7b2c 3k \u4e2a\u5b57\u8282\u5f00\u5934\u7684\u4e24\u4e2a\u5b57\u8282\u3002<code>abc</code> \u653e\u5728\u4f4e\u4f4d\uff0c\u662f\u7b2c 2k \u4e2a\u9879\uff0c\u5bf9\u5e94\u7b2c 3k \u4e2a\u5b57\u8282\u5f00\u5934\uff1b<code>def</code> \u653e\u5728\u9ad8\u4f4d\uff0c\u662f\u7b2c 2k + 1 \u4e2a\u9879\uff0c\u5bf9\u5e94\u7b2c 3k + 1 \u4e2a\u5b57\u8282\u5f00\u5934\u3002\u6211\u4eec\u6765\u8bfb\u4e24\u4e2a\u5b57\u8282\u770b\u770b\uff0c<code>abc</code> \u53d8\u6210\u4e86 <code>fabc</code>\uff0c<code>def</code> \u53d8\u6210\u4e86 <code>defc</code>\u3002\u90a3\u4e48\uff0c\u5bf9\u4e8e\u5947\u6570\u9879\u800c\u8a00\uff0c\u9996\u5148\u8981\u53f3\u79fb\u56db\u4f4d\uff1b\u4e4b\u540e\u662f\u5947\u5076\u9879\u7edf\u4e00\u7684\u64cd\u4f5c\uff0c\u53d6\u4f4e 12 \u4f4d\uff0c\u8fd9\u6837\u5c31\u641e\u5230\u4e86\u6211\u4eec\u60f3\u8981\u7684 FAT \u9879\u3002</p> <p>\u4ee3\u7801\u91cc\u7684\u4e94\u884c\uff0c\u4e5f\u6b63\u662f\u8fd9\u4e2a\u903b\u8f91\u3002\u5148\u5224\u65ad\u662f\u4e0d\u662f\u5947\u6570\uff0c\u662f\u5947\u6570\u5c31\u53f3\u79fb\u56db\u4f4d\uff0c\u968f\u540e\u7edf\u4e00\u53d6\u4f4e 12 \u4f4d\u3002</p> <p>\u6700\u540e\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u6309\u7167 C \u8c03\u7528\u7ea6\u5b9a\u9ed8\u8ba4 <code>ax</code> \u662f\u8fd4\u56de\u503c\uff0c\u8fd9\u91cc\u867d\u7136\u5199\u7684\u662f\u6c47\u7f16\u65e0\u6240\u8c13\uff0c\u4f46\u662f <code>ax</code> \u662f\u53c2\u6570\uff0c\u8003\u8651\u5230\u9891\u7e41\u8c03\u7528\uff0c\u628a <code>ax</code> \u5f53\u8fd4\u56de\u503c\u81ea\u6709\u5176\u65b9\u4fbf\u4e4b\u5904\u5728\u3002</p> <p>\u8fd9\u6837\u4e00\u6765\uff0c\u603b\u7b97\u5c31\u628a\u4e0a\u9762\u90a3\u4e2a\u9b3c\u51fd\u6570\u8bb2\u5b8c\u4e86\u3002</p> <p>\u4ece\u4ee3\u7801\u4e2d\u4e5f\u80fd\u770b\u5230\uff0c\u6211\u4eec\u7684\u5e38\u91cf\u559c\u52a0\u4e00\uff0c\u628a\u4e0b\u9762\u7684\u4ee3\u7801\u653e\u5230 <code>SectorNoOfRootDirectory</code> \u540e\u9762\uff1a</p> <p>\u4ee3\u7801 4-2 \u65b0\u5e38\u91cf\u7684\u5b9a\u4e49\uff08boot.asm\uff09 <pre><code>SectorNoOfFAT1          equ 1 ; \u7b2c\u4e00\u4e2aFAT\u8868\u7684\u5f00\u59cb\u6247\u533a\nDeltaSectorNo           equ 17 ; \u7531\u4e8e\u524d\u4e24\u4e2a\u7c07\u4e0d\u7528\uff0c\u6240\u4ee5SectorNoOfRootDirectory\u8981-2\u518d\u52a0\u4e0a\u6839\u76ee\u5f55\u533a\u5927\u5c0f\u548c\u7c07\u53f7\u624d\u80fd\u5f97\u5230\u771f\u6b63\u7684\u6247\u533a\u53f7\uff0c\u6545\u628aSectorNoOfRootDirectory-2\u5c01\u88c5\u6210\u4e00\u4e2a\u5e38\u91cf\uff0817\uff09\n</code></pre></p> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u9664\u4e86\u4e0a\u6587\u5df2\u7ecf\u51fa\u73b0\u7684\u5e38\u91cf\u4ee5\u5916\uff0c\u8fd8\u5b9a\u4e49\u4e86\u4e00\u4e2a <code>DeltaSectorNo</code>\uff0c\u5176\u4f5c\u7528\u5df2\u7ecf\u5728\u6ce8\u91ca\u4e2d\u9610\u660e\u3002</p> <p>\u73b0\u5728\u662f\u65f6\u5019\u52a0\u8f7d\u5e76\u8df3\u5165 <code>Loader</code> \u4e86\uff1a</p> <p>\u4ee3\u7801 4-3 \u52a0\u8f7d\u5e76\u8df3\u5165 <code>Loader</code>\uff08boot.asm\uff09 <pre><code>LABEL_FILENAME_FOUND:\n    mov ax, RootDirSectors ; \u5c06ax\u7f6e\u4e3a\u6839\u76ee\u5f55\u9996\u6247\u533a\uff0819\uff09\n    and di, 0FFE0h ; \u5c06di\u8bbe\u7f6e\u5230\u6b64\u6587\u4ef6\u5757\u5f00\u5934\n    add di, 01Ah ; \u6b64\u65f6\u7684di\u6307\u5411Loader\u7684FAT\u53f7\n    mov cx, word [es:di] ; \u83b7\u5f97\u8be5\u6247\u533a\u7684FAT\u53f7\n    push cx ; \u5c06FAT\u53f7\u6682\u5b58\n    add cx, ax ; +\u6839\u76ee\u5f55\u9996\u6247\u533a\n    add cx, DeltaSectorNo ; \u83b7\u5f97\u771f\u6b63\u7684\u5730\u5740\n    mov ax, BaseOfLoader\n    mov es, ax\n    mov bx, OffsetOfLoader ; es:bx\uff1a\u8bfb\u53d6\u6247\u533a\u7684\u7f13\u51b2\u533a\u5730\u5740\n    mov ax, cx ; ax\uff1a\u8d77\u59cb\u6247\u533a\u53f7\n\nLABEL_GOON_LOADING_FILE: ; \u52a0\u8f7d\u6587\u4ef6\n    push ax\n    push bx\n    mov ah, 0Eh ; AH=0Eh\uff1a\u663e\u793a\u5355\u4e2a\u5b57\u7b26\n    mov al, '.' ; AL\uff1a\u5b57\u7b26\u5185\u5bb9\n    mov bl, 0Fh ; BL\uff1a\u663e\u793a\u5c5e\u6027\n; \u8fd8\u6709BH\uff1a\u9875\u7801\uff0c\u6b64\u5904\u4e0d\u7ba1\n    int 10h ; \u663e\u793a\u6b64\u5b57\u7b26\n    pop bx\n    pop ax ; \u4e0a\u9762\u51e0\u884c\u7684\u6574\u4f53\u4f5c\u7528\uff1a\u5728\u5c4f\u5e55\u4e0a\u6253\u5370\u4e00\u4e2a\u70b9\n\n    mov cl, 1\n    call ReadSector ; \u8bfb\u53d6Loader\u7b2c\u4e00\u4e2a\u6247\u533a\n    pop ax ; \u52a0\u8f7dFAT\u53f7\n    call GetFATEntry ; \u52a0\u8f7dFAT\u9879\n    cmp ax, 0FFFh\n    jz LABEL_FILE_LOADED ; \u82e5\u6b64\u9879=0FFF\uff0c\u4ee3\u8868\u6587\u4ef6\u7ed3\u675f\uff0c\u76f4\u63a5\u8df3\u5165Loader\n    push ax ; \u91cd\u65b0\u5b58\u50a8FAT\u53f7\uff0c\u4f46\u6b64\u65f6\u7684FAT\u53f7\u5df2\u7ecf\u662f\u4e0b\u4e00\u4e2aFAT\u4e86\n    mov dx, RootDirSectors\n    add ax, dx ; +\u6839\u76ee\u5f55\u9996\u6247\u533a\n    add ax, DeltaSectorNo ; \u83b7\u53d6\u771f\u5b9e\u5730\u5740\n    add bx, [BPB_BytsPerSec] ; \u5c06bx\u6307\u5411\u4e0b\u4e00\u4e2a\u6247\u533a\u5f00\u5934\n    jmp LABEL_GOON_LOADING_FILE ; \u52a0\u8f7d\u4e0b\u4e00\u4e2a\u6247\u533a\n\nLABEL_FILE_LOADED:\n    jmp BaseOfLoader:OffsetOfLoader ; \u8df3\u5165Loader\uff01\n</code></pre></p> <p>\u8fd9\u91cc\u7684\u903b\u8f91\u5c31\u6bd4\u8f83\u7b80\u5355\u4e86\u3002\u9996\u5148\u8ba9 <code>di</code> \u6307\u5411\u9996\u7c07\u53f7\uff0c\u7136\u540e\u8ba9 <code>cx</code> \u8bfb\u53d6\u4e4b\u3002\u7136\u540e\u7ed9 <code>cx</code> \u52a0\u4e0a\u4e00\u4e2a <code>DeltaSectorNo</code>\uff0c\u518d\u52a0 <code>SectorNoOfRootDirectory</code>\uff0c\u628a\u7c07\u53f7\u8f6c\u6362\u6210\u6247\u533a\u53f7\uff0c\u518d\u7136\u540e\u5c31\u662f\u8bbe\u7f6e <code>es</code> \u548c <code>bx</code>\uff0c\u5e76\u6309\u7167 <code>ReadSector</code> \u7684\u8981\u6c42\uff0c\u628a\u6247\u533a\u53f7\u5012\u817e\u5230 <code>ax</code>\u3002\u6bcf\u52a0\u8f7d\u4e00\u4e2a\u6247\u533a\u5c31\u8f93\u51fa\u4e00\u4e2a <code>.</code>\uff0c\u53ef\u4ee5\u770b\u4f5c\u4e00\u79cd\u63d0\u793a\u548c\u88c5\u9970\uff0c\u7531\u4e8e\u6539\u53d8\u4e86 <code>ax</code> \u548c <code>bx</code> \u6240\u4ee5\u7528\u6808\u6682\u5b58\u3002</p> <p>\u63a5\u4e0b\u6765\u5148\u8bfb\u53d6\u6247\u533a\uff0c\u7136\u540e\u4ece\u6808\u91cc\u5f39\u51fa\u4e4b\u524d\u5b58\u7684\u9996\u7c07\u53f7\uff0c\u7528\u5b83\u6765\u67e5\u627e FAT \u9879\u3002\u5982\u679c\u662f <code>0xfff</code>\uff0c\u5219\u8bf4\u660e\u6587\u4ef6\u7ed3\u675f\uff0c\u8fdb\u5165 <code>LABEL_FILE_LOADED</code> \u6587\u4ef6\u52a0\u8f7d\u6210\u529f\u7684\u5206\u652f\uff1b\u5426\u5219\uff0c\u5b58\u50a8\u73b0\u5728\u7684 FAT \u9879\uff08\u5f85\u4f1a\u63a5\u7740\u67e5\uff09\uff0c\u8fd9\u4e2a FAT \u9879\u540c\u65f6\u4e5f\u662f\u5f53\u524d\u7c07\uff0c\u6240\u4ee5\u628a\u5b83\u4e5f\u8f6c\u6362\u6210\u6247\u533a\u53f7\uff0c\u51c6\u5907\u8fdb\u884c\u4e0b\u4e00\u8f6e\u8bfb\u53d6\uff1b<code>bx</code> \u4e5f\u5411\u540e\u79fb\u52a8\u4e00\u4e2a\u6247\u533a\uff0c\u7136\u540e\u5f00\u59cb\u8bfb\u53d6\u4e0b\u4e00\u4e2a\u6247\u533a\u7684\u5185\u5bb9\u3002</p> <p>\u52a0\u8f7d\u6210\u529f\u4ee5\u540e\uff0c\u81ea\u7136\u662f\u76f4\u63a5 <code>jmp</code> \u8fdb\u53bb\u3002\u8fd9\u91cc\u7528\u7684 <code>jmp xxx:xxx</code>\uff0c\u540c\u65f6\u4fee\u6539\u4ee3\u7801\u6bb5\u548c\u4e0b\u4e00\u6761\u8981\u6267\u884c\u7684\u6307\u4ee4\uff0c\u5c31\u76f8\u5f53\u4e8e\u8fdb\u5165\u4e86 Loader \u91cc\u53bb\u4e86\u3002\u524d\u4e00\u4e2a <code>xxx</code> \u662f\u4ee3\u7801\u6bb5\u7684\u503c\uff0c\u540e\u4e00\u4e2a <code>xxx</code> \u662f\u4e0b\u4e00\u6761\u8981\u6267\u884c\u7684\u6307\u4ee4\uff0c\u5b83\u5b9e\u9645\u4e0a\u4e5f\u662f\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u53eb\u505a <code>EIP</code>\uff0c\u5e73\u65f6\u53ea\u901a\u8fc7 <code>jmp</code>\u3001<code>ret</code>\u3001<code>call</code> \u4e4b\u7c7b\u7684\u8bed\u53e5\u4fee\u6539\u3002</p> <p>\u4e0b\u9762\u5c31\u662f\u7f16\u8bd1\u8fd0\u884c\u4e86\uff0c\u5982\u679c\u6210\u529f\u7684\u8bdd\uff0c\u5c31\u4f1a\u6267\u884c Loader \u7684\u6307\u4ee4\uff0c\u5728\u5c4f\u5e55\u7b2c\u4e00\u884c\u6b63\u4e2d\u592e\u663e\u793a\u4e00\u4e2a\u767d\u8272\u7684 <code>L</code>\u3002\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\uff1a</p> <p></p> <p>\uff08\u56fe 4-1 \u6210\u529f\u8fdb\u5165 <code>Loader</code>\uff09</p> <p>\u5c4f\u5e55\u7b2c\u4e00\u884c\u6b63\u4e2d\u95f4\u51fa\u73b0\u4e86\u4e00\u4e2a\u767d\u8272\u7684 <code>L</code>\uff0c\u6211\u4eec\u6210\u529f\u4e86\uff01\u8fd9\u610f\u5473\u7740\u6211\u4eec\u6446\u8131\u4e86\u5f15\u5bfc\u6247\u533a\u7684\u675f\u7f1a\uff0c\u8fdb\u5165\u4e86 <code>Loader</code> \u7684\u5e7f\u9614\u5929\u5730\uff01</p> <p>\u5728\u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f\u4e4b\u524d\uff0c\u6211\u4eec\u6700\u540e\u4f11\u6574\u4e00\u4e0b\u3002\u9996\u5148\u7528\u4e0b\u5217\u4ee3\u7801\u6e05\u5c4f\uff0c\u5b83\u4f4d\u4e8e <code>mov sp, BaseOfStack</code> \u548c <code>xor ah, ah</code> \u4e4b\u95f4\uff1a</p> <p>\u4ee3\u7801 4-4 \u6e05\u5c4f\uff08boot.asm\uff09 <pre><code>    mov ax, 0600h ; AH=06h\uff1a\u5411\u4e0a\u6eda\u5c4f\uff0cAL=00h\uff1a\u6e05\u7a7a\u7a97\u53e3\n    mov bx, 0700h ; \u7a7a\u767d\u533a\u57df\u7f3a\u7701\u5c5e\u6027\n    mov cx, 0 ; \u5de6\u4e0a\uff1a(0, 0)\n    mov dx, 0184fh ; \u53f3\u4e0b\uff1a(80, 25)\n    int 10h ; \u6267\u884c\n\n    mov dh, 0\n    call DispStr ; Booting\n</code></pre></p> <p>\u4e0b\u9762\u7684\u4ee3\u7801\u7528\u4e8e\u5728\u52a0\u8f7d <code>Loader</code> \u4e4b\u524d\u6253\u5370 <code>Ready.</code></p> <p>\u4ee3\u7801 4-5 \u6253\u5370 <code>Ready.</code>\uff08boot.asm\uff09 <pre><code>LABEL_FILE_LOADED:\n    mov dh, 1 ; \u6253\u5370\u7b2c 1 \u6761\u6d88\u606f\uff08Ready.\uff09\n    call DispStr\n    jmp BaseOfLoader:OffsetOfLoader ; \u8df3\u5165Loader\uff01\n</code></pre></p> <p>\u4e0b\u56fe\u662f\u8fd0\u884c\u7ed3\u679c\uff1a</p> <p></p> <p>\uff08\u56fe 4-2 \u6574\u7406\u5c4f\u5e55\uff09</p> <p>\u90a3\u4e48\u6700\u540e\u6211\u4eec\u8d34\u4e00\u4e0b\u73b0\u5728\u5f15\u5bfc\u6247\u533a\u7684\u5b8c\u6574\u4ee3\u7801\uff1a</p> <p>\u4ee3\u7801 4-6 \u5b8c\u6574\u7684\u5f15\u5bfc\u6247\u533a\uff08boot.asm\uff09 <pre><code>    org 07c00h ; \u544a\u8bc9\u7f16\u8bd1\u5668\u7a0b\u5e8f\u5c06\u88c5\u8f7d\u81f30x7c00\u5904\n\nBaseOfStack             equ 07c00h ; \u6808\u7684\u57fa\u5740\nBaseOfLoader            equ 09000h ; Loader\u7684\u57fa\u5740\nOffsetOfLoader          equ 0100h  ; Loader\u7684\u504f\u79fb\nRootDirSectors          equ 14     ; \u6839\u76ee\u5f55\u5927\u5c0f\nSectorNoOfRootDirectory equ 19     ; \u6839\u76ee\u5f55\u8d77\u59cb\u6247\u533a\nSectorNoOfFAT1          equ 1 ; \u7b2c\u4e00\u4e2aFAT\u8868\u7684\u5f00\u59cb\u6247\u533a\nDeltaSectorNo           equ 17 ; \u7531\u4e8e\u7b2c\u4e00\u4e2a\u7c07\u4e0d\u7528\uff0c\u6240\u4ee5RootDirSectors\u8981-2\u518d\u52a0\u4e0a\u6839\u76ee\u5f55\u533a\u9996\u6247\u533a\u548c\u504f\u79fb\u624d\u80fd\u5f97\u5230\u771f\u6b63\u7684\u5730\u5740\uff0c\u6545\u628aRootDirSectors-2\u5c01\u88c5\u6210\u4e00\u4e2a\u5e38\u91cf\uff0817\uff09\n\n    jmp short LABEL_START\n    nop ; BS_JMPBoot \u7531\u4e8e\u8981\u4e09\u4e2a\u5b57\u8282\u800cjmp\u5230LABEL_START\u53ea\u6709\u4e24\u4e2a\u5b57\u8282 \u6240\u4ee5\u52a0\u4e00\u4e2anop\n\n    BS_OEMName     db 'tutorial'    ; \u56fa\u5b9a\u76848\u4e2a\u5b57\u8282\n    BPB_BytsPerSec dw 512           ; \u6bcf\u6247\u533a\u56fa\u5b9a512\u4e2a\u5b57\u8282\n    BPB_SecPerClus db 1             ; \u6bcf\u7c07\u56fa\u5b9a1\u4e2a\u6247\u533a\n    BPB_RsvdSecCnt dw 1             ; MBR\u56fa\u5b9a\u5360\u75281\u4e2a\u6247\u533a\n    BPB_NumFATs    db 2             ; FAT12 \u6587\u4ef6\u7cfb\u7edf\u56fa\u5b9a2\u4e2a FAT \u8868\n    BPB_RootEntCnt dw 224           ; FAT12 \u6587\u4ef6\u7cfb\u7edf\u4e2d\u6839\u76ee\u5f55\u6700\u5927224\u4e2a\u6587\u4ef6\n    BPB_TotSec16   dw 2880          ; 1.44MB\u78c1\u76d8\u56fa\u5b9a2880\u4e2a\u6247\u533a\n    BPB_Media      db 0xF0          ; \u4ecb\u8d28\u63cf\u8ff0\u7b26\uff0c\u56fa\u5b9a\u4e3a0xF0\n    BPB_FATSz16    dw 9             ; \u4e00\u4e2aFAT\u8868\u6240\u5360\u7684\u6247\u533a\u6570\uff0cFAT12 \u6587\u4ef6\u7cfb\u7edf\u56fa\u5b9a\u4e3a9\u4e2a\u6247\u533a\n    BPB_SecPerTrk  dw 18            ; \u6bcf\u78c1\u9053\u6247\u533a\u6570\uff0c\u56fa\u5b9a\u4e3a18\n    BPB_NumHeads   dw 2             ; \u78c1\u5934\u6570\uff0cbximage \u7684\u8f93\u51fa\u544a\u8bc9\u6211\u4eec\u662f2\u4e2a\n    BPB_HiddSec    dd 0             ; \u9690\u85cf\u6247\u533a\u6570\uff0c\u6ca1\u6709\n    BPB_TotSec32   dd 0             ; \u82e5\u4e4b\u524d\u7684 BPB_TotSec16 \u5904\u6ca1\u6709\u8bb0\u5f55\u6247\u533a\u6570\uff0c\u5219\u7531\u6b64\u8bb0\u5f55\uff0c\u5982\u679c\u8bb0\u5f55\u4e86\uff0c\u8fd9\u91cc\u76f4\u63a5\u7f6e0\u5373\u53ef\n    BS_DrvNum      db 0             ; int 13h \u8c03\u7528\u65f6\u6240\u8bfb\u53d6\u7684\u9a71\u52a8\u5668\u53f7\uff0c\u7531\u4e8e\u53ea\u6302\u5728\u4e00\u4e2a\u8f6f\u76d8\u6240\u4ee5\u662f0 \n    BS_Reserved1   db 0             ; \u672a\u4f7f\u7528\uff0c\u9884\u7559\n    BS_BootSig     db 29h           ; \u6269\u5c55\u5f15\u5bfc\u6807\u8bb0\n    BS_VolID       dd 0             ; \u5377\u5e8f\u5217\u53f7\uff0c\u7531\u4e8e\u53ea\u6302\u8f7d\u4e00\u4e2a\u8f6f\u76d8\u6240\u4ee5\u4e3a0\n    BS_VolLab      db 'OS-tutorial' ; \u5377\u6807\uff0c11\u4e2a\u5b57\u8282\n    BS_FileSysType db 'FAT12   '    ; \u7531\u4e8e\u662f FAT12 \u6587\u4ef6\u7cfb\u7edf\uff0c\u6240\u4ee5\u5199\u5165 FAT12 \u540e\u8865\u9f508\u4e2a\u5b57\u8282\n\nLABEL_START:\n    mov ax, cs\n    mov ds, ax\n    mov es, ax ; \u5c06ds es\u8bbe\u7f6e\u4e3acs\u7684\u503c\uff08\u56e0\u4e3a\u6b64\u65f6\u5b57\u7b26\u4e32\u548c\u53d8\u91cf\u7b49\u5b58\u5728\u4ee3\u7801\u6bb5\u5185\uff09\n    mov ss, ax ; \u5c06\u5806\u6808\u6bb5\u4e5f\u521d\u59cb\u5316\u81f3cs\n    mov sp, BaseOfStack ; \u8bbe\u7f6e\u6808\u9876\n\n    mov ax, 0600h ; AH=06h\uff1a\u5411\u4e0a\u6eda\u5c4f\uff0cAL=00h\uff1a\u6e05\u7a7a\u7a97\u53e3\n    mov bx, 0700h ; \u7a7a\u767d\u533a\u57df\u7f3a\u7701\u5c5e\u6027\n    mov cx, 0 ; \u5de6\u4e0a\uff1a(0, 0)\n    mov dx, 0184fh ; \u53f3\u4e0b\uff1a(80, 25)\n    int 10h ; \u6267\u884c\n\n    mov dh, 0\n    call DispStr ; Booting\n\n    xor ah, ah ; \u590d\u4f4d\n    xor dl, dl\n    int 13h ; \u6267\u884c\u8f6f\u9a71\u590d\u4f4d\n\n    mov word [wSectorNo], SectorNoOfRootDirectory ; \u5f00\u59cb\u67e5\u627e\uff0c\u5c06\u5f53\u524d\u8bfb\u5230\u7684\u6247\u533a\u6570\u8bb0\u4e3a\u6839\u76ee\u5f55\u533a\u7684\u5f00\u59cb\u6247\u533a\uff0819\uff09\nLABEL_SEARCH_IN_ROOT_DIR_BEGIN:\n    cmp word [wRootDirSizeForLoop], 0 ; \u5c06\u5269\u4f59\u7684\u6839\u76ee\u5f55\u533a\u6247\u533a\u6570\u4e0e0\u6bd4\u8f83\n    jz LABEL_NO_LOADERBIN ; \u76f8\u7b49\uff0c\u4e0d\u5b58\u5728Loader\uff0c\u8fdb\u884c\u5584\u540e\n    dec word [wRootDirSizeForLoop] ; \u51cf\u53bb\u4e00\u4e2a\u6247\u533a\n    mov ax, BaseOfLoader\n    mov es, ax\n    mov bx, OffsetOfLoader ; \u5c06es:bx\u8bbe\u7f6e\u4e3aBaseOfLoader:OffsetOfLoader\uff0c\u6682\u4e14\u4f7f\u7528Loader\u6240\u5360\u7684\u5185\u5b58\u7a7a\u95f4\u5b58\u653e\u6839\u76ee\u5f55\u533a\n    mov ax, [wSectorNo] ; \u8d77\u59cb\u6247\u533a\uff1a\u5f53\u524d\u8bfb\u5230\u7684\u6247\u533a\u6570\uff08\u5e9f\u8bdd\uff09\n    mov cl, 1 ; \u8bfb\u53d6\u4e00\u4e2a\u6247\u533a\n    call ReadSector ; \u8bfb\u5165\n\n    mov si, LoaderFileName ; \u4e3a\u6bd4\u5bf9\u505a\u51c6\u5907\uff0c\u6b64\u5904\u662f\u5c06ds:si\u8bbe\u4e3aLoader\u6587\u4ef6\u540d\n    mov di, OffsetOfLoader ; \u4e3a\u6bd4\u5bf9\u505a\u51c6\u5907\uff0c\u6b64\u5904\u662f\u5c06es:di\u8bbe\u4e3aLoader\u504f\u79fb\u91cf\uff08\u5373\u6839\u76ee\u5f55\u533a\u4e2d\u7684\u9996\u4e2a\u6587\u4ef6\u5757\uff09\n    cld ; FLAGS.DF=0\uff0c\u5373\u6267\u884clodsb/lodsw/lodsd\u540e\uff0csi\u81ea\u52a8\u589e\u52a0\n    mov dx, 10h ; \u517116\u4e2a\u6587\u4ef6\u5757\uff08\u4ee3\u8868\u4e00\u4e2a\u6247\u533a\uff0c\u56e0\u4e3a\u4e00\u4e2a\u6587\u4ef6\u575732\u5b57\u8282\uff0c16\u4e2a\u6587\u4ef6\u5757\u6b63\u597d\u4e00\u4e2a\u6247\u533a\uff09\nLABEL_SEARCH_FOR_LOADERBIN:\n    cmp dx, 0 ; \u5c06dx\u4e0e0\u6bd4\u8f83\n    jz LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR ; \u7ee7\u7eed\u524d\u8fdb\u4e00\u4e2a\u6247\u533a\n    dec dx ; \u5426\u5219\u5c06dx\u51cf1\n    mov cx, 11 ; \u6587\u4ef6\u540d\u517111\u5b57\u8282\nLABEL_CMP_FILENAME: ; \u6bd4\u5bf9\u6587\u4ef6\u540d\n    cmp cx, 0 ; \u5c06cx\u4e0e0\u6bd4\u8f83\n    jz LABEL_FILENAME_FOUND ; \u82e5\u76f8\u7b49\uff0c\u8bf4\u660e\u6587\u4ef6\u540d\u5b8c\u5168\u4e00\u81f4\uff0c\u8868\u793a\u627e\u5230\uff0c\u8fdb\u884c\u627e\u5230\u540e\u7684\u5904\u7406\n    dec cx ; cx\u51cf1\uff0c\u8868\u793a\u8bfb\u53d61\u4e2a\u5b57\u7b26\n    lodsb ; \u5c06ds:si\u7684\u5185\u5bb9\u7f6e\u5165al\uff0csi\u52a01\n    cmp al, byte [es:di] ; \u6b64\u5b57\u7b26\u4e0eLOADER  BIN\u4e2d\u7684\u5f53\u524d\u5b57\u7b26\u76f8\u7b49\u5417\uff1f\n    jz LABEL_GO_ON ; \u4e0b\u4e00\u4e2a\u6587\u4ef6\u540d\u5b57\u7b26\n    jmp LABEL_DIFFERENT ; \u4e0b\u4e00\u4e2a\u6587\u4ef6\u5757\nLABEL_GO_ON:\n    inc di ; di\u52a01\uff0c\u5373\u4e0b\u4e00\u4e2a\u5b57\u7b26\n    jmp LABEL_CMP_FILENAME ; \u7ee7\u7eed\u6bd4\u8f83\n\nLABEL_DIFFERENT:\n    and di, 0FFE0h ; \u6307\u5411\u8be5\u6587\u4ef6\u5757\u5f00\u5934\n    add di, 20h ; \u8df3\u8fc732\u5b57\u8282\uff0c\u5373\u6307\u5411\u4e0b\u4e00\u4e2a\u6587\u4ef6\u5757\u5f00\u5934\n    mov si, LoaderFileName ; \u91cd\u7f6eds:si\n    jmp LABEL_SEARCH_FOR_LOADERBIN ; \u7531\u4e8e\u8981\u91cd\u65b0\u8bbe\u7f6e\u4e00\u4e9b\u4e1c\u897f\uff0c\u6240\u4ee5\u56de\u5230\u67e5\u627eLoader\u5faa\u73af\u7684\u5f00\u5934\n\nLABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR:\n    add word [wSectorNo], 1 ; \u4e0b\u4e00\u4e2a\u6247\u533a\n    jmp LABEL_SEARCH_IN_ROOT_DIR_BEGIN ; \u91cd\u65b0\u6267\u884c\u4e3b\u5faa\u73af\n\nLABEL_NO_LOADERBIN: ; \u82e5\u627e\u4e0d\u5230loader.bin\u5219\u5230\u8fd9\u91cc\n    mov dh, 2\n    call DispStr; \u663e\u793aNo LOADER\n    jmp $\n\nLABEL_FILENAME_FOUND:\n    mov ax, RootDirSectors ; \u5c06ax\u7f6e\u4e3a\u6839\u76ee\u5f55\u9996\u6247\u533a\uff0819\uff09\n    and di, 0FFE0h ; \u5c06di\u8bbe\u7f6e\u5230\u6b64\u6587\u4ef6\u5757\u5f00\u5934\n    add di, 01Ah ; \u6b64\u65f6\u7684di\u6307\u5411Loader\u7684FAT\u53f7\n    mov cx, word [es:di] ; \u83b7\u5f97\u8be5\u6247\u533a\u7684FAT\u53f7\n    push cx ; \u5c06FAT\u53f7\u6682\u5b58\n    add cx, ax ; +\u6839\u76ee\u5f55\u9996\u6247\u533a\n    add cx, DeltaSectorNo ; \u83b7\u5f97\u771f\u6b63\u7684\u5730\u5740\n    mov ax, BaseOfLoader\n    mov es, ax\n    mov bx, OffsetOfLoader ; es:bx\uff1a\u8bfb\u53d6\u6247\u533a\u7684\u7f13\u51b2\u533a\u5730\u5740\n    mov ax, cx ; ax\uff1a\u8d77\u59cb\u6247\u533a\u53f7\n\nLABEL_GOON_LOADING_FILE: ; \u52a0\u8f7d\u6587\u4ef6\n    push ax\n    push bx\n    mov ah, 0Eh ; AH=0Eh\uff1a\u663e\u793a\u5355\u4e2a\u5b57\u7b26\n    mov al, '.' ; AL\uff1a\u5b57\u7b26\u5185\u5bb9\n    mov bl, 0Fh ; BL\uff1a\u663e\u793a\u5c5e\u6027\n; \u8fd8\u6709BH\uff1a\u9875\u7801\uff0c\u6b64\u5904\u4e0d\u7ba1\n    int 10h ; \u663e\u793a\u6b64\u5b57\u7b26\n    pop bx\n    pop ax ; \u4e0a\u9762\u51e0\u884c\u7684\u6574\u4f53\u4f5c\u7528\uff1a\u5728\u5c4f\u5e55\u4e0a\u6253\u5370\u4e00\u4e2a\u70b9\n\n    mov cl, 1\n    call ReadSector ; \u8bfb\u53d6Loader\u7b2c\u4e00\u4e2a\u6247\u533a\n    pop ax ; \u52a0\u8f7dFAT\u53f7\n    call GetFATEntry ; \u52a0\u8f7dFAT\u9879\n    cmp ax, 0FFFh\n    jz LABEL_FILE_LOADED ; \u82e5\u6b64\u9879=0FFF\uff0c\u4ee3\u8868\u6587\u4ef6\u7ed3\u675f\uff0c\u76f4\u63a5\u8df3\u5165Loader\n    push ax ; \u91cd\u65b0\u5b58\u50a8FAT\u53f7\uff0c\u4f46\u6b64\u65f6\u7684FAT\u53f7\u5df2\u7ecf\u662f\u4e0b\u4e00\u4e2aFAT\u4e86\n    mov dx, RootDirSectors\n    add ax, dx ; +\u6839\u76ee\u5f55\u9996\u6247\u533a\n    add ax, DeltaSectorNo ; \u83b7\u53d6\u771f\u5b9e\u5730\u5740\n    add bx, [BPB_BytsPerSec] ; \u5c06bx\u6307\u5411\u4e0b\u4e00\u4e2a\u6247\u533a\u5f00\u5934\n    jmp LABEL_GOON_LOADING_FILE ; \u52a0\u8f7d\u4e0b\u4e00\u4e2a\u6247\u533a\n\nLABEL_FILE_LOADED:\n    mov dh, 1 ; \u6253\u5370\u7b2c 1 \u6761\u6d88\u606f\uff08Ready.\uff09\n    call DispStr\n    jmp BaseOfLoader:OffsetOfLoader ; \u8df3\u5165Loader\uff01\n\nwRootDirSizeForLoop dw RootDirSectors ; \u67e5\u627eloader\u7684\u5faa\u73af\u4e2d\u5c06\u4f1a\u7528\u5230\nwSectorNo           dw 0              ; \u7528\u4e8e\u4fdd\u5b58\u5f53\u524d\u6247\u533a\u6570\nbOdd                db 0              ; \u8fd9\u4e2a\u5176\u5b9e\u662f\u4e0b\u4e00\u8282\u7684\u4e1c\u897f\uff0c\u4e0d\u8fc7\u5148\u653e\u5728\u8fd9\u4e5f\u4e0d\u662f\u4e0d\u884c\n\nLoaderFileName      db \"LOADER  BIN\", 0 ; loader\u7684\u6587\u4ef6\u540d\n\nMessageLength       equ 9 ; \u4e0b\u9762\u662f\u4e09\u6761\u5c0f\u6d88\u606f\uff0c\u6b64\u53d8\u91cf\u7528\u4e8e\u4fdd\u5b58\u5176\u957f\u5ea6\uff0c\u4e8b\u5b9e\u4e0a\u5728\u5185\u5b58\u4e2d\u5b83\u4eec\u7684\u6392\u5e8f\u7c7b\u4f3c\u4e8e\u4e8c\u7ef4\u6570\u7ec4\nBootMessage:        db \"Booting  \" ; \u6b64\u5904\u5b9a\u4e49\u4e4b\u540e\u5c31\u53ef\u4ee5\u5220\u9664\u539f\u5148\u5b9a\u4e49\u7684BootMessage\u5b57\u7b26\u4e32\u4e86\nMessage1            db \"Ready.   \" ; \u663e\u793a\u5df2\u51c6\u5907\u597d\nMessage2            db \"No LOADER\" ; \u663e\u793a\u6ca1\u6709Loader\n\nDispStr:\n    mov ax, MessageLength\n    mul dh ; \u5c06ax\u4e58\u4ee5dh\u540e\uff0c\u7ed3\u679c\u4ecd\u7f6e\u5165ax\uff08\u4e8b\u5b9e\u4e0a\u8fdc\u6bd4\u6b64\u590d\u6742\uff0c\u6b64\u5904\u5148\u89e3\u91ca\u5230\u8fd9\u91cc\uff09\n    add ax, BootMessage ; \u627e\u5230\u7ed9\u5b9a\u7684\u6d88\u606f\n    mov bp, ax ; \u5148\u7ed9\u5b9a\u504f\u79fb\n    mov ax, ds\n    mov es, ax ; \u4ee5\u9632\u4e07\u4e00\uff0c\u91cd\u65b0\u8bbe\u7f6ees\n    mov cx, MessageLength ; \u5b57\u7b26\u4e32\u957f\u5ea6\n    mov ax, 01301h ; ah=13h, \u663e\u793a\u5b57\u7b26\u7684\u540c\u65f6\u5149\u6807\u79fb\u4f4d\n    mov bx, 0007h ; \u9ed1\u5e95\u767d\u5b57\n    mov dl, 0 ; \u7b2c0\u884c\uff0c\u524d\u9762\u6307\u5b9a\u7684dh\u4e0d\u53d8\uff0c\u6240\u4ee5\u7ed9\u5b9a\u7b2c\u51e0\u6761\u6d88\u606f\u5c31\u6253\u5370\u5230\u7b2c\u51e0\u884c\n    int 10h ; \u663e\u793a\u5b57\u7b26\n    ret\n\nReadSector:\n    push bp\n    mov bp, sp\n    sub esp, 2 ; \u7a7a\u51fa\u4e24\u4e2a\u5b57\u8282\u5b58\u653e\u5f85\u8bfb\u6247\u533a\u6570\uff08\u56e0\u4e3acl\u5728\u8c03\u7528BIOS\u65f6\u8981\u7528\uff09\n\n    mov byte [bp-2], cl\n    push bx ; \u8fd9\u91cc\u4e34\u65f6\u7528\u4e00\u4e0bbx\n    mov bl, [BPB_SecPerTrk]\n    div bl ; \u6267\u884c\u5b8c\u540e\uff0cax\u5c06\u88ab\u9664\u4ee5bl\uff08\u6bcf\u78c1\u9053\u6247\u533a\u6570\uff09\uff0c\u8fd0\u7b97\u7ed3\u675f\u540e\u5546\u4f4d\u4e8eal\uff0c\u4f59\u6570\u4f4d\u4e8eah\uff0c\u90a3\u4e48al\u4ee3\u8868\u7684\u5c31\u662f\u603b\u78c1\u9053\u4e2a\u6570\uff08\u4e0b\u53d6\u6574\uff09\uff0cah\u4ee3\u8868\u7684\u662f\u5269\u4f59\u6ca1\u9664\u5f00\u7684\u6247\u533a\u6570\n    inc ah ; +1\u8868\u793a\u8d77\u59cb\u6247\u533a\uff08\u8fd9\u4e2a\u624d\u548cBIOS\u4e2d\u7684\u8d77\u59cb\u6247\u533a\u4e00\u4e2a\u610f\u601d\uff0c\u662f\u8bfb\u5165\u5f00\u59cb\u7684\u7b2c\u4e00\u4e2a\u6247\u533a\uff09\n    mov cl, ah ; \u6309\u7167BIOS\u6807\u51c6\u7f6e\u5165cl\n    mov dh, al ; \u7528dh\u6682\u5b58\u4f4d\u4e8e\u54ea\u4e2a\u78c1\u9053\n    shr al, 1 ; \u6bcf\u4e2a\u78c1\u9053\u4e24\u4e2a\u78c1\u5934\uff0c\u9664\u4ee52\u53ef\u5f97\u771f\u6b63\u7684\u67f1\u9762\u7f16\u53f7\n    mov ch, al ; \u6309\u7167BIOS\u6807\u51c6\u7f6e\u5165ch\n    and dh, 1 ; \u5bf9\u78c1\u9053\u6a212\u53d6\u4f59\uff0c\u53ef\u5f97\u4f4d\u4e8e\u54ea\u4e2a\u78c1\u5934\uff0c\u7ed3\u679c\u5df2\u7ecf\u7f6e\u5165dh\n    pop bx ; \u5c06bx\u5f39\u51fa\n    mov dl, [BS_DrvNum] ; \u5c06\u9a71\u52a8\u5668\u53f7\u5b58\u5165dl\n.GoOnReading: ; \u4e07\u4e8b\u4ff1\u5907\uff0c\u53ea\u6b20\u8bfb\u53d6\uff01\n    mov ah, 2 ; \u8bfb\u76d8\n    mov al, byte [bp-2] ; \u5c06\u4e4b\u524d\u5b58\u5165\u7684\u5f85\u8bfb\u6247\u533a\u6570\u53d6\u51fa\u6765\n    int 13h ; \u6267\u884c\u8bfb\u76d8\u64cd\u4f5c\n    jc .GoOnReading ; \u5982\u53d1\u751f\u9519\u8bef\u5c31\u7ee7\u7eed\u8bfb\uff0c\u5426\u5219\u8fdb\u5165\u4e0b\u9762\u7684\u6d41\u7a0b\n\n    add esp, 2\n    pop bp ; \u6062\u590d\u5806\u6808\n\n    ret\n\nGetFATEntry:\n    push es\n    push bx\n    push ax ; \u90fd\u4f1a\u7528\u5230\uff0cpush\u4e00\u4e0b\n    mov ax, BaseOfLoader ; \u83b7\u53d6Loader\u7684\u57fa\u5740\n    sub ax, 0100h ; \u7559\u51fa4KB\u7a7a\u95f4\n    mov es, ax ; \u6b64\u5904\u5c31\u662f\u7f13\u51b2\u533a\u7684\u57fa\u5740\n    pop ax ; ax\u6211\u4eec\u5c31\u7528\u4e0d\u5230\u4e86\n    mov byte [bOdd], 0 ; \u8bbe\u7f6ebOdd\u7684\u521d\u503c\n    mov bx, 3\n    mul bx ; dx:ax=ax * 3\uff08mul\u7684\u7b2c\u4e8c\u91cd\u7528\u6cd5\uff1a\u5982\u6709\u8fdb\u4f4d\uff0c\u9ad8\u4f4d\u5c06\u653e\u5165dx\uff09\n    mov bx, 2\n    div bx ; dx:ax / 2 -&gt; dx\uff1a\u4f59\u6570 ax\uff1a\u5546\n; \u6b64\u5904* 1.5\u7684\u539f\u56e0\u662f\uff0c\u6bcf\u4e2aFAT\u9879\u5b9e\u9645\u5360\u7528\u7684\u662f1.5\u6247\u533a\uff0c\u6240\u4ee5\u8981\u628a\u8868\u9879 * 1.5\n    cmp dx, 0 ; \u6ca1\u6709\u4f59\u6570\n    jz LABEL_EVEN\n    mov byte [bOdd], 1 ; \u90a3\u5c31\u662f\u5947\u6570\u4e86\nLABEL_EVEN:\n    ; \u6b64\u65f6ax\u4e2d\u5e94\u5f53\u5df2\u7ecf\u5b58\u50a8\u4e86\u5f85\u67e5\u627eFAT\u76f8\u5bf9\u4e8eFAT\u8868\u7684\u504f\u79fb\uff0c\u4e0b\u9762\u6211\u4eec\u501f\u6b64\u6765\u67e5\u627e\u5b83\u7684\u6247\u533a\u53f7\n    xor dx, dx ; dx\u7f6e0\n    mov bx, [BPB_BytsPerSec]\n    div bx ; dx:ax / 512 -&gt; ax\uff1a\u5546\uff08\u6247\u533a\u53f7\uff09dx\uff1a\u4f59\u6570\uff08\u6247\u533a\u5185\u504f\u79fb\uff09\n    push dx ; \u6682\u5b58dx\uff0c\u540e\u9762\u8981\u7528\n    mov bx, 0 ; es:bx\uff1a(BaseOfLoader - 4KB):0\n    add ax, SectorNoOfFAT1 ; \u5b9e\u9645\u6247\u533a\u53f7\n    mov cl, 2\n    call ReadSector ; \u76f4\u63a5\u8bfb2\u4e2a\u6247\u533a\uff0c\u907f\u514d\u51fa\u73b0\u8de8\u6247\u533aFAT\u9879\u51fa\u73b0bug\n    pop dx ; \u7531\u4e8eReadSector\u672a\u4fdd\u5b58dx\u7684\u503c\u6240\u4ee5\u8fd9\u91cc\u4fdd\u5b58\u4e00\u4e0b\n    add bx, dx ; \u73b0\u5728\u6247\u533a\u5185\u5bb9\u5728\u5185\u5b58\u4e2d\uff0cbx+=dx\uff0c\u5373\u662f\u771f\u6b63\u7684FAT\u9879\n    mov ax, [es:bx] ; \u8bfb\u53d6\u4e4b\n\n    cmp byte [bOdd], 1\n    jnz LABEL_EVEN_2 ; \u662f\u5076\u6570\uff0c\u5219\u8fdb\u5165LABEL_EVEN_2\n    shr ax, 4 ; \u9ad84\u4f4d\u4e3a\u771f\u6b63\u7684FAT\u9879\nLABEL_EVEN_2:\n    and ax, 0FFFh ; \u53ea\u4fdd\u7559\u4f4e4\u4f4d\n\nLABEL_GET_FAT_ENRY_OK: ; \u80dc\u5229\u6267\u884c\n    pop bx\n    pop es ; \u6062\u590d\u5806\u6808\n    ret\n\ntimes 510 - ($ - $$) db 0\ndb 0x55, 0xaa ; \u786e\u4fdd\u6700\u540e\u4e24\u4e2a\u5b57\u8282\u662f0x55AA\n</code></pre></p>"},{"location":"os-tutorial/old/05-read-kernel-and-into-32/","title":"05 \u8bfb\u53d6\u5185\u6838\u5e76\u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f","text":"<p>\u4e8b\u5b9e\u4e0a\uff0c\u8bfb\u5165\u5185\u6838\u7684\u65b9\u6cd5\u4e0e\u8bfb\u5165 <code>Loader</code> \u5b8c\u5168\u4e00\u81f4\uff0c\u56e0\u6b64\u4e3a\u4e86\u53ef\u8bfb\u6027\u7740\u60f3\uff0c\u6211\u4eec\u53ea\u9700\u8981\u66f4\u6539\u51e0\u4e2a\u53d8\u91cf\u540d\uff0c\u518d\u6539\u51e0\u6761\u5b57\u7b26\u4e32\uff0c\u4fbf\u53ef\u544a\u6210\u3002\u4e8b\u5b9e\u4e0a\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u628a\u8fd9\u4e2a\u8fc7\u7a0b\u5199\u6210\u51fd\u6570\uff0c\u4f46\u9274\u4e8e\u5f15\u5bfc\u6247\u533a 446 \u5b57\u8282\u7684\u9650\u5236\u8fc7\u4e8e\u6076\u5fc3\u548c\u505a\u6210\u51fd\u6570\u540e\u7684\u5806\u6808\u64cd\u4f5c\u5360\u636e\u7684\u7a7a\u95f4\uff0c\u6211\u4eec\u8fd8\u662f\u76f4\u63a5\u590d\u5236\u7c98\u8d34\u5427\u3002</p> <p>\u5728\u6b64\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u628a <code>FAT12</code> \u76f8\u5173\u7684\u4e1c\u897f\u653e\u5230\u4e00\u8d77\uff1a</p> <p>\u4ee3\u7801 5-1 <code>FAT12</code> \u6587\u4ef6\u7cfb\u7edf\u76f8\u5173\uff08fat12hdr.inc\uff09 <pre><code>    BS_OEMName     db 'tutorial'    ; \u56fa\u5b9a\u76848\u4e2a\u5b57\u8282\n    BPB_BytsPerSec dw 512           ; \u6bcf\u6247\u533a\u56fa\u5b9a512\u4e2a\u5b57\u8282\n    BPB_SecPerClus db 1             ; \u6bcf\u7c07\u56fa\u5b9a1\u4e2a\u6247\u533a\n    BPB_RsvdSecCnt dw 1             ; MBR\u56fa\u5b9a\u5360\u75281\u4e2a\u6247\u533a\n    BPB_NumFATs    db 2             ; FAT12 \u6587\u4ef6\u7cfb\u7edf\u56fa\u5b9a2\u4e2a FAT \u8868\n    BPB_RootEntCnt dw 224           ; FAT12 \u6587\u4ef6\u7cfb\u7edf\u4e2d\u6839\u76ee\u5f55\u6700\u5927224\u4e2a\u6587\u4ef6\n    BPB_TotSec16   dw 2880          ; 1.44MB\u78c1\u76d8\u56fa\u5b9a2880\u4e2a\u6247\u533a\n    BPB_Media      db 0xF0          ; \u4ecb\u8d28\u63cf\u8ff0\u7b26\uff0c\u56fa\u5b9a\u4e3a0xF0\n    BPB_FATSz16    dw 9             ; \u4e00\u4e2aFAT\u8868\u6240\u5360\u7684\u6247\u533a\u6570\uff0cFAT12 \u6587\u4ef6\u7cfb\u7edf\u56fa\u5b9a\u4e3a9\u4e2a\u6247\u533a\n    BPB_SecPerTrk  dw 18            ; \u6bcf\u78c1\u9053\u6247\u533a\u6570\uff0c\u56fa\u5b9a\u4e3a18\n    BPB_NumHeads   dw 2             ; \u78c1\u5934\u6570\uff0cbximage \u7684\u8f93\u51fa\u544a\u8bc9\u6211\u4eec\u662f2\u4e2a\n    BPB_HiddSec    dd 0             ; \u9690\u85cf\u6247\u533a\u6570\uff0c\u6ca1\u6709\n    BPB_TotSec32   dd 0             ; \u82e5\u4e4b\u524d\u7684 BPB_TotSec16 \u5904\u6ca1\u6709\u8bb0\u5f55\u6247\u533a\u6570\uff0c\u5219\u7531\u6b64\u8bb0\u5f55\uff0c\u5982\u679c\u8bb0\u5f55\u4e86\uff0c\u8fd9\u91cc\u76f4\u63a5\u7f6e0\u5373\u53ef\n    BS_DrvNum      db 0             ; int 13h \u8c03\u7528\u65f6\u6240\u8bfb\u53d6\u7684\u9a71\u52a8\u5668\u53f7\uff0c\u7531\u4e8e\u53ea\u6302\u5728\u4e00\u4e2a\u8f6f\u76d8\u6240\u4ee5\u662f0 \n    BS_Reserved1   db 0             ; \u672a\u4f7f\u7528\uff0c\u9884\u7559\n    BS_BootSig     db 29h           ; \u6269\u5c55\u5f15\u5bfc\u6807\u8bb0\n    BS_VolID       dd 0             ; \u5377\u5e8f\u5217\u53f7\uff0c\u7531\u4e8e\u53ea\u6302\u8f7d\u4e00\u4e2a\u8f6f\u76d8\u6240\u4ee5\u4e3a0\n    BS_VolLab      db 'OS-tutorial' ; \u5377\u6807\uff0c11\u4e2a\u5b57\u8282\n    BS_FileSysType db 'FAT12   '    ; \u7531\u4e8e\u662f FAT12 \u6587\u4ef6\u7cfb\u7edf\uff0c\u6240\u4ee5\u5199\u5165 FAT12 \u540e\u8865\u9f508\u4e2a\u5b57\u8282\n\nFATSz                   equ 9      ; BPB_FATSz16\nRootDirSectors          equ 14     ; \u6839\u76ee\u5f55\u5927\u5c0f\nSectorNoOfRootDirectory equ 19     ; \u6839\u76ee\u5f55\u8d77\u59cb\u6247\u533a\nSectorNoOfFAT1          equ 1 ; \u7b2c\u4e00\u4e2aFAT\u8868\u7684\u5f00\u59cb\u6247\u533a\nDeltaSectorNo           equ 17 ; \u7531\u4e8e\u7b2c\u4e00\u4e2a\u7c07\u4e0d\u7528\uff0c\u6240\u4ee5RootDirSectors\u8981-2\u518d\u52a0\u4e0a\u6839\u76ee\u5f55\u533a\u9996\u6247\u533a\u548c\u504f\u79fb\u624d\u80fd\u5f97\u5230\u771f\u6b63\u7684\u5730\u5740\uff0c\u6545\u628aRootDirSectors-2\u5c01\u88c5\u6210\u4e00\u4e2a\u5e38\u91cf\uff0817\uff09\n</code></pre></p> <p>\u4e0b\u9762\u662f\u6211\u4eec\u66f4\u6539\u8fc7\u540e\u7684 <code>Loader</code> \u4ee3\u7801\uff1a</p> <p>\u4ee3\u7801 5-2 \u65b0\u7248 <code>Loader</code> \uff08loader.asm\uff09 <pre><code>    org 0100h ; \u544a\u8bc9\u7f16\u8bd1\u5668\u7a0b\u5e8f\u5c06\u88c5\u8f7d\u81f30x100\u5904\n\nBaseOfStack                 equ 0100h ; \u6808\u7684\u57fa\u5740\nBaseOfKernelFile            equ 08000h ; Kernel\u7684\u57fa\u5740\nOffsetOfKernelFile          equ 0h  ; Kernel\u7684\u504f\u79fb\n\n    jmp LABEL_START\n\n%include \"fat12hdr.inc\"\n\nLABEL_START:\n    mov ax, cs\n    mov ds, ax\n    mov es, ax ; \u5c06ds es\u8bbe\u7f6e\u4e3acs\u7684\u503c\uff08\u56e0\u4e3a\u6b64\u65f6\u5b57\u7b26\u4e32\u548c\u53d8\u91cf\u7b49\u5b58\u5728\u4ee3\u7801\u6bb5\u5185\uff09\n    mov ss, ax ; \u5c06\u5806\u6808\u6bb5\u4e5f\u521d\u59cb\u5316\u81f3cs\n    mov sp, BaseOfStack ; \u8bbe\u7f6e\u6808\u9876\n\n    mov dh, 0\n    call DispStr ; Loading\n\n    mov word [wSectorNo], SectorNoOfRootDirectory ; \u5f00\u59cb\u67e5\u627e\uff0c\u5c06\u5f53\u524d\u8bfb\u5230\u7684\u6247\u533a\u6570\u8bb0\u4e3a\u6839\u76ee\u5f55\u533a\u7684\u5f00\u59cb\u6247\u533a\uff0819\uff09\n    xor ah, ah ; \u590d\u4f4d\n    xor dl, dl\n    int 13h ; \u6267\u884c\u8f6f\u9a71\u590d\u4f4d\nLABEL_SEARCH_IN_ROOT_DIR_BEGIN:\n    cmp word [wRootDirSizeForLoop], 0 ; \u5c06\u5269\u4f59\u7684\u6839\u76ee\u5f55\u533a\u6247\u533a\u6570\u4e0e0\u6bd4\u8f83\n    jz LABEL_NO_KERNELBIN ; \u76f8\u7b49\uff0c\u4e0d\u5b58\u5728Kernel\uff0c\u8fdb\u884c\u5584\u540e\n    dec word [wRootDirSizeForLoop] ; \u51cf\u53bb\u4e00\u4e2a\u6247\u533a\n    mov ax, BaseOfKernelFile\n    mov es, ax\n    mov bx, OffsetOfKernelFile ; \u5c06es:bx\u8bbe\u7f6e\u4e3aBaseOfKernel:OffsetOfKernel\uff0c\u6682\u4e14\u4f7f\u7528Kernel\u6240\u5360\u7684\u5185\u5b58\u7a7a\u95f4\u5b58\u653e\u6839\u76ee\u5f55\u533a\n    mov ax, [wSectorNo] ; \u8d77\u59cb\u6247\u533a\uff1a\u5f53\u524d\u8bfb\u5230\u7684\u6247\u533a\u6570\uff08\u5e9f\u8bdd\uff09\n    mov cl, 1 ; \u8bfb\u53d6\u4e00\u4e2a\u6247\u533a\n    call ReadSector ; \u8bfb\u5165\n\n    mov si, KernelFileName ; \u4e3a\u6bd4\u5bf9\u505a\u51c6\u5907\uff0c\u6b64\u5904\u662f\u5c06ds:si\u8bbe\u4e3aKernel\u6587\u4ef6\u540d\n    mov di, OffsetOfKernelFile ; \u4e3a\u6bd4\u5bf9\u505a\u51c6\u5907\uff0c\u6b64\u5904\u662f\u5c06es:di\u8bbe\u4e3aKernel\u504f\u79fb\u91cf\uff08\u5373\u6839\u76ee\u5f55\u533a\u4e2d\u7684\u9996\u4e2a\u6587\u4ef6\u5757\uff09\n    cld ; FLAGS.DF=0\uff0c\u5373\u6267\u884clodsb/lodsw/lodsd\u540e\uff0csi\u81ea\u52a8\u589e\u52a0\n    mov dx, 10h ; \u517116\u4e2a\u6587\u4ef6\u5757\uff08\u4ee3\u8868\u4e00\u4e2a\u6247\u533a\uff0c\u56e0\u4e3a\u4e00\u4e2a\u6587\u4ef6\u575732\u5b57\u8282\uff0c16\u4e2a\u6587\u4ef6\u5757\u6b63\u597d\u4e00\u4e2a\u6247\u533a\uff09\nLABEL_SEARCH_FOR_KERNELBIN:\n    cmp dx, 0 ; \u5c06dx\u4e0e0\u6bd4\u8f83\n    jz LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR ; \u7ee7\u7eed\u524d\u8fdb\u4e00\u4e2a\u6247\u533a\n    dec dx ; \u5426\u5219\u5c06dx\u51cf1\n    mov cx, 11 ; \u6587\u4ef6\u540d\u517111\u5b57\u8282\nLABEL_CMP_FILENAME: ; \u6bd4\u5bf9\u6587\u4ef6\u540d\n    cmp cx, 0 ; \u5c06cx\u4e0e0\u6bd4\u8f83\n    jz LABEL_FILENAME_FOUND ; \u82e5\u76f8\u7b49\uff0c\u8bf4\u660e\u6587\u4ef6\u540d\u5b8c\u5168\u4e00\u81f4\uff0c\u8868\u793a\u627e\u5230\uff0c\u8fdb\u884c\u627e\u5230\u540e\u7684\u5904\u7406\n    dec cx ; cx\u51cf1\uff0c\u8868\u793a\u8bfb\u53d61\u4e2a\u5b57\u7b26\n    lodsb ; \u5c06ds:si\u7684\u5185\u5bb9\u7f6e\u5165al\uff0csi\u52a01\n    cmp al, byte [es:di] ; \u6b64\u5b57\u7b26\u4e0eLOADER  BIN\u4e2d\u7684\u5f53\u524d\u5b57\u7b26\u76f8\u7b49\u5417\uff1f\n    jz LABEL_GO_ON ; \u4e0b\u4e00\u4e2a\u6587\u4ef6\u540d\u5b57\u7b26\n    jmp LABEL_DIFFERENT ; \u4e0b\u4e00\u4e2a\u6587\u4ef6\u5757\nLABEL_GO_ON:\n    inc di ; di\u52a01\uff0c\u5373\u4e0b\u4e00\u4e2a\u5b57\u7b26\n    jmp LABEL_CMP_FILENAME ; \u7ee7\u7eed\u6bd4\u8f83\n\nLABEL_DIFFERENT:\n    and di, 0FFE0h ; \u6307\u5411\u8be5\u6587\u4ef6\u5757\u5f00\u5934\n    add di, 20h ; \u8df3\u8fc732\u5b57\u8282\uff0c\u5373\u6307\u5411\u4e0b\u4e00\u4e2a\u6587\u4ef6\u5757\u5f00\u5934\n    mov si, KernelFileName ; \u91cd\u7f6eds:si\n    jmp LABEL_SEARCH_FOR_KERNELBIN ; \u7531\u4e8e\u8981\u91cd\u65b0\u8bbe\u7f6e\u4e00\u4e9b\u4e1c\u897f\uff0c\u6240\u4ee5\u56de\u5230\u67e5\u627eKernel\u5faa\u73af\u7684\u5f00\u5934\n\nLABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR:\n    add word [wSectorNo], 1 ; \u4e0b\u4e00\u4e2a\u6247\u533a\n    jmp LABEL_SEARCH_IN_ROOT_DIR_BEGIN ; \u91cd\u65b0\u6267\u884c\u4e3b\u5faa\u73af\n\nLABEL_NO_KERNELBIN: ; \u82e5\u627e\u4e0d\u5230kernel.bin\u5219\u5230\u8fd9\u91cc\n    mov dh, 2\n    call DispStr ; \u663e\u793aNo KERNEL\n    jmp $\n\nLABEL_FILENAME_FOUND:\n    mov ax, RootDirSectors ; \u5c06ax\u7f6e\u4e3a\u6839\u76ee\u5f55\u9996\u6247\u533a\uff0819\uff09\n    and di, 0FFF0h ; \u5c06di\u8bbe\u7f6e\u5230\u6b64\u6587\u4ef6\u5757\u5f00\u5934\n\n    push eax\n    mov eax, [es:di + 01Ch]\n    mov dword [dwKernelSize], eax\n    pop eax\n\n    add di, 01Ah ; \u6b64\u65f6\u7684di\u6307\u5411Kernel\u7684FAT\u53f7\n    mov cx, word [es:di] ; \u83b7\u5f97\u8be5\u6247\u533a\u7684FAT\u53f7\n    push cx ; \u5c06FAT\u53f7\u6682\u5b58\n    add cx, ax ; +\u6839\u76ee\u5f55\u9996\u6247\u533a\n    add cx, DeltaSectorNo ; \u83b7\u5f97\u771f\u6b63\u7684\u5730\u5740\n    mov ax, BaseOfKernelFile\n    mov es, ax\n    mov bx, OffsetOfKernelFile ; es:bx\uff1a\u8bfb\u53d6\u6247\u533a\u7684\u7f13\u51b2\u533a\u5730\u5740\n    mov ax, cx ; ax\uff1a\u8d77\u59cb\u6247\u533a\u53f7\n\nLABEL_GOON_LOADING_FILE: ; \u52a0\u8f7d\u6587\u4ef6\n    push ax\n    push bx\n    mov ah, 0Eh ; AH=0Eh\uff1a\u663e\u793a\u5355\u4e2a\u5b57\u7b26\n    mov al, '.' ; AL\uff1a\u5b57\u7b26\u5185\u5bb9\n    mov bl, 0Fh ; BL\uff1a\u663e\u793a\u5c5e\u6027\n; \u8fd8\u6709BH\uff1a\u9875\u7801\uff0c\u6b64\u5904\u4e0d\u7ba1\n    int 10h ; \u663e\u793a\u6b64\u5b57\u7b26\n    pop bx\n    pop ax ; \u4e0a\u9762\u51e0\u884c\u7684\u6574\u4f53\u4f5c\u7528\uff1a\u5728\u5c4f\u5e55\u4e0a\u6253\u5370\u4e00\u4e2a\u70b9\n\n    mov cl, 1\n    call ReadSector ; \u8bfb\u53d6Kernel\u7b2c\u4e00\u4e2a\u6247\u533a\n    pop ax ; \u52a0\u8f7dFAT\u53f7\n    call GetFATEntry ; \u52a0\u8f7dFAT\u9879\n    cmp ax, 0FFFh\n    jz LABEL_FILE_LOADED ; \u82e5\u6b64\u9879=0FFF\uff0c\u4ee3\u8868\u6587\u4ef6\u7ed3\u675f\uff0c\u76f4\u63a5\u8df3\u5165Kernel\n    push ax ; \u91cd\u65b0\u5b58\u50a8FAT\u53f7\uff0c\u4f46\u6b64\u65f6\u7684FAT\u53f7\u5df2\u7ecf\u662f\u4e0b\u4e00\u4e2aFAT\u4e86\n    mov dx, RootDirSectors\n    add ax, dx ; +\u6839\u76ee\u5f55\u9996\u6247\u533a\n    add ax, DeltaSectorNo ; \u83b7\u53d6\u771f\u5b9e\u5730\u5740\n    add bx, [BPB_BytsPerSec] ; \u5c06bx\u6307\u5411\u4e0b\u4e00\u4e2a\u6247\u533a\u5f00\u5934\n    jmp LABEL_GOON_LOADING_FILE ; \u52a0\u8f7d\u4e0b\u4e00\u4e2a\u6247\u533a\n\nLABEL_FILE_LOADED:\n    call KillMotor ; \u5173\u95ed\u8f6f\u9a71\u9a6c\u8fbe\n\n    mov dh, 1 ; \"Ready.\"\n    call DispStr\n\n    jmp $ ; \u6682\u65f6\u505c\u5728\u6b64\u5904\n\ndwKernelSize        dd 0              ; Kernel\u5927\u5c0f\nwRootDirSizeForLoop dw RootDirSectors ; \u67e5\u627eKernel\u7684\u5faa\u73af\u4e2d\u5c06\u4f1a\u7528\u5230\nwSectorNo           dw 0              ; \u7528\u4e8e\u4fdd\u5b58\u5f53\u524d\u6247\u533a\u6570\nbOdd                db 0              ; \u8fd9\u4e2a\u5176\u5b9e\u662f\u4e0b\u4e00\u8282\u7684\u4e1c\u897f\uff0c\u4e0d\u8fc7\u5148\u653e\u5728\u8fd9\u4e5f\u4e0d\u662f\u4e0d\u884c\n\nKernelFileName      db \"KERNEL  BIN\", 0 ; Kernel\u7684\u6587\u4ef6\u540d\n\nMessageLength       equ 9 ; \u4e0b\u9762\u662f\u4e09\u6761\u5c0f\u6d88\u606f\uff0c\u6b64\u53d8\u91cf\u7528\u4e8e\u4fdd\u5b58\u5176\u957f\u5ea6\uff0c\u4e8b\u5b9e\u4e0a\u5728\u5185\u5b58\u4e2d\u5b83\u4eec\u7684\u6392\u5e8f\u7c7b\u4f3c\u4e8e\u4e8c\u7ef4\u6570\u7ec4\nBootMessage:        db \"Loading  \" ; \u6b64\u5904\u5b9a\u4e49\u4e4b\u540e\u5c31\u53ef\u4ee5\u5220\u9664\u539f\u5148\u5b9a\u4e49\u7684BootMessage\u5b57\u7b26\u4e32\u4e86\nMessage1            db \"Ready.   \" ; \u663e\u793a\u5df2\u51c6\u5907\u597d\nMessage2            db \"No KERNEL\" ; \u663e\u793a\u6ca1\u6709Kernel\n\nDispStr:\n    mov ax, MessageLength\n    mul dh ; \u5c06ax\u4e58\u4ee5dh\u540e\uff0c\u7ed3\u679c\u4ecd\u7f6e\u5165ax\uff08\u4e8b\u5b9e\u4e0a\u8fdc\u6bd4\u6b64\u590d\u6742\uff0c\u6b64\u5904\u5148\u89e3\u91ca\u5230\u8fd9\u91cc\uff09\n    add ax, BootMessage ; \u627e\u5230\u7ed9\u5b9a\u7684\u6d88\u606f\n    mov bp, ax ; \u5148\u7ed9\u5b9a\u504f\u79fb\n    mov ax, ds\n    mov es, ax ; \u4ee5\u9632\u4e07\u4e00\uff0c\u91cd\u65b0\u8bbe\u7f6ees\n    mov cx, MessageLength ; \u5b57\u7b26\u4e32\u957f\u5ea6\n    mov ax, 01301h ; ah=13h, \u663e\u793a\u5b57\u7b26\u7684\u540c\u65f6\u5149\u6807\u79fb\u4f4d\n    mov bx, 0007h ; \u9ed1\u5e95\u767d\u5b57\n    mov dl, 0 ; \u7b2c0\u884c\uff0c\u524d\u9762\u6307\u5b9a\u7684dh\u4e0d\u53d8\uff0c\u6240\u4ee5\u7ed9\u5b9a\u7b2c\u51e0\u6761\u6d88\u606f\u5c31\u6253\u5370\u5230\u7b2c\u51e0\u884c\n    add dh, 3\n    int 10h ; \u663e\u793a\u5b57\u7b26\n    ret\n\nReadSector:\n    push bp\n    mov bp, sp\n    sub esp, 2 ; \u7a7a\u51fa\u4e24\u4e2a\u5b57\u8282\u5b58\u653e\u5f85\u8bfb\u6247\u533a\u6570\uff08\u56e0\u4e3acl\u5728\u8c03\u7528BIOS\u65f6\u8981\u7528\uff09\n\n    mov byte [bp-2], cl\n    push bx ; \u8fd9\u91cc\u4e34\u65f6\u7528\u4e00\u4e0bbx\n    mov bl, [BPB_SecPerTrk]\n    div bl ; \u6267\u884c\u5b8c\u540e\uff0cax\u5c06\u88ab\u9664\u4ee5bl\uff08\u6bcf\u78c1\u9053\u6247\u533a\u6570\uff09\uff0c\u8fd0\u7b97\u7ed3\u675f\u540e\u5546\u4f4d\u4e8eal\uff0c\u4f59\u6570\u4f4d\u4e8eah\uff0c\u90a3\u4e48al\u4ee3\u8868\u7684\u5c31\u662f\u603b\u78c1\u9053\u4e2a\u6570\uff08\u4e0b\u53d6\u6574\uff09\uff0cah\u4ee3\u8868\u7684\u662f\u5269\u4f59\u6ca1\u9664\u5f00\u7684\u6247\u533a\u6570\n    inc ah ; +1\u8868\u793a\u8d77\u59cb\u6247\u533a\uff08\u8fd9\u4e2a\u624d\u548cBIOS\u4e2d\u7684\u8d77\u59cb\u6247\u533a\u4e00\u4e2a\u610f\u601d\uff0c\u662f\u8bfb\u5165\u5f00\u59cb\u7684\u7b2c\u4e00\u4e2a\u6247\u533a\uff09\n    mov cl, ah ; \u6309\u7167BIOS\u6807\u51c6\u7f6e\u5165cl\n    mov dh, al ; \u7528dh\u6682\u5b58\u4f4d\u4e8e\u54ea\u4e2a\u78c1\u9053\n    shr al, 1 ; \u6bcf\u4e2a\u78c1\u9053\u4e24\u4e2a\u78c1\u5934\uff0c\u9664\u4ee52\u53ef\u5f97\u771f\u6b63\u7684\u67f1\u9762\u7f16\u53f7\n    mov ch, al ; \u6309\u7167BIOS\u6807\u51c6\u7f6e\u5165ch\n    and dh, 1 ; \u5bf9\u78c1\u9053\u6a212\u53d6\u4f59\uff0c\u53ef\u5f97\u4f4d\u4e8e\u54ea\u4e2a\u78c1\u5934\uff0c\u7ed3\u679c\u5df2\u7ecf\u7f6e\u5165dh\n    pop bx ; \u5c06bx\u5f39\u51fa\n    mov dl, [BS_DrvNum] ; \u5c06\u9a71\u52a8\u5668\u53f7\u5b58\u5165dl\n.GoOnReading: ; \u4e07\u4e8b\u4ff1\u5907\uff0c\u53ea\u6b20\u8bfb\u53d6\uff01\n    mov ah, 2 ; \u8bfb\u76d8\n    mov al, byte [bp-2] ; \u5c06\u4e4b\u524d\u5b58\u5165\u7684\u5f85\u8bfb\u6247\u533a\u6570\u53d6\u51fa\u6765\n    int 13h ; \u6267\u884c\u8bfb\u76d8\u64cd\u4f5c\n    jc .GoOnReading ; \u5982\u53d1\u751f\u9519\u8bef\u5c31\u7ee7\u7eed\u8bfb\uff0c\u5426\u5219\u8fdb\u5165\u4e0b\u9762\u7684\u6d41\u7a0b\n\n    add esp, 2\n    pop bp ; \u6062\u590d\u5806\u6808\n\n    ret\n\nGetFATEntry:\n    push es\n    push bx\n    push ax ; \u90fd\u4f1a\u7528\u5230\uff0cpush\u4e00\u4e0b\n    mov ax, BaseOfKernelFile ; \u83b7\u53d6Kernel\u7684\u57fa\u5740\n    sub ax, 0100h ; \u7559\u51fa4KB\u7a7a\u95f4\n    mov es, ax ; \u6b64\u5904\u5c31\u662f\u7f13\u51b2\u533a\u7684\u57fa\u5740\n    pop ax ; ax\u6211\u4eec\u5c31\u7528\u4e0d\u5230\u4e86\n    mov byte [bOdd], 0 ; \u8bbe\u7f6ebOdd\u7684\u521d\u503c\n    mov bx, 3\n    mul bx ; dx:ax=ax * 3\uff08mul\u7684\u7b2c\u4e8c\u91cd\u7528\u6cd5\uff1a\u5982\u6709\u8fdb\u4f4d\uff0c\u9ad8\u4f4d\u5c06\u653e\u5165dx\uff09\n    mov bx, 2\n    div bx ; dx:ax / 2 -&gt; dx\uff1a\u4f59\u6570 ax\uff1a\u5546\n; \u6b64\u5904* 1.5\u7684\u539f\u56e0\u662f\uff0c\u6bcf\u4e2aFAT\u9879\u5b9e\u9645\u5360\u7528\u7684\u662f1.5\u6247\u533a\uff0c\u6240\u4ee5\u8981\u628a\u8868\u9879 * 1.5\n    cmp dx, 0 ; \u6ca1\u6709\u4f59\u6570\n    jz LABEL_EVEN\n    mov byte [bOdd], 1 ; \u90a3\u5c31\u662f\u5947\u6570\u4e86\nLABEL_EVEN:\n    ; \u6b64\u65f6ax\u4e2d\u5e94\u5f53\u5df2\u7ecf\u5b58\u50a8\u4e86\u5f85\u67e5\u627eFAT\u76f8\u5bf9\u4e8eFAT\u8868\u7684\u504f\u79fb\uff0c\u4e0b\u9762\u6211\u4eec\u501f\u6b64\u6765\u67e5\u627e\u5b83\u7684\u6247\u533a\u53f7\n    xor dx, dx ; dx\u7f6e0\n    mov bx, [BPB_BytsPerSec]\n    div bx ; dx:ax / 512 -&gt; ax\uff1a\u5546\uff08\u6247\u533a\u53f7\uff09dx\uff1a\u4f59\u6570\uff08\u6247\u533a\u5185\u504f\u79fb\uff09\n    push dx ; \u6682\u5b58dx\uff0c\u540e\u9762\u8981\u7528\n    mov bx, 0 ; es:bx\uff1a(BaseOfKernelFile - 4KB):0\n    add ax, SectorNoOfFAT1 ; \u5b9e\u9645\u6247\u533a\u53f7\n    mov cl, 2\n    call ReadSector ; \u76f4\u63a5\u8bfb2\u4e2a\u6247\u533a\uff0c\u907f\u514d\u51fa\u73b0\u8de8\u6247\u533aFAT\u9879\u51fa\u73b0bug\n    pop dx ; \u7531\u4e8eReadSector\u672a\u4fdd\u5b58dx\u7684\u503c\u6240\u4ee5\u8fd9\u91cc\u4fdd\u5b58\u4e00\u4e0b\n    add bx, dx ; \u73b0\u5728\u6247\u533a\u5185\u5bb9\u5728\u5185\u5b58\u4e2d\uff0cbx+=dx\uff0c\u5373\u662f\u771f\u6b63\u7684FAT\u9879\n    mov ax, [es:bx] ; \u8bfb\u53d6\u4e4b\n\n    cmp byte [bOdd], 1\n    jnz LABEL_EVEN_2 ; \u662f\u5076\u6570\uff0c\u5219\u8fdb\u5165LABEL_EVEN_2\n    shr ax, 4 ; \u9ad84\u4f4d\u4e3a\u771f\u6b63\u7684FAT\u9879\nLABEL_EVEN_2:\n    and ax, 0FFFh ; \u53ea\u4fdd\u7559\u4f4e4\u4f4d\n\nLABEL_GET_FAT_ENRY_OK: ; \u80dc\u5229\u6267\u884c\n    pop bx\n    pop es ; \u6062\u590d\u5806\u6808\n    ret\n\nKillMotor: ; \u5173\u95ed\u8f6f\u9a71\u9a6c\u8fbe\n    push dx\n    mov dx, 03F2h ; \u8f6f\u9a71\u7aef\u53e3\n    mov al, 0 ; \u8f6f\u76d8\u9a71\u52a8\u5668\uff1a0\uff0c\u590d\u4f4d\u8f6f\u76d8\u9a71\u52a8\u5668\uff0c\u7981\u6b62DMA\u4e2d\u65ad\uff0c\u5173\u95ed\u8f6f\u9a71\u9a6c\u8fbe\n    out dx, al ; \u6267\u884c\n    pop dx\n    ret\n</code></pre></p> <p>\u4e4b\u6240\u4ee5\u5728\u6b64\u5904\u5173\u95ed\u8f6f\u9a71\u9a6c\u8fbe\u662f\u56e0\u4e3a\u540e\u9762\u6211\u4eec\u7528\u4e0d\u5230\u8f6f\u76d8\u4e86\u3002</p> <p>\u5f15\u5bfc\u6247\u533a\u5f00\u5934\u7684\u90e8\u5206\u4e5f\u505a\u4e86\u4e00\u70b9\u4fee\u6539\uff0c\u56e0\u4e3a <code>FAT12</code> \u7684\u90e8\u5206\u5df2\u7ecf\u62bd\u79bb\u51fa\u6765\u4e86\uff1a</p> <p>\u4ee3\u7801 5-3 \u5f15\u5bfc\u6247\u533a\u5f00\u5934\u90e8\u5206\uff08boot.asm\uff09 <pre><code>    jmp short LABEL_START\n    nop ; BS_JMPBoot \u7531\u4e8e\u8981\u4e09\u4e2a\u5b57\u8282\u800cjmp\u5230LABEL_START\u53ea\u6709\u4e24\u4e2a\u5b57\u8282 \u6240\u4ee5\u52a0\u4e00\u4e2anop\n\n%include \"fat12hdr.inc\"\n\nLABEL_START:\n</code></pre></p> <p>\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\uff1a</p> <p></p> <p>\uff08\u56fe 5-1 \u4e0d\u5b58\u5728Kernel\u65f6\u7684\u8fd0\u884c\u60c5\u51b5\uff09</p> <p>\u5c4f\u5e55\u4e2d\u51fa\u73b0\u4e86\u4e00\u884c <code>No KERNEL</code>\uff0c\u8fd9\u662f\u7406\u6240\u5e94\u5f53\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u751a\u81f3\u8fde\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u5185\u6838\u90fd\u6ca1\u6709\u5199\uff0c\u9a6c\u4e0a\u6765\u5199\u4e00\u4e2a\uff1a</p> <p>\u4ee3\u7801 5-4 \u6781\u7b80\u5185\u6838\u7a0b\u5e8f\uff08kernel.asm\uff09 <pre><code>[section .text]\n\nglobal _start\n\n_start: ; \u6b64\u5904\u5047\u8bbegs\u4ecd\u6307\u5411\u663e\u5b58\n    mov ah, 0Fh\n    mov al, 'K'\n    mov [gs:((80 * 1 + 39) * 2)], ax ; \u7b2c1\u884c\u6b63\u4e2d\u592e\uff0c\u767d\u8272K\n    jmp $ ; \u6b7b\u5faa\u73af\n</code></pre></p> <p>\u8fd9\u91cc\u597d\u50cf\u51fa\u73b0\u4e86\u5f88\u591a\u6211\u4eec\u4e4b\u524d\u7684\u6781\u7b80 Loader \u6ca1\u6709\u7684\u4e1c\u897f\uff0c\u8fd9\u4e2a <code>global</code> \u662f\u4ec0\u4e48\uff0c<code>section .text</code> \u53c8\u662f\u4ec0\u4e48\u4e1c\u897f\uff0c\u4e3a\u4ec0\u4e48\u4e00\u4e0a\u6765\u8fd8\u8981\u5b9a\u4e49\u4e00\u4e2a <code>_start</code>\uff1f</p> <p>\u8bf4\u5b9e\u8bdd\uff0c\u5176\u5b9e\u8fd9\u4e9b\u90fd\u548c\u73b0\u5728\u65e0\u5173\uff0c\u5b8c\u5168\u662f\u4e3a\u4e86\u4ee5\u540e\u7684\u8003\u8651\u3002\u524d\u56db\u8282\uff08\u5305\u62ec\u8fd9\u4e00\u8282\uff09\u6211\u4eec\u4e00\u76f4\u5728\u4f7f\u7528\u6c47\u7f16\uff0c\u4f46\u66f4\u591a\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4e3a\u4e86\u65b9\u4fbf\u7406\u89e3\u751a\u81f3\u4f1a\u4f7f\u7528 C \u8bed\u8a00\u8f6c\u5199\u3002\u5982\u679c\u672a\u6765\u80fd\u4f7f\u7528 C \u8bed\u8a00\uff0c\u4f1a\u4e0d\u4f1a\u65b9\u4fbf\u5f97\u591a\uff1f\u53ea\u662f\u53ef\u60dc\uff0c\u5982\u679c\u4e3a\u4e86\u65b9\u4fbf\uff0c\u7ee7\u7eed\u4f7f\u7528\u7eaf\u4e8c\u8fdb\u5236\u7684\u8bdd\uff0c\u5199 C \u6050\u6015\u4f1a\u5341\u5206\u590d\u6742\uff0c\u800c\u4e14\u4e0d\u4e00\u5b9a\u80fd\u591f\u6210\u529f\uff08\u8bf4\u591a\u4e86\u90fd\u662f\u6cea.jpg\uff09\u3002</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u4e3a\u5185\u6838\u5f15\u5165\u4e86\u4e00\u79cd\u53ef\u6267\u884c\u6587\u4ef6\u683c\u5f0f\uff08\u5f53\u7136\u4e0d\u662f\u6211\u81ea\u5df1\u5199\u7684\uff0c\u6211\u8fd8\u6ca1\u90a3\u4e2a\u672c\u4e8b\uff09\uff0c\u53eb\u505a ELF\uff0c\u5168\u79f0\u4e0d\u60f3\u5199\uff0c\u76ee\u524d\u5e7f\u6cdb\u5e94\u7528\u4e8e Linux \u4ee5\u53ca\u81ea\u5236\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff08\u9898\u5916\u8bdd\uff1a\u73b0\u5728\u7684\u81ea\u5236\u64cd\u4f5c\u7cfb\u7edf\u53ef\u6267\u884c\u6587\u4ef6\u57fa\u672c\u90fd\u662f ELF\uff0c\u5c11\u6570\u4f7f\u7528 PE\uff0c\u4e5f\u5c31\u662f\u5fae\u8f6f\u5bb6 exe \u6587\u4ef6\u7684\u683c\u5f0f\uff0c\u81ea\u521b\u683c\u5f0f\u7684\u51e0\u4e4e\u6ca1\u6709\uff09\u3002</p> <p>\u65e2\u7136\u6709 Linux \u6491\u8170\uff0c\u60f3\u8981\u7528\u5b83\u81ea\u7136\u5341\u5206\u5bb9\u6613\uff0c\u5728\u4e00\u5f00\u5934\u5c31\u4e0b\u8f7d\u4e86 <code>i686-elf-tools-windows.zip</code>\uff08\u6216\u8005 <code>i386-elf-gcc</code> for mac\uff0cLinux \u81ea\u5df1\u7684 <code>gcc</code> \u7f16\u8bd1\u51fa\u6765\u5c31\u662f ELF\uff09\uff0c\u7528\u5b83\u5305\u529e\u7f16\u8bd1\u548c\u94fe\u63a5\u5373\u53ef\u3002\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\uff0c\u5373\u53ef\u8f7b\u677e\u7f16\u8bd1\u51fa\u4e00\u4e2a ELF \u6765\uff08mac \u7528\u6237\u628a <code>i686</code> \u6539\u6210 <code>i386</code>\uff0clinux \u7528\u6237\u53bb\u6389 <code>i686-elf</code>\uff0c\u94fe\u63a5\u9009\u9879\u52a0\u4e0a <code>-m elf_i386</code>\uff09\u3002</p> <pre><code>nasm -f elf -o kernel.o kernel.asm\ni686-elf-ld -s -o kernel.bin kernel.o\n</code></pre> <p>\u5199\u5165\u7684\u547d\u4ee4\u4e5f\u8981\u6539\u4e00\u4e0b\uff1a <pre><code>edimg imgin:a.img copy from:loader.bin to:@: copy from:kernel.bin to:@: imgout:a.img\n</code></pre></p> <p>\u8fd9\u6837\u5c31\u628a <code>kernel.bin</code> \u4e5f\u7ed9\u5199\u5165\u5230\u78c1\u76d8\u91cc\u6765\u4e86\u3002</p> <p>\u5509\u5509\u5509\uff0c\u522b\u60f3\u907f\u91cd\u5c31\u8f7b\uff0c\u4f60\u8fd8\u6ca1\u89e3\u91ca\u90a3\u5806\u4e1c\u897f\u5230\u5e95\u662f\u4ec0\u4e48\u73a9\u610f\u5462\u3002</p> <p>uhh\uff0c\u597d\u5427\u3002<code>global _start</code> \u548c <code>_start:</code> \u662f\u7ed9\u94fe\u63a5\u5668\u770b\u7684\uff0c\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u544a\u8bc9\u94fe\u63a5\u5668\uff0cELF \u7a0b\u5e8f\u4ece\u8fd9\u91cc\u5f00\u59cb\u6267\u884c\uff08ELF \u7a0b\u5e8f\u7684\u9ed8\u8ba4\u5165\u53e3\u70b9\u90fd\u662f <code>_start</code>\uff0c\u8fd9\u662f\u4e00\u4e2a\u7ea6\u5b9a\u3002\u6216\u8bb8\u6709\u4eba\u4f1a\u95ee\uff1a\u201c\u90a3 <code>main</code> \u662f\u4ec0\u4e48\uff1f\u96be\u9053\u4e0d\u91cd\u8981\u5417\uff1f\u201d\u5176\u5b9e\u8fd8\u771f\u7684\u4e0d\u91cd\u8981\uff0c\u770b\u770b\u7b2c 23 \u8282\u6ca1\u51c6\u5c31\u80fd\u83b7\u5f97\u89e3\u7b54\uff09\u3002<code>section .text</code> \u662f\u7ed9 <code>ld</code> \u770b\u7684\uff0c\u8fd9\u6837 <code>ld</code> \u5c31\u4f1a\u77e5\u9053\u201c\u54e6\uff0c\u4e0b\u9762\u7684\u90e8\u5206\u90fd\u662f\u4ee3\u7801\u800c\u4e0d\u662f\u6570\u636e\u201d\uff0c\u4ece\u800c\u6b63\u786e\u8bbe\u7f6e ELF\u3002\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u80fd\u628a <code>section</code> \u653e\u8fdb\u4e2d\u62ec\u53f7\u8fd9\u79cd\u53d6\u5740\u7528\u7684\u4e1c\u897f\u91cc\uff0c\u636e\u8bf4\u662f\u4e00\u90e8\u5206\u4f2a\u6307\u4ee4\u7684\u7279\u6027\uff0c\u5e26\u4e0e\u4e0d\u5e26\u4e2d\u62ec\u53f7\u6709\u4e00\u4e9b\u5947\u5999\u7684\u4e0d\u540c\uff1b\u4e0d\u8fc7\u5728\u8fd9\u7bc7\u6559\u7a0b\u7684\u8bed\u5883\u4e0b\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u5b83\u4eec\u662f\u4e00\u6837\u7684\u3002</p> <p>\u518d\u6b21\u8fd0\u884c\uff0c\u7ed3\u679c\u5e94\u5982\u4e0b\u56fe\u6240\u793a\uff1a  \uff08\u56fe 5-2 \u5199\u5165\u5185\u6838\u4e4b\u540e\uff09</p> <p>\u5c4f\u5e55\u7b2c\u56db\u884c\u51fa\u73b0\u4e86 <code>Ready.</code>\uff0c\u610f\u5473\u7740\u6211\u4eec\u7684\u5185\u6838\u5df2\u7ecf\u88ab\u6210\u529f\u8bfb\u5165\u4e86\uff0c\u4e0b\u9762\u6211\u4eec\u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f\u5427\u3002\u5728\u4fdd\u62a4\u6a21\u5f0f\u4e2d\u6211\u4eec\u53ea\u505a\u4e24\u4ef6\u4e8b\uff1a\u91cd\u65b0\u653e\u7f6e\u5185\u6838\u5e76\u8fdb\u5165\u5185\u6838\uff0c\u4e5f\u5c31\u662f\u4e0b\u4e00\u8282\u7684\u5185\u5bb9\u3002</p> <p>\u9996\u5148\u6765\u8bf4\u4e00\u4e0b\uff0c\u4ec0\u4e48\u662f\u4fdd\u62a4\u6a21\u5f0f\uff1f\u4e00\u822c\u800c\u8a00\uff0c\u6211\u4eec\u8ba4\u4e3a\u53ea\u8981\u6709 GDT\u3001 <code>cs</code> \u662f GDT \u9009\u62e9\u5b50\u3001<code>cr0</code> \u5bc4\u5b58\u5668\u7684 PE \u4f4d\u662f 1 \u7684\u65f6\u5019\uff0c\u5f53\u524d CPU \u5c31\u5904\u4e8e\u4fdd\u62a4\u6a21\u5f0f\u3002\u81f3\u4e8e GDT \u548c <code>cr0</code> \u662f\u4ec0\u4e48\uff0c\u5c06\u5728\u63a5\u4e0b\u6765\u9610\u660e\u3002\u4fdd\u62a4\u6a21\u5f0f\u5206\u4e3a 16 \u4f4d\u548c 32 \u4f4d\u4e24\u79cd\uff0c\u4e0d\u8fc7 16 \u4f4d\u4fdd\u62a4\u6a21\u5f0f\u975e\u5e38\u5c11\u89c1\uff08\u4e5f\u4e0d\u662f\u4e0d\u53ef\u4ee5\uff0c\u53ea\u8981\u8bbe\u7f6e 16 \u4f4d\u4ee3\u7801\u6bb5\u548c\u6570\u636e\u6bb5\u5c31\u53ef\u4ee5\u4e86\uff0c\u4e00\u4e2a flag \u7684\u4e8b\uff09\uff0c\u540e\u6587\u9664\u975e\u7279\u522b\u6307\u660e\uff0c\u9ed8\u8ba4\u4fdd\u62a4\u6a21\u5f0f\u662f 32 \u4f4d\u7684\u3002</p> <p>\u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f\u603b\u5171\u5206\u4e3a <code>6</code> \u6b65\uff1a</p> <p>1.\u51c6\u5907 <code>GDT</code></p> <p>2.\u52a0\u8f7d <code>GDT</code>\uff08<code>lgdt</code>\uff09</p> <p>3.\u5173\u4e2d\u65ad</p> <p>4.\u6253\u5f00 <code>A20</code> \u5730\u5740\u7ebf</p> <p>5.\u5c06 <code>cr0</code> \u7684\u7b2c <code>0</code> \u4f4d\u7f6e <code>1</code>\uff08<code>PE</code> \u4f4d\uff09</p> <p>6.\u901a\u8fc7\u4e00\u4e2a <code>jmp</code> \u6307\u4ee4\u8fdb\u5165 <code>32</code> \u4f4d\u4ee3\u7801\u6bb5</p> <p>\u8fd9\u5176\u4e2d\u53c8\u51fa\u73b0\u4e86\u5f88\u591a\u751f\u8bcd\uff0c <code>A20</code> \u662f\u5565\uff0c\u4e2d\u65ad\u53c8\u662f\u4ec0\u4e48\uff1f\u518d\u52a0\u4e0a\u4e0a\u9762\u6316\u7684\u5751\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u4e00\u5757\u586b\u4e86\u3002</p> <p>\u9996\u5148\u662f <code>A20</code>\uff0c\u5b83\u662f\u4e00\u4e2a\u4ec0\u4e48\u4e1c\u897f\u5462\uff1f\u5728\u66fe\u7ecf\u7684 CPU \u91cc\uff0c\u4e00\u5171\u6709 20 \u6761\u5730\u5740\u7ebf\uff0c\u7f16\u53f7\u4e3a <code>A0</code>~<code>A19</code>\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8bbf\u95ee\u5230\u5171\u8ba1 2^20=1MB \u7684\u5185\u5b58\u3002\u4f46\u662f\uff0c\u540e\u6765\u5185\u5b58\u5927\u4e86\uff0c20 \u6839\u5730\u5740\u7ebf\u4e0d\u591f\u7528\u4e86\uff0c\u5230\u4e86 80286 \u65f6\u671f\uff0c\u53c8\u6da8\u5230 24 \u6839\uff0c\u8fd9\u5c31\u884d\u751f\u51fa\u4e86\u517c\u5bb9\u6027\u7684\u95ee\u9898\uff08\u4f60\u770b\uff0c\u53c8\u662f\u517c\u5bb9\uff09\uff1a\u65e9\u671f\u7684 CPU \u5bf9\u4e8e\u8d85\u8fc7 1MB \u7684\u5185\u5b58\u4f1a\u91cd\u65b0\u6307\u56de 0x00\uff0c\u6bd4\u5982\u8bbf\u95ee <code>FFFF:FFFF</code> \u5e76\u4e0d\u4f1a\u8bbf\u95ee\u5230\u9884\u60f3\u4e2d\u7684 <code>0x10FFEF</code>\uff0c\u800c\u662f\u4f1a\u6307\u56de <code>0xFFEF</code> \u53bb\u3002\u8fd9\u53c8\u6765\u4e86\u4e94\u6839\u5730\u5740\u7ebf\uff0c\u4e0d\u5c31\u9ebb\u70e6\u4e86\u4e48\uff1f</p> <p>intel \u9042\u91c7\u53d6\u4e00\u79cd\u7b28\u529e\u6cd5\uff0c\u65e2\u7136\u591a\u51fa\u6765\u8fd9\u4e00\u70b9\u4f1a\u5e26\u6765\u95ee\u9898\uff0c\u90a3\u6211\u627e\u4e2a\u5730\u65b9\uff0c\u628a\u65b0\u6765\u7684 <code>A20</code> \u4e00\u5173\uff0c\u4e0d\u5c31\u884c\u4e86\u4e48\uff1f\u4f60\u8bbe\u7f6e\u7684\u5730\u5740\u662f <code>0x100000</code>\uff0c\u4f46 A20 \u4e00\u5173\uff0c\u5b9e\u9645\u4e0a\u76f8\u5f53\u4e8e\u4e0d\u7ba1\u4f60\u7b2c 20 \u4f4d\u662f\u591a\u5c11\uff0c\u901a\u901a\u628a\u5b83\u5f53\u6210 0\uff0c\u4e8e\u662f 1MB \u53c8\u53d8\u56de\u4e86 <code>0x000000</code>\uff0c\u8fd9\u5c31\u66b4\u529b\u5730\u517c\u5bb9\u4e86\u4ee5\u5f80\u628a\u5185\u5b58\u6307\u56de\u53bb\u7684\u65b9\u6848\u300280286 \u8fd8\u662f 16 \u4f4d\uff0c\u6700\u5927\u8fd8\u662f <code>0x10FFEF</code> \u7684\u5185\u5b58\uff0c\u6240\u4ee5\u5173\u4e00\u4e2a A20 \u5c31\u591f\u4e86\uff1b\u4f46 80386 \u4ee5\u540e\u52a0\u4e86 32 \u4f4d\uff0c\u4ece\u800c\u53ef\u4ee5\u8bbf\u95ee 4GB \u5185\u5b58\uff0cA21~A31 \u6839\u672c\u6ca1\u4eba\u7ba1\uff0c\u4f46 A20 \u5374\u8fd8\u662f\u9ed8\u8ba4\u5173\u7740\uff0c\u53ea\u6709\u7b2c 20 \u4f4d\u53d7\u4f24\u7684\u4e16\u754c\u8fbe\u6210\u4e86\u3002\u5982\u679c\u76f4\u63a5\u8fdb\u5165 32 \u4f4d\u6a21\u5f0f\u800c\u4e0d\u53bb\u6253\u5f00 A20\uff0c\u90a3\u5c31\u76f8\u5f53\u4e8e 1-2MB\u30013-4MB\u30015-6MB \u7b49\u5185\u5b58\u7a7a\u95f4\u5b8c\u5168\u65e0\u6cd5\u8bbf\u95ee\uff0c\u56e0\u4e3a\u8fd9\u4e00\u4f4d CPU \u4e0d\u7ba1\uff0c\u6240\u4ee5\u4e3a\u4e86\u8bbf\u95ee\u5230\u5168\u90e8\u5185\u5b58\uff0c\u5fc5\u987b\u628a A20 \u6253\u5f00\u3002</p> <p>\u552f\u4e00\u7684\u95ee\u9898\u5c31\u662f\u628a A20 \u653e\u5728\u54ea\u5462\uff1f\u8bf7\u6b23\u8d4f\uff1a\u517c\u5bb9\u6027\u95ee\u9898\u7684\u7ec8\u6781\u89e3\u51b3\u65b9\u6848\uff0c\u952e\u76d8\u63a7\u5236\u5668\u2014\u2014\u8fd9\u91cc\u53ef\u8c13\u4eba\u6770\u5730\u7075\uff0c\u65e2\u8981\u7ba1\u7406\u952e\u76d8\uff0c\u53c8\u8981\u7ba1\u7406\u9f20\u6807\uff0c\u751a\u81f3\u53ef\u4ee5\u7528\u952e\u76d8\u91cd\u542f\u7535\u8111\uff0c\u603b\u4e4b\u4e0d\u5dee\u4f60\u4e00\u4e2a A20\u3002\u4e8e\u662f\uff0cintel \u5c31\u968f\u4fbf\u6252\u4e86\u4e00\u4e2a\u952e\u76d8\u7684\u7a7a\u4f59\u5f15\u811a\uff0c\u7528\u6765\u63a7\u5236 A20\u3002\u8fd9\u4e48\u641e\u552f\u4e00\u7684\u95ee\u9898\u5c31\u662f\u5b83\u5b9e\u5728\u592a\u6162\u4e86\uff0c\u4e8e\u662f\u53c8\u884d\u751f\u51fa\u66f4\u591a\u6253\u5f00 A20 \u7684\u65b9\u6848\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u4f7f\u7528 <code>int 15h</code> \u7684\u6269\u5c55\uff0c\u4ee5\u53ca\u8bbf\u95ee\u5176\u4ed6\u7aef\u53e3\u7b49\u3002\u6211\u4eec\u4f7f\u7528\u7684\u662f <code>0x92</code> \u7aef\u53e3\u6cd5\uff0c\u8fd9\u4e2a\u7aef\u53e3\u5185\u7684\u6570\u503c\uff0c\u7b2c\u4e8c\u4f4d\u662f 1\uff0c\u5219\u8868\u793a\u5f00\u542f A20\u3002</p> <p>\u7136\u540e\u662f <code>GDT</code>\uff08\u5168\u5c40\u63cf\u8ff0\u7b26\u8868\uff09\uff0c\u5b83\u4e0e 32 \u4f4d\u4fdd\u62a4\u6a21\u5f0f\u4e0b\u7684\u5185\u5b58\u5bfb\u5740\u5bc6\u5207\u76f8\u5173\u300232 \u4f4d\u4fdd\u62a4\u6a21\u5f0f\u6700\u5927\u6709 <code>32</code> \u4f4d\u7684\u53d8\u91cf\uff0c\u56e0\u6b64\u53ef\u4ee5\u6307\u5411 <code>4GB</code> \u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u76f8\u6bd4\u539f\u5148\u7684 <code>1MB</code> \u5df2\u6709\u4e86\u5f88\u5927\u63d0\u5347\u3002\u800c\u539f\u5148\u6bb5:\u504f\u79fb\u7684\u5bfb\u5740\u65b9\u6848\u4ecd\u7136\u9002\u7528\uff0c\u4f46\u6b64\u65f6\u7684\u6bb5\u5bc4\u5b58\u5668\u503c\u5df2\u7ecf\u4e0d\u518d\u662f\u5730\u5740\u7684\u4e00\u90e8\u5206\uff0c\u800c\u662f\u4e00\u79cd\u540d\u53eb\u9009\u62e9\u5b50\u7684\u9b3c\u4e1c\u897f\uff0c\u540e\u9762\u518d\u8c08\u3002</p> <p><code>GDT</code> \u7684\u8868\u9879\u5c31\u6ca1\u6709\u8fd9\u4e48\u7b80\u5355\u4e86\uff0c\u5b83\u88ab\u79f0\u4e3a\u63cf\u8ff0\u7b26\u3002\u4e0b\u56fe\u662f\u4e00\u4e2a\u63cf\u8ff0\u7b26\u7ed3\u6784\u7684\u7b80\u56fe\uff08\u8282\u9009\u81ea\u300aOrange'S\uff1a\u4e00\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u7684\u5b9e\u73b0\u300b\uff09\uff1a</p> <p></p> <p>\uff08\u56fe 5-3 <code>GDT</code> \u63cf\u8ff0\u7b26\u7ed3\u6784\uff09</p> <p>\u7c97\u770b\u4e00\u773c\u5c31\u77e5\u9053\uff0c\u7b2c 5\u30016 \u5b57\u8282\u7684\u8fd9\u4e9b\u5c5e\u6027\u4e5f\u597d\uff0c\u6bb5\u57fa\u5740\u548c\u6bb5\u754c\u9650\u7684\u5b58\u653e\u4f4d\u7f6e\u4e5f\u7f62\uff0c\u90fd\u662f\u9700\u8981\u5355\u72ec\u5b58\u653e\u7684\u3002\u4e0b\u9762\u662f\u5b83\u4eec\u7684\u58f0\u660e\uff1a</p> <p>\u4ee3\u7801 5-5 \u4fdd\u62a4\u6a21\u5f0f\u4e0b\u6bb5\u5c5e\u6027\u4e4b\u7c7b\u7684\u58f0\u660e\uff08pm.inc\uff09 <pre><code>DA_32       EQU 4000h\nDA_LIMIT_4K EQU 8000h\n\nDA_DPL0     EQU 00h\nDA_DPL1     EQU 20h\nDA_DPL2     EQU 40h\nDA_DPL3     EQU 60h\n\nDA_DR       EQU 90h\nDA_DRW      EQU 92h\nDA_DRWA     EQU 93h\nDA_C        EQU 98h\nDA_CR       EQU 9Ah\nDA_CCO      EQU 9Ch\nDA_CCOR     EQU 9Eh\n\nDA_LDT      EQU 82h\nDA_TaskGate EQU 85h\nDA_386TSS   EQU 89h\nDA_386CGate EQU 8Ch\nDA_386IGate EQU 8Eh\nDA_386TGate EQU 8Fh\n\nSA_RPL0     EQU 0\nSA_RPL1     EQU 1\nSA_RPL2     EQU 2\nSA_RPL3     EQU 3\n\nSA_TIG      EQU 0\nSA_TIL      EQU 4\n\nPG_P        EQU 1\nPG_RWR      EQU 0\nPG_RWW      EQU 2\nPG_USS      EQU 0\nPG_USU      EQU 4\n\n%macro Descriptor 3\n    dw %2 &amp; 0FFFFh\n    dw %1 &amp; 0FFFFh\n    db (%1 &gt;&gt; 16) &amp; 0FFh\n    dw ((%2 &gt;&gt; 8) &amp; 0F00h) | (%3 &amp; 0F0FFh)\n    db (%1 &gt;&gt; 24) &amp; 0FFh\n%endmacro\n\n%macro Gate 4\n    dw (%2 &amp; 0FFFFh)\n    dw %1\n    dw (%3 &amp; 1Fh) | ((%4 &lt;&lt; 8) &amp; 0FF00h)\n    dw ((%2 &gt;&gt; 16) &amp; 0FFFFh)\n%endmacro\n</code></pre></p> <p>\u4e0a\u9762\u7528\u4e86\u4e00\u5806 <code>equ</code> \u7684\u8bed\u6cd5\u7684\u90e8\u5206\u90fd\u662f\u786c\u4ef6\u89c4\u7a0b\u3002<code>equ</code> \u672c\u8d28\u4e0a\u76f8\u5f53\u4e8e C++ \u91cc\u7684 <code>#define</code>\uff0c\u5373\uff1a<code>#define DA_32 0x4000</code> \u4e4b\u7c7b\u7684\u3002\uff08<code>nasm</code> \u91cc\u4e5f\u6709 <code>%define</code>\uff0c\u4f46\u662f\u7528\u5f97\u597d\u50cf\u5f88\u5c11\uff0c\u90fd\u88ab <code>equ</code> \u548c <code>%macro</code> \u7ed9\u5305\u4e86\uff09\u9664\u6b64\u4e4b\u5916\uff0c\u552f\u4e00\u9700\u8981\u89e3\u91ca\u7684\u53ef\u80fd\u5c31\u662f <code>Descriptor</code> \u8fd9\u4e00\u5757\u4e86\uff08<code>Gate</code> \u5b8f\u6839\u672c\u6ca1\u6709\u7528\u5230\uff0c\u6240\u4ee5\u4e5f\u5c31\u4e0d\u7ba1\u5b83\uff09\u3002</p> <p>\u4ece\u4e0b\u9762\u7684\u4ee3\u7801\u53ef\u77e5\uff0c<code>Descriptor</code> \u7684\u7528\u6cd5\u662f\uff1a<code>Descriptor xxx, xxx, xxx</code>\u3002\u518d\u7531\u524d\u6587\u53ef\u4ee5\u77e5\u9053\uff0c\u6587\u672c\u6a21\u5f0f\u663e\u5b58\u57fa\u5740\u662f <code>0xb8000</code>\uff0c\u4e0e\u663e\u5b58\u6bb5\u4e00\u5bf9\u6bd4\uff0c\u663e\u7136\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6bb5\u57fa\u5740\u3002\u7b2c\u4e09\u4e2a\u53c2\u6570\u5168\u662f\u5404\u79cd <code>DA_</code> \u6df7\u5408\u5728\u4e00\u5757\uff0c\u663e\u7136\u662f\u6bb5\u5c5e\u6027\uff0c\u4e5f\u5c31\u662f GDT \u63cf\u8ff0\u7b26\u7ed3\u6784\u90a3\u4e2a\u56fe\u91cc\uff0cBYTE6 \u548c BYTE5 \u53bb\u6389\u6bb5\u754c\u9650\u7684\u90a3\u4e00\u90e8\u5206\u3002\u800c\u5269\u4e0b\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u4e5f\u5c31\u53ea\u80fd\u662f\u6bb5\u754c\u9650\u4e86\u3002\u7528\u8fd9\u4e2a\u5b8f\u6700\u5927\u7684\u597d\u5904\uff0c\u65e0\u7591\u662f\u7b80\u5316\u4e86\u63cf\u8ff0\u7b26\u7684\u5b9a\u4e49\uff0c\u770b\u770b\u5176\u4ed6\u7684\u6559\u7a0b\u548c\u4e66\u91cc\u662f\u600e\u4e48\u5b9a\u4e49\u63cf\u8ff0\u7b26\u7684\u5c31\u77e5\u9053\u4e86\uff0c\u4ed6\u4eec\u8fd8\u5728\u786c\u51f9\u6570\u4f4d\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5df2\u7ecf\u7528\u4e0a\u5982\u6b64\u65b9\u4fbf\u7684\u5b8f\u4e86\u2026\u2026\uff08\u7b11\uff09\u4e0d\u8fc7\u8fd9\u4e2a\u5b8f\u4e5f\u4e0d\u662f\u7b14\u8005\u7684\u52b3\u52a8\u6210\u679c\uff0c\u5982\u6b64\u81ea\u5938\u6015\u662f\u4e0d\u592a\u597d\u3002 \uff08\u524d\u516d\u8282\u5185\u5bb9\u5747\u57fa\u4e8e\u300aOrange'S\uff1a\u4e00\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u7684\u5b9e\u73b0\u300b\uff0c\u6709\u80fd\u529b\u652f\u6301\u539f\u4f5c\u55b5\u3002\u81f3\u5c11\u5c31\u524d\u516d\u8282\u800c\u8a00\uff0c\u76f8\u5f53\u4e8e\u8fd9\u672c\u4e66\u7684\u4e8c\u521b\u4e86\u3002\uff09</p> <p>\u8fd9\u4e2a\u5b8f\u600e\u4e48\u5c31\u80fd\u5b9a\u4e49\u51fa\u4e00\u4e2a\u63cf\u8ff0\u7b26\u5462\uff1f\u5148\u5f97\u89e3\u91ca\u8fd9\u4e2a\u5947\u602a\u7684\u8bed\u6cd5\u3002\u8fd9\u4e2a\u4e1c\u897f\u662f\u6c47\u7f16\u91cc\u7684\u5b8f\uff0c\u548c C \u8bed\u8a00\u4e2d\u7684 <code>#define</code> \u975e\u5e38\u76f8\u4f3c\u3002\u7b2c\u4e00\u884c\u7684 <code>%macro</code> \u8868\u793a\u5b8f\u5f00\u59cb\uff0c<code>Descriptor</code> \u4e3a\u5b8f\u540d\uff0c<code>4</code> \u4e3a\u63a5\u6536\u53c2\u6570\u6570\u91cf\uff0c\u63a5\u6536\u7684\u53c2\u6570\u4ece <code>%1</code> \u5f00\u59cb\u9010\u6e10\u9012\u589e\u8868\u793a\u3002</p> <p>\u63a5\u4e0b\u6765\u8fd9\u4e00\u90e8\u5206\uff0c\u4e00\u76f4\u5230 <code>%endmacro</code> \u4e3a\u6b62\uff0c\u5c31\u662f\u5b8f\u7684\u672c\u4f53\u4e86\uff0c\u91cc\u9762\u662f\u7eaf\u7cb9\u7684\u4f4d\u8fd0\u7b97\u3002\u6700\u540e\u662f\u4e00\u4e2a <code>%endmacro</code>\uff0c\u8868\u793a\u5b8f\u7ed3\u675f\u3002\u8fd9\u91cc\u7684\u5b8f\u5c31\u662f\u7eaf\u7cb9\u7684\u6587\u672c\u66ff\u6362\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c<code>Descriptor 0, 0, 0</code> \u4f1a\u88ab\u66ff\u6362\u4e3a\uff1a</p> <pre><code>    dw 0 &amp; 0FFFFh\n    dw 0 &amp; 0FFFFh\n    db (0 &gt;&gt; 16) &amp; 0FFh\n    dw ((0 &gt;&gt; 8) &amp; 0F00h) | (0 &amp; 0F0FFh)\n    db (0 &gt;&gt; 24) &amp; 0FFh\n</code></pre> <p>\u4ec0\u4e48\uff0c\u6c47\u7f16\u5c45\u7136\u6709\u8fd9\u4e48\u65b9\u4fbf\u7684\u4f4d\u8fd0\u7b97\uff1f\u90a3\u7b2c\u56db\u8282 <code>shr</code>\u3001<code>and</code> \u534a\u5929\u5728\u5e72\u4ec0\u4e48\u5462\uff1f</p> <p>\u4e8b\u5b9e\u4e0a\uff0c\u53ea\u6709\u5728\u7f16\u8bd1\u671f\u95f4\u53ef\u4ee5\u88ab\u8ba1\u7b97\u7684\u91cf\uff0c\u624d\u80fd\u591f\u7528\u4e0a\u8fd9\u4e48\u65b9\u4fbf\u7684\u4e1c\u897f\uff0c\u5177\u4f53\u800c\u8a00\uff0c\u6709\u4e14\u53ea\u6709\u5e38\u6570\u548c\u6807\u7b7e\u5bf9\u5e94\u7684\u5730\u5740\u662f\u53ef\u4ee5\u5728\u7f16\u8bd1\u671f\u7acb\u5373\u77e5\u9053\u7684\u3002\u4f60\u8981\u662f\u60f3\u5bf9\u4e00\u4e2a\u5bc4\u5b58\u5668\u505a\u8fd9\u4e9b\uff0c\u6ca1\u95e8\uff0c\u7528 x86 \u6307\u4ee4\u53bb\uff1b\u5bf9\u5185\u5b58\uff0c\u66f4\u6ca1\u95e8\uff0c\u8fd9\u5757\u5730\u65b9\u90fd\u4e0d\u77e5\u9053\u662f\u4e0d\u662f\u5f52\u5185\u5b58\u7ba1\uff08\u6709\u7684\u5916\u8bbe\u4f1a\u5728\u5185\u5b58\u91cc\u5f00\u8f9f\u4e00\u6bb5\u7a7a\u95f4\u6765\uff0c\u9a71\u52a8\u7a0b\u5e8f\u901a\u8fc7\u8bfb\u5199\u8fd9\u6bb5\u5185\u5b58\u4e0e\u5916\u8bbe\u4ea4\u4e92\uff09\uff0c\u54ea\u80fd\u968f\u4fbf\u8ba9\u4f60\u7b97\u4e86\u3002</p> <p>\u597d\u4e86\uff0c\u8bdd\u8bf4\u56de\u6765\uff0c\u6211\u4eec\u6765\u770b\u770b\u8fd9\u4e94\u884c\u90fd\u5728\u5e72\u4ec0\u4e48\u3002</p> <p>\u9996\u5148\u5199\u5165\u4e24\u4e2a\u5b57\u8282\u7684\u6bb5\u754c\u9650\u4f4e 16 \u4f4d\uff08<code>%2</code> \u662f\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8868\u6bb5\u754c\u9650\uff09\uff0c\u7136\u540e\u662f\u4e24\u4e2a\u5b57\u8282\u7684\u6bb5\u57fa\u5740\u4f4e 16 \u4f4d\uff08<code>%1</code> \u662f\u7b2c\u4e00\u4e2a\u53c2\u6570\u8868\u6bb5\u57fa\u5740\uff09\uff0c\u518d\u5f80\u4e0b\u662f\u4e00\u4e2a\u5b57\u8282\u7684\u6bb5\u57fa\u5740\u7b2c 16-23 \u4f4d\u3002\u4e0e\u4e0a\u9762\u7684\u56fe\u5bf9\u7167\uff0c\u6b63\u597d\u662f BYTE0~BYTE4 \u7684\u5185\u5bb9\u3002</p> <p>\u63a5\u4e0b\u6765\u7684 BYTE5 \u5230 BYTE6\uff0c\u7528\u4e86\u4e00\u4e2a <code>dw</code> \u6765\u5199\u5165\u3002\u9996\u5148\u628a\u6bb5\u754c\u9650\u53f3\u79fb 8 \u4f4d\uff0c\u628a\u539f\u6765\u7b2c 16~19 \u4f4d\u7684\u4f4d\u7f6e\u53d8\u6210\u7b2c 8~11 \u4f4d\uff0c\u4e5f\u5c31\u662f\u5728 BYTE5~BYTE6 \u4e2d\u5b83\u5b9e\u9645\u5728\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u7528\u4e0e\u8fd0\u7b97\u628a\u9664\u4e86\u8fd9\u56db\u4f4d\u4ee5\u5916\u7684\u90e8\u5206\u90fd\u8bbe\u7f6e\u6210 0\u3002\u540e\u9762\u5219\u662f\u628a\u7b2c\u4e09\u4e2a\u53c2\u6570\u91cc\uff0c\u628a\u6bb5\u754c\u9650\u5360\u9886\u7684\u90e8\u5206\u53d8\u6210 0\uff0c\u6700\u540e\u628a\u4e24\u4e2a\u90e8\u5206\u6216\u5728\u4e00\u8d77\uff0c\u62fc\u6210\u4e00\u4e2a\u5b8c\u6574\u7684 BYTE5~BYTE6\u3002\u6700\u540e\u662f\u6bb5\u57fa\u5740\u7684\u9ad8 8 \u4f4d\uff0c\u5199\u5728 BYTE7\u3002\u4e8e\u662f\uff0c\u8fd9\u4e9b\u4f4d\u8fd0\u7b97\u5c31\u8fd9\u6837\u628a\u539f\u6765\u7684\u4e09\u4e2a\u53c2\u6570\u62fc\u6210\u4e86\u5185\u5b58\u91cc 8 \u5b57\u8282\u7684\u63cf\u8ff0\u7b26\u3002</p> <p>\u4e0b\u4e00\u6b65\u5c31\u662f\u5177\u4f53\u89e3\u91ca\u4e00\u4e0b\u8fd9\u4e2a\u6bb5\u5bc4\u5b58\u5668\u91cc\u7684\u503c\u4e0e <code>GDT</code> \u63cf\u8ff0\u7b26\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u4e2a\u6bb5\u503c\u4e5f\u88ab\u79f0\u4e3a\u9009\u62e9\u5b50\uff0c\u4e0b\u9762\u662f\u9009\u62e9\u5b50\u7684\u7ed3\u6784\u7b80\u56fe\uff08\u540c\u6837\u8282\u9009\u81ea\u300aOrange'S\u300b\uff09\uff1a</p> <p></p> <p>\uff08\u56fe 5-4 \u9009\u62e9\u5b50\u7ed3\u6784\uff09</p> <p>\u5f53 <code>TI</code> \u548c <code>RPL</code> \u5747\u4e3a0\u65f6\uff0c\u4e0d\u96be\u53d1\u73b0\uff0c\u6b64\u65f6\u7684\u6574\u4e2a\u9009\u62e9\u5b50\u5c31\u662f\u5b83\u5bf9\u5e94\u7684\u63cf\u8ff0\u7b26\u7684\u504f\u79fb\uff08\u4e00\u4e2a GDT \u5360 8 \u5b57\u8282\u3002\u4e8b\u5b9e\u4e0a\u4e5f\u6b63\u662f\u56e0\u4e3a\u4e00\u4e2a GDT \u5360 8 \u5b57\u8282\uff0cintel \u624d\u6562\u5728\u4f4e\u4e09\u4f4d\u585e\u70b9\u79c1\u8d27\uff09\u3002\u8fd9\u4e24\u4e2a\u5c0f\u90e8\u5206\u7684\u4f5c\u7528\u540e\u9762\u8fd8\u4f1a\u63d0\u53ca\uff0c\u5230\u7b2c 22 \u8282\u6211\u4eec\u518d\u63ed\u6653\u3002</p> <p>\u90a3\u4e48\u4e0b\u4e00\u4e2a\u90e8\u5206\u81ea\u7136\u5c31\u662f <code>lgdt</code> \u4e86\uff0c\u6211\u4eec\u9700\u8981\u628a\u4e0b\u9762\u7684\u7ed3\u6784\u5199\u5165 <code>gdtr</code> \u5bc4\u5b58\u5668\uff1a</p> <p></p> <p>\uff08\u56fe 5-5 <code>gdtr</code> \u7ed3\u6784\uff09</p> <p>\u8fd9\u4e2a\u4e5f\u4e0d\u96be\u7406\u89e3\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6309\u7167\u4e0a\u56fe\u4e2d\u7684\u7ed3\u6784\u5199\u5165\u5c31\u53ef\u4ee5\u4e86\u3002\u552f\u4e00\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u4e00\u6bb5\u5185\u5b58\u4f1a\u5728\u4fdd\u62a4\u6a21\u5f0f\u4e0b\u88ab\u8bbf\u95ee\uff0c\u6240\u4ee5\u5199\u6c47\u7f16\u65f6\u6709 16 \u4f4d\u610f\u4e49\u4e0b\u6bb5\u7684\u76f8\u5bf9\u5730\u5740\uff0c\u8981\u88ab\u8f6c\u5316\u4e3a\u539f\u6765\u7684\u6bb5\u57fa\u5740\u4e58\u4ee5 16 \u518d\u52a0\u4e0a\u76f8\u5bf9\u5730\u5740\u7684\u7edd\u5bf9\u5730\u5740\u3002</p> <p>\u4e0b\u4e00\u6b65\u5c31\u662f\u5173\u4e2d\u65ad\u4e86\u3002\u4e2d\u65ad\u7684\u5177\u4f53\u5185\u5bb9\u6211\u4eec\u653e\u5230\u540e\u9762\u7b2c 9\u300110 \u8282\u89e3\u91ca\uff0c\u6b64\u5904\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u5bf9\u4e8e\u8fd9\u4e2a\u4e1c\u897f\u7684\u5904\u7406\u4fdd\u62a4\u6a21\u5f0f\u53e6\u6709\u5b89\u6392\uff0c\u56e0\u6b64\u4e3a\u4e86\u4ee5\u540e\u7684\u91cd\u65b0\u8bbe\u7f6e\uff0c\u6b64\u5904\u6682\u65f6\u5173\u95ed\u3002</p> <p>\u6700\u540e\u4fbf\u662f <code>cr0</code>\uff0c\u5b83\u5c5e\u4e8e\u63a7\u5236\u5bc4\u5b58\u5668\uff08Control Register\uff09\uff0c\u5171\u6709\u56db\u4e2a\uff08cr0+cr2~4\uff09\u3002\u4e0b\u9762\u662f <code>cr0</code> \u7684\u7ed3\u6784\uff1a</p> <p></p> <p>\uff08\u56fe 5-6 <code>cr0</code> \u7ed3\u6784\uff09</p> <p>\u53ef\u4ee5\u770b\u5230\uff0c<code>cr0</code> \u7684\u6700\u4f4e\u4f4d\u5c31\u662f <code>PE</code> \u4f4d\uff0c\u5b83\u7684\u542b\u4e49\u662f\uff1a\u5f53\u5b83\u4e3a <code>1</code> \u65f6\uff0c\u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f\uff0c\u5f53\u5b83\u4e3a <code>0</code> \u65f6\uff0c\u4e3a\u5b9e\u6a21\u5f0f\u3002</p> <p>\u6700\u540e\u4e00\u6b65\uff0c\u662f\u4e00\u4e2a\u8df3\u8f6c\uff0c\u8df3\u8f6c\u5b8c\u540e\u8fdb\u5165 <code>32</code> \u4f4d\u4ee3\u7801\u6bb5\uff0c\u771f\u6b63\u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f\u3002\u8fd9\u4e00\u6bb5\u542c\u8d77\u6765\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u5b9e\u73b0\u4e0a\u5b83\u5374\u5fc5\u987b\u653e\u5728 <code>16</code> \u4f4d\u7684\u4ee3\u7801\u6bb5\u5185\uff0c\u5fc5\u7136\u9700\u8981\u6709\u4e00\u79cd\u65b9\u6cd5\u6765\u58f0\u660e\u5b83\u8981\u8df3\u5165 <code>32</code> \u4f4d\u4ee3\u7801\u6bb5\u3002\u6211\u4eec\u7684 <code>nasm</code> \u7f16\u8bd1\u5668\u63d0\u4f9b\u4e86 <code>jmp dword</code> \u7684\u65b9\u6848\uff0c\u5176\u4f5c\u7528\u6b63\u662f\u5982\u6b64\u3002</p> <p>\u90a3\u4e48\u4ee5\u4e0a\u90e8\u5206\u6211\u4eec\u5c31\u9610\u8ff0\u6e05\u695a\u4e86\uff0c\u5982\u679c\u60a8\u4e0d\u660e\u767d\u7684\u8bdd\uff0c\u770b\u4e0b\u9762\u7684\u4ee3\u7801\u5927\u81f4\u5c31\u80fd\u660e\u767d\u4e86\uff0c\u5b83\u4eec\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\u4f4d\u4e8e <code>LABEL_START</code> \u4e4b\u524d\uff1a</p> <p>\u4ee3\u7801 5-6 <code>GDT</code> \u8868\u7ed3\u6784\uff08loader.asm\uff09 <pre><code>LABEL_GDT:          Descriptor 0,            0, 0                            ; \u5360\u4f4d\u7528\u63cf\u8ff0\u7b26\nLABEL_DESC_FLAT_C:  Descriptor 0,      0fffffh, DA_C | DA_32 | DA_LIMIT_4K   ; 32\u4f4d\u4ee3\u7801\u6bb5\uff0c\u5e73\u5766\u5185\u5b58\nLABEL_DESC_FLAT_RW: Descriptor 0,      0fffffh, DA_DRW | DA_32 | DA_LIMIT_4K ; 32\u4f4d\u6570\u636e\u6bb5\uff0c\u5e73\u5766\u5185\u5b58\nLABEL_DESC_VIDEO:   Descriptor 0B8000h, 0ffffh, DA_DRW | DA_DPL3             ; \u6587\u672c\u6a21\u5f0f\u663e\u5b58\uff0c\u540e\u9762\u7528\u4e0d\u5230\u4e86\n\nGdtLen equ $ - LABEL_GDT                                                    ; GDT\u7684\u957f\u5ea6\nGdtPtr dw GdtLen - 1                                                        ; gdtr\u5bc4\u5b58\u5668\uff0c\u5148\u653e\u7f6e\u957f\u5ea6\n       dd BaseOfLoaderPhyAddr + LABEL_GDT                                   ; \u4fdd\u62a4\u6a21\u5f0f\u4f7f\u7528\u7ebf\u6027\u5730\u5740\uff0c\u56e0\u6b64\u9700\u8981\u52a0\u4e0a\u7a0b\u5e8f\u88c5\u8f7d\u4f4d\u7f6e\u7684\u7269\u7406\u5730\u5740\uff08BaseOfLoaderPhyAddr\uff09\n\nSelectorFlatC       equ LABEL_DESC_FLAT_C  - LABEL_GDT                      ; \u4ee3\u7801\u6bb5\u9009\u62e9\u5b50\nSelectorFlatRW      equ LABEL_DESC_FLAT_RW - LABEL_GDT                      ; \u6570\u636e\u6bb5\u9009\u62e9\u5b50\nSelectorVideo       equ LABEL_DESC_VIDEO   - LABEL_GDT + SA_RPL3            ; \u6587\u672c\u6a21\u5f0f\u663e\u5b58\u9009\u62e9\u5b50\n</code></pre></p> <p>\u4e0a\u8ff0\u4ee3\u7801\u5b9a\u4e49\u4e86 <code>gdt</code> \u7684\u540c\u65f6\uff0c\u4e5f\u5b9a\u4e49\u4e86 <code>gdtr</code> \u548c\u9009\u62e9\u5b50\u3002\u4e0d\u8fc7\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u5176\u4e2d\u6211\u4eec\u7528\u5230\u4e86 <code>BaseOfLoaderPhyAddr</code>\uff0c\u5b83\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <p>\u4ee3\u7801 5-7 \u65b0\u5e38\u91cf\uff08load.inc\uff09 <pre><code>BaseOfLoader            equ 09000h ; Loader\u7684\u57fa\u5740\nOffsetOfLoader          equ 0100h  ; Loader\u7684\u504f\u79fb\n\nBaseOfLoaderPhyAddr     equ BaseOfLoader * 10h ; Loader\u88ab\u88c5\u8f7d\u5230\u7684\u7269\u7406\u5730\u5740\n\nBaseOfKernelFile            equ 08000h ; Kernel\u7684\u57fa\u5740\nOffsetOfKernelFile          equ 0h  ; Kernel\u7684\u504f\u79fb\n</code></pre></p> <p>\u7531\u4e8e\u628a <code>BaseOfLoader</code> \u548c <code>OffsetOfLoader</code> \u4e5f\u7ed9\u642c\u8fdb\u6765\u4e86\uff0c<code>boot.asm</code> \u4e2d\u7684\u8fd9\u4e00\u90e8\u5206\u5c31\u53ef\u4ee5\u5220\u9664\u4e86\u3002\u56e0\u6b64\uff0c\u5f15\u5bfc\u6247\u533a\u548c <code>loader</code> \u7684\u524d\u9762\u51e0\u884c\u4e5f\u5e94\u5f53\u76f8\u5e94\u505a\u51fa\u66f4\u6539\uff1a</p> <p>\u4ee3\u7801 5-8 \u5f15\u5bfc\u6247\u533a\u5934\u90e8\uff08boot.asm\uff09 <pre><code>    org 07c00h ; \u544a\u8bc9\u7f16\u8bd1\u5668\u7a0b\u5e8f\u5c06\u88c5\u8f7d\u81f30x7c00\u5904\n\nBaseOfStack             equ 07c00h ; \u6808\u7684\u57fa\u5740\n\n    jmp short LABEL_START\n    nop ; BS_JMPBoot \u7531\u4e8e\u8981\u4e09\u4e2a\u5b57\u8282\u800cjmp\u5230LABEL_START\u53ea\u6709\u4e24\u4e2a\u5b57\u8282 \u6240\u4ee5\u52a0\u4e00\u4e2anop\n\n%include \"fat12hdr.inc\"\n%include \"load.inc\"\n</code></pre></p> <p>\u4ee3\u7801 5-9 Loader\u5934\u90e8\uff08loader.asm\uff09 <pre><code>    org 0100h ; \u544a\u8bc9\u7f16\u8bd1\u5668\u7a0b\u5e8f\u5c06\u88c5\u8f7d\u81f30x100\u5904\n\nBaseOfStack                 equ 0100h ; \u6808\u7684\u57fa\u5740\n\n    jmp LABEL_START\n\n%include \"fat12hdr.inc\"\n%include \"load.inc\"\n%include \"pm.inc\"\n</code></pre></p> <p>\u7ecf\u8fc7\u4e00\u756a\u6574\u7406\uff0c\u867d\u7136\u7b80\u5316\u4e86\u4e00\u70b9\u4ee3\u7801\uff0c\u4f46\u522b\u5fd8\u4e86\u6211\u4eec\u6700\u539f\u59cb\u7684\u76ee\u6807\u4ecd\u6ca1\u8fbe\u6210\u3002\u4e0b\u9762\u6211\u4eec\u9996\u5148\u521b\u5efa <code>32</code> \u4f4d\u4ee3\u7801\u6bb5\uff0c\u5b83\u4f4d\u4e8e <code>KillMotor</code> \u4e4b\u540e\u3002</p> <p>\u4ee3\u7801 5-10 <code>32</code> \u4f4d\u4ee3\u7801\u6bb5\uff08loader.asm\uff09 <pre><code>[section .s32]\nalign 32\n[bits 32]\nLABEL_PM_START:\n    mov ax, SelectorVideo ; \u6309\u7167\u4fdd\u62a4\u6a21\u5f0f\u7684\u89c4\u77e9\u6765\n    mov gs, ax            ; \u628a\u9009\u62e9\u5b50\u88c5\u5165gs\n\n    mov ah, 0Fh\n    mov al, 'P'\n    mov [gs:((80 * 0 + 39) * 2)], ax ; \u8fd9\u4e00\u90e8\u5206\u5199\u5165\u663e\u5b58\u662f\u901a\u7528\u7684\n    jmp $\n</code></pre></p> <p>\u5f00\u5934\u53c8\u662f\u4e4b\u524d\u6ca1\u6709\u89e3\u91ca\uff0c\u7cca\u5f04\u8fc7\u53bb\u7684 <code>section</code>\u3002\u9664\u4e86 <code>.text</code>\u3001<code>.data</code> \u8fd9\u79cd\u6709\u7279\u6b8a\u610f\u4e49\u7684\u540d\u5b57\u4ee5\u5916\uff0c\u5269\u4e0b\u7684\u540d\u5b57\u90fd\u53ea\u662f\u4e00\u79cd\u5206\u5272\u7684\u8868\u793a\uff0c\u5e76\u6ca1\u6709\u5b9e\u9645\u7684\u610f\u4e49\u3002\u4e0b\u9762\u7684 <code>align 32</code> \u548c <code>bits 32</code>\uff0c\u5219\u662f\u5148\u8bbe\u7f6e\u5185\u5b58\u6309 32 \u4f4d\u6a21\u5f0f\u5bf9\u9f50\uff0c\u7136\u540e\u544a\u77e5 nasm \u201c\u5df2\u8fdb\u5165 32 \u4f4d\u6a21\u5f0f\uff0c\u4ee5\u4e0b\u6307\u4ee4\u8bf7\u6309\u7167 32 \u4f4d\u8fdb\u884c\u89e3\u8bfb\u201d\u3002\u63a5\u4e0b\u6765\u5728\u7b2c 0 \u884c\u6b63\u4e2d\u592e\u663e\u793a\u4e00\u4e2a <code>P</code>\uff0c\u5e76\u6ca1\u6709\u4ec0\u4e48\u592a\u5927\u7684\u6539\u53d8\uff0c\u53ea\u662f <code>gs</code> \u7531\u5b9e\u6a21\u5f0f\u7684 <code>0B800h</code> \u53d8\u6210\u4e86\u4fdd\u62a4\u6a21\u5f0f\u7684 <code>SelectorVideo</code>\u3002\u65f6\u523b\u8bb0\u4f4f\uff0c\u8fd9\u6837 CPU \u4f1a\u53bb\u67e5\u627e GDT \u7684\u6bb5\uff0c\u5e76\u4f7f\u7528 GDT \u7684\u6bb5\u57fa\u5740\u6765\u8fdb\u884c\u76f8\u5bf9\u5730\u5740\u7684\u8bbf\u95ee\u3002</p> <p>\u4e0b\u5217\u4ee3\u7801\u7528\u4e8e\u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f\u3002</p> <p>\u4ee3\u7801 5-11 \u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f\uff08loader.asm\uff09 <pre><code>LABEL_FILE_LOADED:\n    call KillMotor ; \u5173\u95ed\u8f6f\u9a71\u9a6c\u8fbe\n\n    mov dh, 1 ; \"Ready.\"\n    call DispStr\n\n    lgdt [GdtPtr] ; \u4e0b\u9762\u5f00\u59cb\u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f\n\n    cli ; \u5173\u4e2d\u65ad\n\n    in al, 92h ; \u4f7f\u7528A20\u5feb\u901f\u95e8\u5f00\u542fA20\n    or al, 00000010b\n    out 92h, al\n\n    mov eax, cr0\n    or eax, 1 ; \u7f6e\u4f4dPE\u4f4d\n    mov cr0, eax\n\n    jmp dword SelectorFlatC:(BaseOfLoaderPhyAddr + LABEL_PM_START) ; \u771f\u6b63\u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f\n</code></pre></p> <p>\u65e0\u975e\u662f\u6309\u7167\u4e0a\u6587\u7684\u6d41\u7a0b\u5b8c\u6574\u5730\u505a\u4e86\u4e00\u904d\u3002\u91cd\u590d\u4e00\u4e0b\uff0c\u82e5\u4e00\u6bb5\u5185\u5b58\u5728\u4fdd\u62a4\u6a21\u5f0f\u4e0b\u88ab\u8bbf\u95ee\uff0c\u5219\u539f\u6765 16 \u4f4d\u610f\u4e49\u4e0b\u6bb5\u7684\u76f8\u5bf9\u5730\u5740\uff0c\u8981\u88ab\u8f6c\u5316\u4e3a\u539f\u6765\u7684\u6bb5\u57fa\u5740\u4e58\u4ee5 16 \u518d\u52a0\u4e0a\u76f8\u5bf9\u5730\u5740\u7684\u7edd\u5bf9\u5730\u5740\u3002 \u6240\u4ee5\uff0c\u8fd9\u91cc\u8981\u7ed9 <code>LABEL_PM_START</code> \u52a0\u4e0a <code>BaseOfLoaderPhyAddr</code>\uff0c\u540e\u8005\u662f <code>BaseOfLoader</code> \u4e58 16 \u7684\u5c01\u88c5\u3002</p> <p>\u7f16\u8bd1\u8fd0\u884c\u540e\uff0c\u5982\u679c\u4e00\u5207\u6b63\u5e38\u7684\u8bdd\uff0c\u8fd0\u884c\u7ed3\u679c\u5e94\u5982\u4e0b\u56fe\uff1a </p> <p>\uff08\u56fe 5-7 \u8fd0\u884c\u7ed3\u679c\uff09</p> <p>\u6211\u4eec\u770b\u5230\u4e86\u767d\u8272\u7684\u5b57\u6bcd <code>P</code>\uff0c\u8fd9\u8bf4\u660e\u6211\u4eec\u5df2\u7ecf\u8fdb\u5165\u4e86\u4fdd\u62a4\u6a21\u5f0f\u3002\u5982\u679c\u60a8\u8fd8\u662f\u4e0d\u653e\u5fc3\uff0c\u53ef\u4ee5\u628a <code>jmp $</code> \u6362\u6210 <code>int 0</code>\uff0c\u5982\u679c\u60a8\u7684 <code>QEMU</code> \u7a97\u53e3\u4e2d\u7684\u6587\u5b57\u5f00\u59cb\u65e0\u9650\u53d8\u6362\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u6211\u4eec\u6210\u529f\u8fdb\u5165\u4e86\u4fdd\u62a4\u6a21\u5f0f\u3002</p>"},{"location":"os-tutorial/old/06-relocate-and-jump-into-kernel/","title":"06 \u91cd\u65b0\u653e\u7f6e\u5185\u6838\u5e76\u8fdb\u5165\u5185\u6838","text":"<p>\u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f\u4e4b\u540e\u6211\u4eec\u7684\u76ee\u6807\u53ea\u6709\u4e00\u4e2a\uff0c\u90a3\u5c31\u662f\u968f\u4e4b\u8df3\u5165\u5185\u6838\u3002\u4e0d\u8fc7\uff0c\u65e2\u7136\u6211\u4eec\u7684\u5185\u6838\u662f\u6709\u683c\u5f0f\u7684\uff08<code>ELF</code>\uff09\uff0c\u6211\u4eec\u9700\u8981\u5148\u5206\u6790\u4e00\u4e0b <code>ELF</code> \u683c\u5f0f\u5230\u5e95\u957f\u4ec0\u4e48\u6837\u5b50\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\uff08\u56fe 6-1 <code>ELF</code> \u6587\u4ef6\u7ed3\u6784\uff09</p> <p>\u4e0e\u7a0b\u5e8f\u6267\u884c\u76f4\u63a5\u76f8\u5173\u7684\u53ea\u6709 <code>Program Header</code>\uff0c\u5229\u7528\u5b83\u4eec\u5934\u4e2d\u7ed9\u5b9a\u7684\u5730\u5740\u628a\u5206\u5272\u6210\u51e0\u4e2a\u90e8\u5206\u7684\u7a0b\u5e8f\u4f9d\u6b21\u6392\u5217\u5728\u5185\u5b58\u4e2d\uff0cELF \u89e3\u6790\u5de5\u4f5c\u5c31\u5b8c\u6210\u4e86\uff0c\u63a5\u4e0b\u6765\u4ece ELF \u5934\u7ed9\u5b9a\u7684\u5165\u53e3\u70b9\u5f00\u59cb\u6267\u884c\u5373\u53ef\u3002</p> <p>\u4e0b\u9762\u5c31\u662f\u5bf9 <code>Program Header</code> \u548c ELF \u5934\u7684\u63cf\u8ff0\uff1a</p> <p>\u4ee3\u7801 6-1 <code>Program Header</code> <pre><code>typedef struct {\n    Elf32_Word p_type;   // \u5f53\u524dheader\u63cf\u8ff0\u7684\u6bb5\u7c7b\u578b\n    Elf32_Off  p_offset; // \u6bb5\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u5728\u6587\u4ef6\u4e2d\u7684\u504f\u79fb\n    Elf32_Addr p_vaddr;  // \u6bb5\u5728\u5185\u5b58\u4e2d\u7684\u865a\u62df\u5730\u5740\n    Elf32_Addr p_paddr;  // \u6bb5\u5728\u5185\u5b58\u4e2d\u7684\u7269\u7406\u5730\u5740\uff0c\u4e3a\u517c\u5bb9\u4e0d\u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f\u7684OS\n    Elf32_Word p_filesz; // \u6bb5\u5728\u6587\u4ef6\u4e2d\u7684\u957f\u5ea6\n    Elf32_Word p_memsz;  // \u6bb5\u5728\u5185\u5b58\u4e2d\u7684\u957f\u5ea6\n    Elf32_Word p_flags;  // \u4e0e\u6bb5\u76f8\u5173\u7684\u6807\u5fd7\n    Elf32_Word p_align;  // \u786e\u5b9a\u6bb5\u5728\u6587\u4ef6\u548c\u5185\u5b58\u4e2d\u5982\u4f55\u5bf9\u9f50\n} Elf32_Phdr;\n</code></pre></p> <p>\u4ee3\u7801 6-2 <code>ELF</code> \u5934 <pre><code>#define EI_NIDENT 16\n\ntypedef struct {\n    unsigned char e_ident[EI_NIDENT]; // ELF\u7279\u5f81\u6807\n\n    Elf32_Half e_type;      // \u6587\u4ef6\u7c7b\u578b\n    Elf32_Half e_machine;   // \u8fd0\u884c\u81f3\u5c11\u9700\u8981\u7684\u4f53\u7cfb\u7ed3\u6784\n    Elf32_Word e_version;   // \u6587\u4ef6\u7248\u672c\n    Elf32_Addr e_entry;     // \u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\n    Elf32_Off  e_phoff;     // Program Header \u8868\u7684\u504f\u79fb\n    Elf32_Off  e_shoff;     // Section Header \u8868\u7684\u504f\u79fb\n    Elf32_Word e_flags;     // \u5bf9\u4e8e32\u4f4d\u7cfb\u7edf\u4e3a0\n    Elf32_Half e_ehsize;    // ELF Header \u7684\u5927\u5c0f\uff0c\u5355\u4f4d\u5b57\u8282\n    Elf32_Half e_phentsize; // Program Header \u7684\u5927\u5c0f\n    Elf32_Half e_phnum;     // Program Header \u7684\u6570\u91cf\n    Elf32_Half e_shentsize; // Section Header \u7684\u5927\u5c0f\n    Elf32_Half e_shnum;     // Section Header \u7684\u6570\u91cf\n    Elf32_Half e_shstrndx;  // \u5305\u542b Section \u540d\u79f0\u7684\u5b57\u7b26\u4e32\u8868\u4f4d\u4e8e\u54ea\u4e00\u9879\n} Elf32_Ehdr;\n</code></pre></p> <p>\u5176\u4e2d\u7684\u6240\u6709\u6570\u636e\u7c7b\u578b\uff08<code>Elf32_Word</code>\u3001<code>Elf32_Off</code> \u548c <code>Elf32_Addr</code>\uff09 \u5747\u4e3a\u5927\u5c0f\u4e3a <code>4</code>\u3001\u5bf9\u9f50\u4e5f\u4e3a <code>4</code> \u7684\u65e0\u7b26\u53f7\u7c7b\u578b\uff0c\u800c <code>Word</code> \u4e3a\u5927\u6574\u6570\uff0c<code>Off</code> \u4e3a\u504f\u79fb\uff0c<code>Addr</code> \u4e3a\u5730\u5740\u3002\u81f3\u4e8e <code>Elf32_Half</code>\uff08<code>unsigned char</code> \u5927\u5bb6\u80af\u5b9a\u5f88\u719f\u6089\u5c31\u4e0d\u7b97\u4e86\uff09\uff0c\u5b83\u4ee3\u8868\u4e00\u4e2a\u65e0\u7b26\u53f7\u4e2d\u7b49\u5927\u5c0f\u6574\u6570\uff0c\u5927\u5c0f\u548c\u5bf9\u9f50\u5747\u4e3a <code>2</code> \u5b57\u8282\u3002</p> <p>\u7531\u4e0a\u56fe\u53ef\u77e5\uff0c\u7ed9 ELF \u5934\u7684\u5730\u5740\u52a0\u4e0a <code>e_phoff</code> \u7684\u504f\u79fb\uff0c\u540e\u9762\u5c31\u662f Program Header \u7684\u6570\u7ec4\uff0c\u76f4\u63a5\u5206\u6bb5\u590d\u5236\u5373\u53ef\u3002</p> <p>\u5bf9\u4e8e <code>ELF</code> \u7684\u7814\u7a76\u5c31\u5230\u6b64\u4e3a\u6b62\uff0c\u540e\u7eed\u7684\u7ec6\u8282\u6211\u4eec\u5728\u4ee3\u7801\u5f53\u4e2d\u8bf4\u660e\u2026\u2026\u4f46\u6b64\u65f6\u8fd8\u6709\u4e00\u4e2a\u5c0f\u95ee\u9898\uff0c\u4e0b\u56fe\u662f\u76ee\u524d\u7684 <code>kernel.bin</code> \u7684\u6837\u5b50\u3002</p> <p></p> <p>\uff08\u56fe 6-2 \u76ee\u524d\u7684 <code>kernel.bin</code>\uff09</p> <p>\u6211\u7528\u84dd\u8272\u6807\u51fa\u6765\u7684\u4f4d\u7f6e\uff0c\u6839\u636e\u8ba1\u7b97\u4e0d\u96be\u53d1\u73b0\u662f <code>e_entry</code>\uff0c\u5b83\u5df2\u7ecf\u4f4d\u4e8e0x8000000\uff08128MB\uff09\u4ee5\u5916\uff08\u5177\u4f53\u7684\u6570\u503c\u4e3a 0x8048060\uff0c\u8bfb\u8005\u4e0d\u59a8\u81ea\u884c\u9a8c\u8bc1\uff09\uff0c\u4f46\u6839\u636e\u6211\u4eec\u7684\u9ed8\u8ba4\u8bbe\u7f6e\uff0c\u6211\u4eec\u7684\u5185\u5b58\u5927\u5c0f\u53ea\u6709128MB\u3002\u53e6\u4e00\u65b9\u9762\u6765\u8bb2\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5206\u9875\u6765\u8c03\u4f4e\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u4f46\u5b83\u7684\u5177\u4f53\u4f4d\u7f6e\u4e5f\u662f\u4e0d\u53ef\u63a7\u7684\u3002</p> <p>\u90a3\u4e48\u6211\u4eec\u5c31\u53ea\u5269\u4e0b\u4e00\u6761\u8def\u4e86\uff1a\u624b\u52a8\u66f4\u6539 <code>e_entry</code> \u7684\u503c\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53ea\u9700\u8981\u4fee\u6539\u4e00\u4e0b\u7f16\u8bd1\u547d\u4ee4\uff1a</p> <pre><code>nasm -f elf -o kernel.o kernel.asm\ni686-elf-ld -s -Ttext 0x100000 -o kernel.bin kernel.o\n</code></pre> <p>\u6211\u4eec\u628a\u5b83\u7684\u5165\u53e3\u70b9\u5b9a\u5728\u4e86 <code>0x100000</code>\uff0c\u56e0\u4e3a\u8fd9\u91cc\u521a\u597d\u662f1MB\uff0c\u53ef\u4ee5\u907f\u5f00\u524d\u9762\u9519\u7efc\u590d\u6742\u7684\u52bf\u529b\u3002</p> <p>\u8bf4\u4e86\u8fd9\u4e48\u534a\u5929\uff0c\u6211\u4eec\u5230\u5e95\u5982\u4f55\u91cd\u65b0\u653e\u7f6e\u5185\u6838\uff1f\u6839\u636e\u524d\u9762\u7684\u5206\u6790\uff0c\u6211\u4eec\u53ea\u9700\u8981\u91cd\u590d\u6267\u884c\u4e0e\u4e0b\u5217 <code>C</code> \u8bed\u53e5\u76f8\u540c\u7684\u6307\u4ee4\u5373\u53ef\uff1a</p> <p>\u4ee3\u7801 6-3 \u6211\u4eec\u7684\u76ee\u6807 <pre><code>memcpy(p_vaddr, BaseOfKernelFilePhyAddr + p_offset, p_filesz);\n</code></pre></p> <p>\u8fd9\u65f6\u5019\u6211\u4eec\u5ffd\u7136\u60ca\u5947\u5730\u53d1\u73b0\uff0c\u6211\u4eec\u8fd8\u6ca1\u6709\u5185\u5b58\u62f7\u8d1d\u7528\u7684\u51fd\u6570\uff0c\u800c\u4e14\u8fde\u4fdd\u62a4\u6a21\u5f0f\u4e0b\u7684\u5806\u6808\u90fd\u6ca1\u6709\uff0c\u751a\u81f3\u5bf9\u5404\u79cd\u6bb5\u5bc4\u5b58\u5668\u7684\u5904\u7406\u90fd\u6b20\u4f73\u3002\u4e0d\u8981\u7d27\uff0c\u9a6c\u4e0a\u4fee\u6539\uff1a</p> <p>\u4ee3\u7801 6-4 \u4fee\u6574\u4fdd\u62a4\u6a21\u5f0f\uff08loader.asm\uff09 <pre><code>[section .s32]\nalign 32\n[bits 32]\nLABEL_PM_START:\n    mov ax, SelectorVideo ; \u6309\u7167\u4fdd\u62a4\u6a21\u5f0f\u7684\u89c4\u77e9\u6765\n    mov gs, ax            ; \u628a\u9009\u62e9\u5b50\u88c5\u5165gs\n\n    mov ax, SelectorFlatRW ; \u6570\u636e\u6bb5\n    mov ds, ax\n    mov es, ax\n    mov fs, ax\n    mov ss, ax\n    mov esp, TopOfStack\n\n; cs\u7684\u8bbe\u5b9a\u5df2\u5728\u4e4b\u524d\u7684\u8fdc\u8df3\u8f6c\u4e2d\u5b8c\u6210\n\n    jmp $\n\nMemCpy: ; ds:\u53c2\u65702 ==&gt; es:\u53c2\u65701\uff0c\u5927\u5c0f\uff1a\u53c2\u65703\n    push ebp\n    mov ebp, esp ; \u4fdd\u5b58ebp\u548cesp\u7684\u503c\n\n    push esi\n    push edi\n    push ecx ; \u6682\u5b58\u8fd9\u4e09\u4e2a\uff0c\u8981\u7528\n\n    mov edi, [ebp + 8] ; [esp + 4] ==&gt; \u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u76ee\u6807\u5185\u5b58\u533a\n    mov esi, [ebp + 12] ; [esp + 8] ==&gt; \u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u6e90\u5185\u5b58\u533a\n    mov ecx, [ebp + 16] ; [esp + 12] ==&gt; \u7b2c\u4e09\u4e2a\u53c2\u6570\uff0c\u62f7\u8d1d\u7684\u5b57\u8282\u5927\u5c0f\n.1:\n    cmp ecx, 0 ; if (ecx == 0)\n    jz .2 ; goto .2;\n\n    mov al, [ds:esi] ; \u4ece\u6e90\u5185\u5b58\u533a\u4e2d\u83b7\u53d6\u4e00\u4e2a\u503c\n    inc esi ; \u6e90\u5185\u5b58\u533a\u5730\u5740+1\n    mov byte [es:edi], al ; \u5c06\u8be5\u503c\u5199\u5165\u76ee\u6807\u5185\u5b58\n    inc edi ; \u76ee\u6807\u5185\u5b58\u533a\u5730\u5740+1\n\n    dec ecx ; \u62f7\u8d1d\u5b57\u8282\u6570\u5927\u5c0f-1\n    jmp .1 ; \u91cd\u590d\u6267\u884c\n.2:\n    mov eax, [ebp + 8] ; \u76ee\u6807\u5185\u5b58\u533a\u4f5c\u4e3a\u8fd4\u56de\u503c\n\n    pop ecx ; \u4ee5\u4e0b\u4ee3\u7801\u6062\u590d\u5806\u6808\n    pop edi\n    pop esi\n    mov esp, ebp\n    pop ebp\n\n    ret\n\n[section .data1]\nStackSpace: times 1024 db 0 ; \u6808\u6682\u4e14\u5148\u7ed91KB\nTopOfStack  equ $ - StackSpace ; \u6808\u9876\n</code></pre></p> <p>\u4e0b\u9762\u4fbf\u662f\u672c\u8282\u6700\u540e\u7684\u5de5\u4f5c\u4e86\u3002\u9996\u5148\u6211\u4eec\u91cd\u65b0\u653e\u7f6e\u5185\u6838\uff1a</p> <p>\u4ee3\u7801 6-5 \u91cd\u65b0\u653e\u7f6e\u5185\u6838\uff08loader.asm\uff09 <pre><code>[section .s32]\nalign 32\n[bits 32]\nLABEL_PM_START:\n    mov ax, SelectorVideo ; \u6309\u7167\u4fdd\u62a4\u6a21\u5f0f\u7684\u89c4\u77e9\u6765\n    mov gs, ax            ; \u628a\u9009\u62e9\u5b50\u88c5\u5165gs\n\n    mov ax, SelectorFlatRW ; \u6570\u636e\u6bb5\n    mov ds, ax\n    mov es, ax\n    mov fs, ax\n    mov ss, ax\n    mov esp, TopOfStack\n\n; cs\u7684\u8bbe\u5b9a\u5df2\u5728\u4e4b\u524d\u7684\u8fdc\u8df3\u8f6c\u4e2d\u5b8c\u6210\n\n    call InitKernel ; \u91cd\u65b0\u653e\u7f6e\u5185\u6838\n\n    jmp $\n\n...\u7565\u53bbMemCpy...\n\nInitKernel:\n    xor esi, esi ; esi = 0;\n    mov cx, word [BaseOfKernelFilePhyAddr + 2Ch] ; \u8fd9\u4e2a\u5185\u5b58\u5730\u5740\u5b58\u653e\u7684\u662fELF\u5934\u4e2d\u7684e_phnum\uff0c\u5373Program Header\u7684\u4e2a\u6570\n    movzx ecx, cx ; ecx\u9ad816\u4f4d\u7f6e0\uff0c\u4f4e16\u4f4d\u7f6e\u5165cx\n    mov esi, [BaseOfKernelFilePhyAddr + 1Ch] ; \u8fd9\u4e2a\u5185\u5b58\u5730\u5740\u4e2d\u5b58\u653e\u7684\u662fELF\u5934\u4e2d\u7684e_phoff\uff0c\u5373Program Header\u8868\u7684\u504f\u79fb\n    add esi, BaseOfKernelFilePhyAddr ; Program Header\u8868\u7684\u5177\u4f53\u4f4d\u7f6e\n.Begin:\n    mov eax, [esi] ; \u9996\u5148\u770b\u4e00\u4e0b\u6bb5\u7c7b\u578b\n    cmp eax, 0 ; \u6bb5\u7c7b\u578b\uff1aPT_NULL\u6216\u6b64\u5904\u4e0d\u5b58\u5728Program Header\n    jz .NoAction ; \u672c\u8f6e\u5faa\u73af\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\n    ; \u5426\u5219\u7684\u8bdd\uff1a\n    push dword [esi + 010h] ; p_filesz\n    mov eax, [esi + 04h] ; p_offset\n    add eax, BaseOfKernelFilePhyAddr ; BaseOfKernelFilePhyAddr + p_offset\n    push eax\n    push dword [esi + 08h] ; p_vaddr\n    call MemCpy ; \u6267\u884c\u4e00\u6b21\u62f7\u8d1d\n    add esp, 12 ; \u6e05\u7406\u5806\u6808\n.NoAction: ; \u672c\u8f6e\u5faa\u73af\u7684\u6e05\u7406\u5de5\u4f5c\n    add esi, 020h ; \u4e0b\u4e00\u4e2aProgram Header\n    dec ecx\n    jnz .Begin ; jz\u8fc7\u6765\u7684\u8bdd\u5c31\u76f4\u63a5ret\u4e86\n\n    ret\n</code></pre></p> <p>\u57fa\u672c\u4e0a\u5c31\u662f\u4e00\u4e2a\u590d\u5236 Program Header \u7684\u8fc7\u7a0b\uff0c\u5177\u4f53\u7684\u7ec6\u8282\u6ce8\u91ca\u91cc\u90fd\u5199\u4e86\u3002\u4e00\u4e9b\u6bd4\u8f83\u8ff7\u60d1\u7684\u6307\u4ee4\uff08\u6bd4\u5982 <code>movzx</code>\uff09\u7684\u542b\u4e49\u4e5f\u5df2\u7ecf\u5199\u5728\u6ce8\u91ca\u91cc\u4e86\u3002</p> <p>\u5176\u4e2d\u53c8\u6709\u5f88\u591a\u65b0\u7684\u5e38\u91cf\uff1a</p> <p>\u4ee3\u7801 6-6 \u65b0\u5e38\u91cf\uff08load.inc\uff09 <pre><code>BaseOfLoader            equ 09000h ; Loader\u7684\u57fa\u5740\nOffsetOfLoader          equ 0100h  ; Loader\u7684\u504f\u79fb\n\nBaseOfLoaderPhyAddr     equ BaseOfLoader * 10h ; Loader\u88ab\u88c5\u8f7d\u5230\u7684\u7269\u7406\u5730\u5740\n\nBaseOfKernelFile            equ 08000h ; Kernel\u7684\u57fa\u5740\nOffsetOfKernelFile          equ 0h  ; Kernel\u7684\u504f\u79fb\n\nBaseOfKernelFilePhyAddr     equ BaseOfKernelFile * 10h ; Kernel\u88ab\u88c5\u8f7d\u5230\u7684\u7269\u7406\u5730\u5740\nKernelEntryPointPhyAddr     equ 0x100000 ; Kernel\u5165\u53e3\u70b9\uff0c\u4e00\u5b9a\u8981\u4e0e\u7f16\u8bd1\u547d\u4ee4\u4e00\u81f4\uff01\uff01\uff01\n</code></pre></p> <p>\u53ef\u80fd\u6709\u806a\u660e\u7684\u8bfb\u8005\u5c31\u8981\u95ee\u4e86\uff1a</p> <p>\u6240\u4ee5\u4e3a\u5565\u4e0dInit\u5b8c\u76f4\u63a5\u8fdb\u5462\uff1f\uff1f\uff1f</p> <p>\u6709\u70b9\u4eea\u5f0f\u611f\uff08bushi\uff09\uff0c\u4f60\u770b\u4e4b\u524d\u8fdb <code>Loader</code>\uff0c\u4e00\u70b9\u4eea\u5f0f\u611f\u6ca1\u6709\uff0c\u5e73\u5e73\u6de1\u6de1\u5730\u5c31\u8fdb\u4e86\uff08</p> <p>\u597d\u90a3\u4e48\u6211\u4eec\u6700\u540e\u91cd\u89c6\u4e00\u4e0b\u8fd9\u4eea\u5f0f\u611f\u5427\uff0c\u4e0b\u9762\u662f\u8fdb\u5165\u5185\u6838\u7684\u8fdc\u8df3\u8f6c\uff0c\u8bf7\u7528\u5b83\u4ee3\u66ff <code>jmp $</code>\uff1a</p> <p>\u4ee3\u7801 6-7 \u8df3\u5165\u5185\u6838\uff08loader.asm\uff09 <pre><code>    jmp SelectorFlatC:KernelEntryPointPhyAddr\n</code></pre></p> <p>\u8fd0\u884c\u7ed3\u679c\u5982\u56fe\uff1a</p> <p></p> <p>\uff08\u56fe 6-3 \u8fd0\u884c\u7ed3\u679c\uff09</p> <p>\u8fd0\u884c\u5730\u975e\u5e38\u6210\u529f\uff0c\u8fd9\u4e0d\u4ec5\u4ee3\u8868\u7740\u6211\u4eec\u53ef\u4ee5\u8ba9\u6c47\u7f16\u4ec5\u8d77\u8f85\u52a9\u4f5c\u7528\uff0c\u66f4\u662f\u6211\u4eec\u7684\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e00\u4e2a\u91cd\u8981\u6210\u679c\u3002</p> <p>\u4f46\u662f\u6211\u65e2\u6ca1\u6709\u8bf4\u540e\u9762\u4e0d\u7528\u6c47\u7f16\uff0c\u4e5f\u6ca1\u6709\u8bf4 <code>Loader</code> \u7684\u5de5\u4f5c\u5230\u6b64\u7ed3\u675f\uff0c\u4e8b\u5b9e\u4e0a\u540e\u9762\u6211\u4eec\u53ef\u80fd\u8fd8\u8981\u518d\u5bf9 <code>Loader</code> \u8fdb\u884c\u4e00\u6b21\u5927\u6539\u3002</p> <p>\u90a3\u4e48\u6211\u4eec\u5c31\u6682\u65f6\u7ef4\u6301\u7740 <code>Kernel</code> \u73b0\u5728\u7684\u6837\u5b50\uff0c\u8fdb\u5165\u4e0b\u4e00\u8282\u7684\u5185\u5bb9\u3002</p>"},{"location":"os-tutorial/old/07-print-impl/","title":"07 \u5b9e\u73b0\u6211\u4eec\u81ea\u5df1\u7684\u6253\u5370\u51fd\u6570","text":"<p>\u7ecf\u8fc7\u4e86\u516d\u8282\u4e0d\u957f\u4e0d\u77ed\u7684\u5f81\u7a0b\uff0c\u6211\u4eec\u603b\u7b97\u662f\u6765\u5230\u4e86\u5185\u6838\u4e4b\u4e2d\u3002</p> <p>\u9996\u5148\uff0c\u6211\u4eec\u8981\u8ba9 <code>kernel</code> \u83b7\u53d6\u5f88\u591a\u4e1c\u897f\u7684\u63a7\u5236\u6743\uff0c\u6bd4\u5982 <code>gdt</code>\uff0c\u6bd4\u5982 <code>esp</code>\u3002\u8fd9\u4e00\u90e8\u5206\u80af\u5b9a\u662f\u8981\u7528\u5230\u6c47\u7f16\u7684\uff0c\u4f46\u4e3b\u4f53\u5df2\u7ecf\u662f <code>C</code>\u3002</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u8981\u628a <code>kernel</code> \u66f4\u6539\u4e00\u4e0b\uff1a</p> <p>\u4ee3\u7801 7-1 \u5185\u6838\u6539\u7248\uff08kernel.asm\uff09</p> <pre><code>[section .bss]\n; \u8fd9\u91cc\uff0c\u4e3a\u6808\u51c6\u5907\u7a7a\u95f4\nStackSpace resb 2 * 1024 ; 2KB\u7684\u6808\uff0c\u5927\u6982\u591f\u7528\uff1f\nStackTop: ; \u6808\u9876\u4f4d\u7f6e\n\n[section .text]\n\nextern kernel_main ; kernel_main\u662fC\u90e8\u5206\u7684\u4e3b\u51fd\u6570\nglobal _start ; \u771f\u6b63\u7684\u5165\u53e3\u70b9\n\n_start:\n    mov esp, StackTop ; \u5148\u628a\u6808\u79fb\u52a8\u8fc7\u6765\n\n    cli ; \u4ee5\u9632\u4e07\u4e00\uff0c\u518d\u5173\u95ed\u4e00\u6b21\u4e2d\u65ad\uff08\u524d\u9762\u8fdb\u4fdd\u62a4\u6a21\u5f0f\u5df2\u7ecf\u5173\u95ed\u8fc7\u4e00\u6b21\uff09\n    call kernel_main ; \u8fdb\u5165kernel_main\n    jmp $ ; \u4ecekernel_main\u56de\u6765\u4e86\uff08\u4e00\u822c\u4e0d\u4f1a\u53d1\u751f\uff09\uff0c\u60ac\u505c\n</code></pre> <p>\u7136\u540e\u5462\uff1f\u7136\u540e\u544a\u8bc9\u5927\u5bb6\u4e00\u4e2a\u597d\u6d88\u606f\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u7528C\u5566\uff01\uff08\u9f13\u638c\uff09\u4f46\u662f\u574f\u6d88\u606f\u662f\uff0c\u8fd9\u91cc\u7684C\u4e0d\u80fd\u7528\u6807\u51c6\u5e93\uff08\u56e0\u4e3a\u67d0\u4e9b\u539f\u56e0\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u81ea\u529b\u66f4\u751f\u4e86\u3002</p> <p>\u6240\u4ee5\uff0c\u6211\u4eec\u5e94\u5f53\u5148\u628a\u57fa\u7840\u8bbe\u65bd\u642d\u5efa\u8d77\u6765\uff0c\u5728\u8fd9\u91cc\u6211\u6307\u7684\u662f\u57fa\u672c\u7684\u6574\u6570\u7c7b\u578b\u3002\u867d\u7136\u6574\u6570\u7c7b\u578b\u53ef\u4ee5\u76f4\u63a5\u7528\uff0c\u4f46 <code>unsigned int</code> \u4e4b\u6d41\u6bd5\u7adf\u8fd8\u662f\u592a\u957f\u4e86\u3002</p> <p>\u6240\u4ee5\uff0c\u65b0\u5efa <code>common.h</code>\uff0c\u6211\u4eec\u8981\u5f00\u59cb\u5b9a\u4e49\u4e86\u3002</p> <p>\u4ee3\u7801 7-2 \u57fa\u7840\u8bbe\u65bd\uff08common.h\uff09</p> <pre><code>#ifndef COMMON_H\n#define COMMON_H\n\ntypedef unsigned int   uint32_t;\ntypedef          int   int32_t;\ntypedef unsigned short uint16_t;\ntypedef          short int16_t;\ntypedef unsigned char  uint8_t;\ntypedef          char  int8_t;\n\ntypedef int8_t bool;\n#define true 1\n#define false 0\n\nvoid outb(uint16_t port, uint8_t value);\nvoid outw(uint16_t port, uint16_t value);\nuint8_t inb(uint16_t port);\nuint16_t inw(uint16_t port);\n\n#define NULL ((void *) 0)\n\n#endif\n</code></pre> <p>\u8fd9\u91cc\u9664\u4e86\u5b9a\u4e49\u4e86\u6574\u6570\u7c7b\u578b\u3001\u5e03\u5c14\u7c7b\u578b\u548c <code>NULL</code> \u5916\uff0c\u8fd8\u6709\u56db\u4e2a <code>I/O</code> \u7aef\u53e3\u64cd\u4f5c\u51fd\u6570\u3002\u6b63\u5982\u6211\u4eec\u5728\u5e73\u5e38\u5199app\u65f6\u4e00\u6837\uff0c\u65b0\u5efa <code>common.c</code>\uff0c\u6211\u4eec\u6765\u6dfb\u52a0\u5b9e\u73b0\uff1a</p> <p>\u4ee3\u7801 7-3 \u7aef\u53e3\u64cd\u4f5c\uff08common.c\uff09 <pre><code>#include \"common.h\"\n\nvoid outb(uint16_t port, uint8_t value)\n{\n    asm volatile(\"outb %1, %0\" : : \"dN\"(port), \"a\"(value)); // \u76f8\u5f53\u4e8e out value, port\n}\n\nvoid outw(uint16_t port, uint16_t value)\n{\n    asm volatile(\"outw %1, %0\" : : \"dN\"(port), \"a\"(value)); // \u76f8\u5f53\u4e8e out value, port\n}\n\nuint8_t inb(uint16_t port)\n{\n    uint8_t ret;\n    asm volatile(\"inb %1, %0\" : \"=a\"(ret) : \"dN\"(port)); // \u76f8\u5f53\u4e8e in val, port; return val;\n    return ret;\n}\n\nuint16_t inw(uint16_t port)\n{\n    uint16_t ret;\n    asm volatile(\"inw %1, %0\" : \"=a\"(ret) : \"dN\"(port)); // \u76f8\u5f53\u4e8e in val, port; return val;\n    return ret;\n}\n</code></pre></p> <p>\u600e\u4e48\u6837\uff0c\u770b\u4e0a\u53bb\u5f88\u4e0d\u597d\u61c2\u662f\u4e0d\u662f\uff1f\u8fd9\u73a9\u610f\u53eb\u505a\u5185\u8054\u6c47\u7f16\uff0c\u8fd9\u4e48\u590d\u6742\u7684\u7528\u6cd5\u53ea\u6b64\u4e00\u6b21\uff0c\u540e\u9762\u54ea\u6015\u7528\u4e5f\u4e0d\u4f1a\u8fd9\u4e48\u590d\u6742\u4e86\u3002\u81f3\u4e8e\u5b83\u5177\u4f53\u7684\u7528\u6cd5\uff0c\u53ef\u81ea\u884c\u767e\u5ea6\uff0c\u5728\u6b64\u7565\u8fc7\u4e0d\u63d0\u3002</p> <p>\uff08\u8bf4\u767d\u4e86\u5176\u5b9e\u5c31\u662f\u6211\u4e5f\u770b\u4e0d\u61c2\u8fd9\u5768\u53f2\uff0c\u53ea\u597d\u628a\u5b83\u4eec\u6284\u4e0b\u6765\uff09</p> <p>\u867d\u7136\u5b83\u4eec\u5b9a\u4e49\u8d77\u6765\u5f88\u9ebb\u70e6\uff0c\u4f46\u7528\u8fd8\u662f\u5f88\u597d\u7528\u7684\uff0c\u6211\u4eec\u5f88\u5feb\u5c31\u4f1a\u770b\u5230\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u770b\u770b\u672c\u8282\u7684\u6807\u9898\uff0c\u6211\u4eec\u7ee7\u7eed\u5411\u7740\u5b9e\u73b0\u6253\u5370\u51fd\u6570\u7684\u76ee\u6807\u524d\u8fdb\u3002</p> <p>\u4ee3\u7801 7-4 \u6253\u5370\u51fd\u6570\u5934\u6587\u4ef6\uff08monitor.h\uff09 <pre><code>#ifndef _MONITOR_H_\n#define _MONITOR_H_\n\n#include \"common.h\"\n\nvoid monitor_put(char c); // \u6253\u5370\u5b57\u7b26\nvoid monitor_clear(); // \u6e05\u5c4f\nvoid monitor_write(char *s); // \u6253\u5370\u5b57\u7b26\u4e32\nvoid monitor_write_hex(uint32_t hex); // \u6253\u5370\u5341\u516d\u8fdb\u5236\u6570\nvoid monitor_write_dec(uint32_t dec); // \u6253\u5370\u5341\u8fdb\u5236\u6570\n\n#endif\n</code></pre></p> <p>\u4ece\u540d\u5b57\u548c\u6ce8\u91ca\u4e0a\u770b\uff0c\u5e94\u8be5\u8fd8\u662f\u633a\u597d\u61c2\u7684\u5427\u3002\u8fd9\u91cc\u540c\u65f6\u63d0\u4f9b\u5341\u516d\u8fdb\u5236\u6253\u5370\u548c\u5341\u8fdb\u5236\u6253\u5370\uff0c\u5341\u516d\u8fdb\u5236\u5bf9\u4e8e\u5730\u5740\u7b49\u60c5\u51b5\u5341\u5206\u4fbf\u5229\uff0c\u800c\u5bf9\u4e8e\u6211\u4eec\u8fd9\u4e9b\u7528\u60ef\u4e86\u5341\u8fdb\u5236\u7684\u4eba\u800c\u8a00\uff0c\u6253\u5370\u5341\u8fdb\u5236\u4f1a\u66f4\u6709\u4eb2\u548c\u529b\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u5b9e\u65bd\u201c\u56db\u6b65\u8d70\u201d\u6218\u7565\uff0c\u9010\u6b65\u5b8c\u6210\u6253\u5370\u51fd\u6570\u7684\u5b9e\u73b0\u3002</p> <p>\u7b2c\u4e00\u6b65\uff1a\u79fb\u52a8\u5149\u6807</p> <p>\u6211\u4eec\u4e4b\u524d\u64cd\u4f5c\u5149\u6807\uff0c\u7528\u7684\u90fd\u662f <code>int 10h</code>\u3002\u73b0\u5728\u8fdb\u5165\u4e86\u4fdd\u62a4\u6a21\u5f0f\uff0c<code>int 10h</code> \u4e0d\u80fd\u7528\u4e86\uff0c\u600e\u4e48\u529e\uff1f</p> <p>\u6362\u4e00\u4e2a\u89d2\u5ea6\u6765\u60f3\uff0c\u5149\u6807\u662f\u5728\u663e\u793a\u5668\u4e0a\u8df3\u52a8\u7684\uff0c\u6240\u4ee5\u663e\u793a\u5668\u5fc5\u7136\u6709\u8c03\u6574\u5149\u6807\u7684\u65b9\u6cd5\u3002\u731c\u5bf9\u5566\uff0c\u6211\u4eec\u6b63\u662f\u8981\u64cd\u7eb5\u663e\u5361\u6765\u79fb\u52a8\u5149\u6807\u3002</p> <p>\u65b0\u5efa <code>monitor.c</code>\uff0c\u52a0\u5165\u5982\u4e0b\u5b9a\u4e49\uff1a</p> <p>\u4ee3\u7801 7-5 \u57fa\u672c\u5b9a\u4e49\u4e0e\u5149\u6807\u79fb\u52a8\uff08monitor.c\uff09 <pre><code>#include \"monitor.h\"\n\nstatic uint16_t cursor_x = 0, cursor_y = 0; // \u5149\u6807\u4f4d\u7f6e\nstatic uint16_t *video_memory = (uint16_t *) 0xB8000; // \u4e00\u4e2a\u5b57\u7b26\u5360\u4e24\u4e2a\u5b57\u8282\uff08\u5b57\u7b26\u672c\u4f53+\u5b57\u7b26\u5c5e\u6027\uff0c\u5373\u989c\u8272\u7b49\uff09\uff0c\u56e0\u6b64\u7528uint16_t\n\nstatic void move_cursor() // \u6839\u636e\u5f53\u524d\u5149\u6807\u4f4d\u7f6e\uff08cursor_x\uff0ccursor_y\uff09\u79fb\u52a8\u5149\u6807\n{\n    uint16_t cursorLocation = cursor_y * 80 + cursor_x; // \u5f53\u524d\u5149\u6807\u4f4d\u7f6e\n    outb(0x3D4, 14); // \u5149\u6807\u9ad88\u4f4d\n    outb(0x3D5, cursorLocation &gt;&gt; 8); // \u5199\u5165\n    outb(0x3D4, 15); // \u5149\u6807\u4f4e8\u4f4d\n    outb(0x3D5, cursorLocation); // \u5199\u5165\uff0c\u7531\u4e8evalue\u58f0\u660e\u7684\u662fuint8_t\uff0c\u56e0\u6b64\u4f1a\u81ea\u52a8\u622a\u65ad\n}\n</code></pre></p> <p>\u8fd9\u6837\uff0c\u53ea\u8981\u8c03\u7528 <code>move_cursor</code>\uff0c\u663e\u793a\u5668\u5c31\u4f1a\u81ea\u52a8\u628a\u5149\u6807\u79fb\u5230 <code>(cursor_x, cursor_y)</code> \u5904\u3002</p> <p>\u7b2c\u4e8c\u6b65\uff1a\u6eda\u5c4f\u64cd\u4f5c</p> <p>\u5728\u5e73\u5e38\u7528shell\u7684\u65f6\u5019\uff0c\u5f53\u5149\u6807\u5230\u4e86\u6700\u540e\u4e00\u884c\uff0c\u6211\u4eec\u8fd8\u8981\u6309enter\uff0c\u90a3\u4e48shell\u5185\u90e8\u7684\u6587\u5b57\u5c06\u81ea\u52a8\u6eda\u52a8\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u6211\u4eec\u79f0\u4e3a\u6eda\u5c4f\u3002</p> <p>\u663e\u7136\uff0c\u5982\u679c\u6211\u4eec\u81ea\u5df1\u7684OS\u5728\u6253\u5370\u65f6\u4e5f\u80fd\u81ea\u52a8\u6eda\u5c4f\u5c31\u597d\u4e86\u3002\u5176\u5b9e\uff0c\u5b9e\u73b0\u6eda\u5c4f\u5e76\u4e0d\u592a\u96be\uff1a</p> <p>\u4ee3\u7801 7-6 \u6eda\u5c4f\uff08monitor.c\uff09 <pre><code>// \u6587\u672c\u63a7\u5236\u53f0\u517180\u5217\uff0c25\u884c\uff08\u7eb5\u5217\u7ad6\u884c\uff09\uff0c\u56e0\u6b64\u5f53y\u5750\u6807\u4e0d\u4f4e\u4e8e25\u65f6\u5c31\u8981\u6eda\u5c4f\u4e86\nstatic void scroll() // \u6eda\u5c4f\n{\n    uint8_t attributeByte = (0 &lt;&lt; 4) | (15 &amp; 0x0F); // \u9ed1\u5e95\u767d\u5b57\n    uint16_t blank = 0x20 | (attributeByte &lt;&lt; 8); // 0x20 -&gt; \u7a7a\u683c\u8fd9\u4e2a\u5b57\uff0cattributeByte &lt;&lt; 8 -&gt; \u5c5e\u6027\u4f4d\n\n    if (cursor_y &gt;= 25) // \u63a7\u5236\u53f0\u517125\u884c\uff0c\u8d85\u8fc7\u5373\u6eda\u5c4f\n    {\n        int i;\n        for (i = 0 * 80; i &lt; 24 * 80; i++) video_memory[i] = video_memory[i + 80]; // \u524d24\u884c\u7528\u4e0b\u4e00\u884c\u8986\u76d6\n        for (i = 24 * 80; i &lt; 25 * 80; i++) video_memory[i] = blank; // \u7b2c25\u884c\u7528\u7a7a\u683c\u8986\u76d6\n        cursor_y = 24; // \u5149\u6807\u8bbe\u7f6e\u56de24\u884c\n    }\n}\n</code></pre></p> <p>\u8fd9\u6837\uff0c\u53ea\u8981\u8c03\u7528 <code>scroll</code>\uff0c\u663e\u793a\u5668\u5c31\u4f1a\u81ea\u52a8\u5224\u65ad\u662f\u5426\u9700\u8981\u6eda\u5c4f\uff1b\u5982\u679c\u9700\u8981\u6eda\u5c4f\uff0c\u5219\u7acb\u5373\u6267\u884c\u6eda\u5c4f\uff0c\u4f46\u8fd9\u4e00\u8fc7\u7a0b\u5e76\u4e0d\u4f1a\u91cd\u65b0\u8bbe\u7f6e\u5149\u6807\u4f4d\u7f6e\u3002</p> <p>\u7b2c\u4e09\u6b65\uff1a\u6253\u5370\u5355\u4e2a\u5b57\u7b26\u3001\u6253\u5370\u5b57\u7b26\u4e32\u3001\u6e05\u5c4f</p> <p>\u6253\u5370\u5b57\u7b26\u4e32\u65e0\u975e\u662f\u4e0d\u65ad\u91cd\u590d\u6253\u5370\u5355\u4e2a\u5b57\u7b26\u7684\u8fc7\u7a0b\uff0c\u56e0\u6b64\u8fd9\u4e00\u6b65\u7684\u91cd\u70b9\u8fd8\u662f\u5728\u6253\u5370\u5b57\u7b26\u4e0a\u3002</p> <p>\u6253\u5370\u5b57\u7b26\u672c\u8eab\u5e76\u4e0d\u96be\uff0c\u96be\u7684\u662f\u968f\u4e4b\u800c\u6765\u7684\u5404\u79cd\u5224\u65ad\uff0c\u6bd4\u5982\u5bf9\u5404\u79cd\u8f6c\u4e49\u5b57\u7b26\u7684\u5904\u7406\uff0c\u5bf9\u4e0d\u53ef\u89c1\u5b57\u7b26\uff08\u4e5f\u5c31\u662f\u5728ASCII\u91cc\uff0c\u4f46\u6211\u4eec\u6839\u672c\u770b\u4e0d\u89c1\u7684\u5b57\uff0c\u6bd4\u5982\u6362\u884c\u5176\u5b9e\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u5b57\u7b26\uff0c\u4f46\u6211\u4eec\u770b\u4e0d\u89c1\uff0c\u53ea\u80fd\u770b\u89c1\u6e32\u67d3\u65f6\u5019\u5206\u884c\u4e86\uff09\u7684\u5904\u7406\uff0c\u7b49\u7b49\u3002</p> <p>\u603b\u4e4b\uff0c\u4e0b\u9762\u5c31\u662f\u6253\u5370\u5355\u4e2a\u5b57\u7b26\u7684\u51fd\u6570\u3002</p> <p>\u4ee3\u7801 7-7 \u6253\u5370\u5355\u4e2a\u5b57\u7b26\uff08monitor.c\uff09 <pre><code>void monitor_put(char c) // \u6253\u5370\u5b57\u7b26\n{\n    uint8_t backColor = 0, foreColor = 15; // \u80cc\u666f\uff1a\u9ed1\uff0c\u524d\u666f\uff1a\u767d\n    uint8_t attributeByte = (backColor &lt;&lt; 4) | (foreColor &amp; 0x0f); // \u9ed1\u5e95\u767d\u5b57\n    uint16_t attribute = attributeByte &lt;&lt; 8; // \u9ad88\u4f4d\u4e3a\u5b57\u7b26\u5c5e\u6027\u4f4d\n    uint16_t *location; // \u5199\u5165\u4f4d\u7f6e\n\n    // \u63a5\u4e0b\u6765\u5bf9\u5b57\u7b26\u79cd\u7c7b\u505a\u5404\u79cd\u5404\u6837\u7684\u5224\u65ad\n    if (c == 0x08 &amp;&amp; cursor_x) // \u9000\u683c\uff0c\u4e14\u5149\u6807\u4e0d\u5728\u67d0\u884c\u5f00\u59cb\u5904\n    {\n        cursor_x--; // \u76f4\u63a5\u628a\u5149\u6807\u5411\u540e\u79fb\u4e00\u683c\n    }\n    else if (c == 0x09) // \u5236\u8868\u7b26\n    {\n        cursor_x = (cursor_x + 8) &amp; ~(8 - 1); // \u628a\u5149\u6807\u540e\u79fb\u81f38\u7684\u500d\u6570\u4e3a\u6b62\n        // \u8fd9\u4e00\u6bb5\u4ee3\u7801\u5b9e\u9645\u4e0a\u7684\u610f\u601d\u662f\uff1a\u5148\u628acursor_x + 8\uff0c\u7136\u540e\u628a\u8fd9\u4e00\u4e2a\u6570\u503c\u53d8\u4e3a\u5c0f\u4e8e\u5b83\u7684\u6700\u5927\u76848\u7684\u500d\u6570\uff08\u4f4d\u8fd0\u7b97\u7684\u9b45\u529b\uff0c\u5177\u4f53\u7684\u53ef\u4ee5\u5728\u7eb8\u4e0a\u63a8\u63a8\uff09\n    }\n    else if (c == '\\r') // CR\n    {\n        cursor_x = 0; // \u5149\u6807\u56de\u9996\n    }\n    else if (c == '\\n') // LF\n    {\n        cursor_x = 0; // \u5149\u6807\u56de\u9996\n        cursor_y++; // \u4e0b\u4e00\u884c\n    }\n    else if (c &gt;= ' ' &amp;&amp; c &lt;= '~') // \u53ef\u6253\u5370\u5b57\u7b26\n    {\n        location = video_memory + (cursor_y * 80 + cursor_x); // \u5f53\u524d\u5149\u6807\u5904\u5c31\u662f\u5199\u5165\u5b57\u7b26\u4f4d\u7f6e\n        *location = c | attribute; // \u4f4e8\u4f4d\uff1a\u5b57\u7b26\u672c\u4f53\uff0c\u9ad88\u4f4d\uff1a\u5c5e\u6027\uff0c\u9ed1\u5e95\u767d\u5b57\n        cursor_x++; // \u5149\u6807\u540e\u79fb\n    }\n\n    if (cursor_x &gt;= 80) // \u603b\u517180\u5217\uff0c\u5230\u884c\u5c3e\u5fc5\u987b\u6362\u884c\n    {\n        cursor_x = 0;\n        cursor_y++;\n    }\n\n    scroll(); // \u6eda\u5c4f\uff0c\u5982\u679c\u9700\u8981\u7684\u8bdd\n    move_cursor(); // \u79fb\u52a8\u5149\u6807\n}\n</code></pre> \u8fd9\u4e00\u6bb5\u4ee3\u7801\u4e2d\uff0c\u5c31\u662f\u5404\u5f0f\u5404\u6837\u7684\u5224\u65ad\u5360\u4e86\u5de8\u5927\u7684\u7bc7\u5e45\u3002\u771f\u6b63\u8d1f\u8d23\u5199\u5165\u7684\u5176\u5b9e\u53ea\u6709\u8fd9\u77ed\u77ed\u7684\u4e24\u884c\uff1a</p> <pre><code>location = video_memory + (cursor_y * 80 + cursor_x); // \u5f53\u524d\u5149\u6807\u5904\u5c31\u662f\u5199\u5165\u5b57\u7b26\u4f4d\u7f6e\n*location = c | attribute; // \u4f4e8\u4f4d\uff1a\u5b57\u7b26\u672c\u4f53\uff0c\u9ad88\u4f4d\uff1a\u5c5e\u6027\uff0c\u9ed1\u5e95\u767d\u5b57\n</code></pre> <p>\u63a5\u4e0b\u6765\u4fbf\u662f\u6253\u5370\u5b57\u7b26\u4e32\uff0c\u5b83\u4e0d\u8fc7\u662f\u5bf9\u6253\u5370\u5b57\u7b26\u7684\u7b80\u5355\u91cd\u590d\uff1a</p> <p>\u4ee3\u7801 7-8 \u6253\u5370\u5b57\u7b26\u4e32\uff08monitor.c\uff09 <pre><code>void monitor_write(char *s)\n{\n    for (; *s; s++) monitor_put(*s); // \u904d\u5386\u5b57\u7b26\u4e32\u76f4\u5230\u7ed3\u5c3e\uff0c\u8f93\u51fa\u6bcf\u4e00\u4e2a\u5b57\u7b26\n}\n</code></pre></p> <p>\u8fd9\u4e00\u6b65\u8fd8\u5269\u4e0b\u6700\u540e\u4e00\u4e2a\u4efb\u52a1\uff0c\u5b9e\u73b0\u6e05\u5c4f\u3002\u8bf4\u767d\u4e86\uff0c\u6e05\u5c4f\u4e0d\u8fc7\u5c31\u662f\u628a\u5168\u5c4f\u90fd\u6253\u5370\u4e0a\u7a7a\u683c\uff0c\u7136\u540e\u628a\u5149\u6807\u653e\u5230\u5de6\u4e0a\u89d2\u800c\u5df2\u3002</p> <p>\u4ee3\u7801 7-9 \u6e05\u5c4f\uff08monitor.c\uff09 <pre><code>void monitor_clear()\n{\n    uint8_t attributeByte = (0 &lt;&lt; 4) | (15 &amp; 0x0F); // \u9ed1\u5e95\u767d\u5b57\n    uint16_t blank = 0x20 | (attributeByte &lt;&lt; 8); // 0x20 -&gt; \u7a7a\u683c\u8fd9\u4e2a\u5b57\uff0cattributeByte &lt;&lt; 8 -&gt; \u5c5e\u6027\u4f4d\n\n    for (int i = 0; i &lt; 80 * 25; i++) video_memory[i] = blank; // \u5168\u90e8\u6253\u5370\u4e3a\u7a7a\u683c\n\n    cursor_x = 0;\n    cursor_y = 0;\n    move_cursor(); // \u5149\u6807\u7f6e\u4e8e\u5de6\u4e0a\u89d2\n}\n</code></pre></p> <p>\u81f3\u6b64\uff0c\u6700\u57fa\u672c\u7684\u6253\u5370\u51fd\u6570\u5df2\u7ecf\u6210\u578b\u3002\u5176\u5b9e\u8fd9\u91cc\u5df2\u7ecf\u53ef\u4ee5\u6d4b\u8bd5\u4e86\uff0c\u4f46\u8fd8\u6709\u4e24\u4e2a\u51fd\u6570\uff0c\u6211\u4eec\u603b\u4e0d\u80fd\u653e\u7740\u4e0d\u7ba1\u3002</p> <p>\u7b2c\u56db\u6b65\uff1a\u8f93\u51fa\u6574\u6570</p> <p>\u8fd9\u4e00\u6b65\u6211\u4eec\u8981\u66f4\u8fdb\u4e00\u6b65\uff0c\u5728\u57fa\u7840\u6253\u5370\u51fd\u6570\u7684\u57fa\u7840\u4e0a\u5b9e\u73b0\u5341\u516d\u8fdb\u5236\u548c\u5341\u8fdb\u5236\u6570\u7684\u8f93\u51fa\u3002\u6211\u4eec\u4ece\u6613\u5230\u96be\uff0c\u4ece\u5341\u8fdb\u5236\u6570\u5f00\u59cb\u3002</p> <p><code>OIer</code> \u57fa\u672c\u90fd\u77e5\u9053\uff0c\u5728OI\u4e2d\uff0c\u6709\u4e00\u5957\u4e1c\u897f\uff0c\u53eb\u505a\u5feb\u8bfb\u5feb\u5199\u3002\u800c\u73b0\u5728\uff0c\u6ca1\u6709 <code>cout</code>\uff0c\u6ca1\u6709 <code>printf</code>\uff0c\u8fd8\u60f3\u8f93\u51fa\u5341\u8fdb\u5236\u6570\uff0c\u5feb\u5199\u6b63\u597d\u53ef\u4ee5\u80dc\u4efb\u3002</p> <p>\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528\u6700\u7b80\u5355\u7684\u4e00\u7248\u5feb\u5199\u2014\u2014\u9012\u5f52\u7248\uff0c\u5b83\u7684\u4ee3\u7801\u5e76\u4e0d\u957f\uff0c\u4ec5\u6709\u4e09\u884c\uff1a</p> <p>\u4ee3\u7801 7-10 \u5341\u8fdb\u5236\u6570\u6253\u5370\uff08monitor.c\uff09 <pre><code>void monitor_write_dec(uint32_t dec)\n{\n    int upper = dec / 10, rest = dec % 10;\n    if (upper) monitor_write_dec(upper);\n    monitor_put(rest + '0');\n}\n</code></pre></p> <p>\u8fd8\u662f\u633a\u597d\u61c2\u7684\u5427\uff0c\u5148\u8f93\u51fa\u9ad8\u4f4d\uff0c\u518d\u628a\u6700\u540e\u4e00\u4f4d\u8f93\u51fa\u51fa\u6765\u3002</p> <p>\u5341\u516d\u8fdb\u5236\u76f8\u6bd4\u5341\u8fdb\u5236\u8981\u96be\u4e0a\u4e00\u70b9\uff0c\u56e0\u4e3a\u6211\u4eec\u5e0c\u671b\u5728\u8f93\u51fa\u5341\u516d\u8fdb\u5236\u7684\u65f6\u5019\u6709\u4e00\u4e2a <code>0x</code> \u524d\u7f00\uff0c\u8fd9\u6837\u5c31\u4e0d\u80fd\u76f4\u63a5\u7528\u9012\u5f52\u4e86\uff08\u4e0d\u8fc7\u786c\u8981\u7528\u9012\u5f52\u4e5f\u53ef\u4ee5\uff0c\u5199\u8d77\u6765\u80af\u5b9a\u6bd4\u5faa\u73af\u77ed\uff09\u3002</p> <p>\u4ee3\u7801 7-11 \u5341\u516d\u8fdb\u5236\u6253\u5370\uff08monitor.c\uff09 <pre><code>void monitor_write_hex(uint32_t hex)\n{\n    char buf[20]; // 32\u4f4d\u6700\u591a0xffffffff\uff0c20\u4e2a\u90fd\u591a\u4e86\n    char *p = buf; // \u7528\u4e8e\u5199\u5165\u7684\u6307\u9488\n    char ch; // \u5f53\u524d\u5341\u516d\u8fdb\u5236\u5b57\u7b26\n    int i, flag = 0; // i -&gt; \u5faa\u73af\u53d8\u91cf\uff0cflag -&gt; \u524d\u5bfc0\u662f\u5426\u7ed3\u675f\n\n    *p++ = '0';\n    *p++ = 'x'; // \u5148\u5b58\u4e00\u4e2a0x\n\n    if (hex == 0) *p++ = '0'; // \u5982\u679c\u662f0\uff0c\u76f4\u63a50x0\u7ed3\u675f\n    else {\n        for (i = 28; i &gt;= 0; i -= 4) { // \u6bcf\u6b214\u4f4d\uff0c0xF = 0b1111\n            ch = (hex &gt;&gt; i) &amp; 0xF; // 0~9, A~F\n            // 28\u7684\u539f\u56e0\u662f\u591a\u7559\u4e00\u70b9\u540e\u8def\uff08\n            if (flag || ch &gt; 0) { // \u8df3\u8fc7\u524d\u5bfc0\n                flag = 1; // \u6ca1\u6709\u524d\u5bfc0\u5c31\u628aflag\u8bbe\u4e3a1\uff0c\u8fd9\u6837\u540e\u9762\u518d\u67090\u4e5f\u4e0d\u4f1a\u5ffd\u7565\n                ch += '0'; // 0~9 =&gt; '0'~'9'\n                if (ch &gt; '9') {\n                    ch += 7; // 'A' - '9' = 7\n                }\n                *p++ = ch; // \u5199\u5165\n            }\n        }\n    }\n    *p = '\\0'; // \u7ed3\u675f\u7b26\n\n    monitor_write(buf);\n}\n</code></pre> \u5177\u4f53\u5982\u4e0a\uff0c\u914d\u5408\u6ce8\u91ca\u8fd8\u662f\u6bd4\u8f83\u597d\u61c2\u7684\u3002\u81f3\u6b64\uff0c\u6211\u4eec\u7684\u201c\u56db\u6b65\u8d70\u201d\u6218\u7565\u80dc\u5229\u5b8c\u6210\u3002</p> <p>\u6700\u540e\u7684\u6700\u540e\uff0c\u81ea\u7136\u662f\u529f\u80fd\u6d4b\u8bd5\u3002\u65b0\u5efa <code>main.c</code>\uff0c\u5982\u6b64\u8fd9\u822c\uff1a</p> <pre><code>#include \"monitor.h\"\n\nvoid kernel_main() // kernel.asm\u4f1a\u8df3\u8f6c\u5230\u8fd9\u91cc\n{\n    monitor_clear(); // \u5148\u6e05\u5c4f\n    monitor_write(\"Hello, kernel world!\\n\");\n    // \u9a8c\u8bc1write_hex\u548cwrite_dec\uff0c\u7531\u4e8e\u6ca1\u6709printf\uff0c\u8fd9\u4e00\u6b65\u5341\u5206\u70e6\u4eba\n    monitor_write_hex(0x114514);\n    monitor_write(\" = \");\n    monitor_write_dec(0x114514);\n    monitor_write(\"\\n\");\n\n    // \u60ac\u505c\n    while (1);\n}\n</code></pre> <p>\u867d\u7136\u524d\u9762\u6211\u4eec\u4e00\u76f4\u5728\u5199C\uff0c\u4f46\u662f\u5ffd\u7565\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u90a3\u5c31\u662f\u600e\u4e48\u7f16\u8bd1\u7684\u95ee\u9898\u3002\u5982\u679c\u64cd\u4f5c\u6b63\u786e\uff0c\u5728\u7b2c0\u8282\u60a8\u5e94\u8be5\u4e0b\u8f7d\u4e86i686-elf-tools\uff08\u6216\u8005linux\u7684gcc\uff09\uff0c\u5982\u6b64\u8fd9\u822c\u7f16\u8bd1\uff1a <pre><code>i686-elf-gcc -c -O0 -fno-builtin -fno-stack-protector -o monitor.o monitor.c\n</code></pre></p> <p>\u8fd9\u662f\u7f16\u8bd1 <code>monitor.c</code> \u7684\u793a\u4f8b\u3002\u73b0\u5728\u603b\u7684\u7f16\u8bd1\u547d\u4ee4\u592a\u957f\u4e86\uff0c\u603b\u5171\u6709\u8fd9\u4e48\u591a\uff1a <pre><code>nasm boot.asm -o boot.bin\nnasm loader.asm -o loader.bin\n\ni686-elf-gcc -c -O0 -fno-builtin -fno-stack-protector -o monitor.o monitor.c\ni686-elf-gcc -c -O0 -fno-builtin -fno-stack-protector -o common.o common.c\ni686-elf-gcc -c -O0 -fno-builtin -fno-stack-protector -o main.o main.c\nnasm -f elf -o kernel.o kernel.asm\ni686-elf-ld -s -Ttext 0x100000 -o kernel.bin kernel.o common.o monitor.o main.o\n\nedimg imgin:a.img copy from:loader.bin to:@: copy from:kernel.bin to:@: imgout:a.img\nqemu-system-i386 -fda a.img\n</code></pre> \u8db3\u8db39\u6761\uff0c\u968f\u7740\u6587\u4ef6\u8d8a\u6765\u8d8a\u591a\u5b83\u8fd8\u4f1a\u6c34\u6da8\u8239\u9ad8\uff0c\u4e0b\u4e00\u8282\u6211\u4eec\u6765\u89e3\u51b3\u4e00\u4e0b\u8fd9\u4e2a\u95ee\u9898\u3002</p> <p>\u4e0d\u8fc7\u5728\u6b64\u4e4b\u524d\uff0c\u6211\u4eec\u8fd8\u662f\u8981\u770b\u770b\u6211\u4eec\u6210\u679c\u5982\u4f55\u3002\u628a\u4e0a\u9762\u7684\u90a3\u5768\u547d\u4ee4\u7c98\u8d34\u5230\u547d\u4ee4\u884c\uff0cQEMU \u7a97\u53e3\u5e94\u5982\u4e0b\u56fe\uff1a</p> <p></p> <p>\uff08\u56fe 7-1 \u8fd0\u884c\u7ed3\u679c\uff09</p> <p>\u597d\uff0c\u6210\u529f\u8fd0\u884c\uff01</p>"},{"location":"os-tutorial/old/08-we-love-makefile/","title":"08 \u6574\u7406\u6587\u4ef6","text":"<p>\u672c\u6765\u60f3\u7ee7\u7eed\u5199\u4ee3\u7801\u7684\uff0c\u4f46\u4e0a\u4e00\u8282\u7684 9 \u6761\u7f16\u8bd1\u547d\u4ee4\u8fd8\u662f\u6709\u4e9b\u8ba9\u4eba\u53d1\u6035\uff1a\u4ee5\u540e\u6587\u4ef6\u8fd8\u4f1a\u8d8a\u6765\u8d8a\u591a\uff0c\u96be\u9053\u5c31\u4efb\u7531\u5b83\u8fd9\u4e48\u53d1\u5c55\u4e0b\u53bb\uff1f</p> <p>\u51b5\u4e14\uff0c\u73b0\u5728\u6211\u4eec\u7684\u6839\u76ee\u5f55\u957f\u8fd9\u6837\uff1a</p> <p></p> <p>\uff08\u56fe 8-1 \u6839\u76ee\u5f55\u7684\u60e8\u72b6\uff09</p> <p>\u5404\u4e2a\u90e8\u5206\u5806\u5728\u4e00\u8d77\uff0c\u6742\u4e71\u65e0\u7ae0\uff0c\u6211\u4eec\u8fd8\u662f\u5e94\u8be5\u5148\u6574\u7406\u4e00\u4e0b\u6839\u76ee\u5f55\u518d\u8bf4\u3002</p> <p>\u6309\u7167\u4e0d\u540c\u529f\u80fd\u548c\u90e8\u5206\u7684\u5212\u5206\uff0c\u6211\u4eec\u628a\u5b83\u8fd9\u6837\u5206\u5272\uff1a</p> <p></p> <p>\uff08\u56fe 8-2 \u5206\u5272\u4ee5\u540e\uff09</p> <p>\u8fd9\u6837\u4e00\u5206\u5c31\u5f88\u8212\u670d\u4e86\uff0c\u4f46\u662f\u7f16\u8bd1\u547d\u4ee4\u4e5f\u7531\u6b64\u53d8\u6210\u4e86\u5f7b\u5e95\u7684\u5730\u72f1\u3002\u4e0b\u9762\u5c31\u8ba9\u6211\u4eec\u5f15\u5165\u5728 Linux \u4e0b\u5341\u5206\u5e38\u89c1\u7684\u81ea\u52a8\u7f16\u8bd1\u5de5\u5177\u2014\u2014Makefile\u3002</p> <p>\u7ecf\u5e38\u5728 Linux \u4e0b\u88c5\u8f6f\u4ef6\u7684\u670b\u53cb\u5e94\u8be5\u90fd\u77e5\u9053\uff0c\u6709\u7684\u65f6\u5019\u90e8\u5206app\u53ea\u63d0\u4f9b\u6e90\u4ee3\u7801\uff0c\u8fd9\u6837\u5c31\u53ea\u80fd\u6309\u4e0b\u9762\u7684\u4e09\u90e8\u66f2\u5b89\u88c5\uff1a</p> <pre><code>./configure\nmake\nsudo make install\n</code></pre> <p>\u8fd9\u4e09\u6b65\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f\u7b2c\u4e00\u6b65 <code>./configure</code>\uff0c\u751f\u6210 Makefile\uff1b\u7b2c\u4e8c\u6b65 <code>make</code>\uff0c\u7528 <code>make</code> \u5de5\u5177\u8c03\u7528 Makefile \u7f16\u8bd1\uff1b\u7b2c\u4e09\u6b65 <code>sudo make install</code>\uff0c\u7528 <code>make</code> \u5de5\u5177\u8c03\u7528 Makefile \u5b89\u88c5\u3002</p> <p>\u6709\u4e09\u5206\u4e4b\u4e8c\u7684\u6b65\u9aa4\u90fd\u548c Makefile \u76f8\u5173\uff0c\u770b\u6765 Makefile \u8fd8\u771f\u662f\u4e2a\u597d\u5de5\u5177\u5462\u3002</p> <p>Makefile \u7684\u5b9e\u9645\u5e94\u7528\u6bd4\u8f83\u590d\u6742\uff0c\u6211\u4eec\u8fd9\u91cc\u53ea\u8bb2\u6700\u7b80\u5355\u7684\u90e8\u5206\u3002\u4e00\u4e2a Makefile \u662f\u7531\u591a\u4e2a\u5757\u7ec4\u6210\u7684\uff0c\u6bcf\u4e2a\u5757\u7684\u7ed3\u6784\u5982\u4e0b\uff1a</p> <pre><code>result : what you need\n[TAB]command\n</code></pre> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6bcf\u4e2a\u5757\u7684 command \u90e8\u5206\u5fc5\u987b\u4ee5TAB\u5f00\u5934\uff0c\u800c\u5728cnblogs\u7f16\u8f91\u5668\u91cc\u6253\u4e0d\u51faTAB\uff08\u4f1a\u88ab\u81ea\u52a8\u66ff\u6362\u4e3a\u7a7a\u683c\uff09\uff0c\u56e0\u6b64\u53ea\u80fd\u7528[TAB]\u6765\u63d0\u793a\u4e00\u4e0b\u4e86\uff0c\u671b\u5927\u5bb6\u8c05\u89e3\u3002</p> <p>\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u628a <code>kernel/monitor.c</code> \u7f16\u8bd1\u4e3a <code>out/monitor.o</code>\uff0c\u6211\u4eec\u5e94\u8be5\u600e\u6837\u5199\u51fa\u4e00\u4e2a\u5757\u5462\uff1f\u7b54\u6848\u662f\u8fd9\u6837\uff1a</p> <pre><code>out/monitor.o : kernel/monitor.c\n[TAB]i686-elf-gcc -I include -c -O0 -fno-builtin -fno-stack-protector -o out/monitor.o kernel/monitor.c\n</code></pre> <p>\u65b0\u51fa\u73b0\u4e86 <code>-I include</code> \u7684\u9009\u9879\uff0c\u8fd9\u662f\u56e0\u4e3a\u6240\u6709\u7684\u5934\u6587\u4ef6\u90fd\u5728 <code>include</code> \u6587\u4ef6\u5939\u4e0b\uff0c\u9700\u8981\u8fd9\u6837\u624d\u80fd\u88ab gcc \u8bc6\u522b\u3002</p> <p>\u8bf6\u8bf6\u4e14\u6162\uff0c\u8981\u662f\u6bcf\u4e2a\u6587\u4ef6\u90fd\u8981\u8fd9\u4e48\u6765\u4e00\u4e0b\uff0c\u90a3\u4e0d\u8fd8\u662f\u6ca1\u6709\u89e3\u51b3\u95ee\u9898\u4e48\uff1f</p> <p>GNU \u90a3\u5e2e\u4eba\u5176\u5b9e\u65e9\u5c31\u66ff\u6211\u4eec\u60f3\u597d\u5566\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5148\u5199\u597d\u8fd9\u4e48\u4e00\u4e2a\u6a21\u677f\uff0c\u7136\u540e\u8fdb\u884c\u4e00\u4e2a\u66ff\u6362\uff1a</p> <pre><code>out/%.o : kernel/%.c\n[TAB]i686-elf-gcc -I include -c -O0 -fno-builtin -fno-stack-protector -o out/$*.o kernel/$*.c\n</code></pre> <p>\u8fd9\u6bb5\u4ee3\u7801\u4e0e\u4e0a\u9762\u7684 Makefile \u5e76\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\uff0c\u53ea\u662f\u628a command \u4e2d\u7684 <code>monitor</code> \u53d8\u6210\u4e86 <code>$*</code>\uff0c\u628a\u7b2c\u4e00\u884c\u7684 <code>monitor</code> \u53d8\u6210\u4e86 <code>%</code> \u800c\u5df2\u3002\u4f46\u8fd9\u6837\u4e00\u6539\uff0cMakefile \u5c31\u4f1a\u5bf9\u6240\u6709\u4f60\u8981\u6c42\u7f16\u8bd1\u7684\u7a0b\u5e8f\u8fdb\u884c\u7f16\u8bd1\u5566\u3002</p> <p>\u597d\uff0c\u4e0b\u9762\u6211\u4eec\u5c31\u7ee7\u7eed\u8fdb\u884c\u5bf9\u6c47\u7f16\u7684\u64cd\u4f5c\uff0c\u5176\u5b9e\u548c\u5904\u7406 C \u51e0\u4e4e\u5b8c\u5168\u76f8\u540c\uff1a</p> <pre><code>out/%.o : kernel/%.asm\n[TAB]nasm -f elf -o out/$*.o kernel/$*.asm\n\nout/%.bin : boot/%.asm\n[TAB]nasm -I boot/include -o out/$*.bin boot/$*.asm\n</code></pre> <p>\u6ce8\u610f\u5230 boot.bin \u548c loader.bin \u7531\u6c47\u7f16\u76f4\u63a5\u7f16\u8bd1\uff0c\u6240\u4ee5\u6211\u4eec\u4e5f\u628a\u5b83\u653e\u5728\u8fd9\u4e86\u3002\u6dfb\u52a0 <code>-I boot/include</code> \u7684\u539f\u56e0\u548c\u6dfb\u52a0 <code>-I include</code> \u7684\u539f\u56e0\u76f8\u540c\uff0c\u8fd9\u91cc\u4e0d\u591a\u8bf4\u4e86\u3002</p> <p>\u4e0b\u9762\u8fd8\u5269\u4e0b\u6700\u540e\u51e0\u6b65\u3002\u9996\u5148\uff0c\u773c\u5c16\u7684\u8bfb\u8005\u53ef\u80fd\u5df2\u7ecf\u53d1\u73b0\u4e86\uff0c\u5728\u51e0\u6bb5\u4e4b\u524d\u6709\u8fd9\u6837\u4e00\u53e5\u8bdd\uff1a</p> <p>\u4f46\u8fd9\u6837\u4e00\u6539\uff0cMakefile \u5c31\u4f1a\u5bf9\u6240\u6709\u4f60\u8981\u6c42\u7f16\u8bd1\u7684\u7a0b\u5e8f\u8fdb\u884c\u7f16\u8bd1\u5566\u3002</p> <p>\u90a3 Makefile \u600e\u4e48\u77e5\u9053\u6211\u4eec\u8981\u7f16\u8bd1\u54ea\u4e9b\u7a0b\u5e8f\u5462\uff1f\u5206\u4e24\u79cd\u65b9\u6848\uff1a</p> <p>\u7b2c\u4e00\u79cd\uff0c\u547d\u4ee4\u884c\u6307\u5b9a\u3002\u901a\u8fc7 <code>make xxx.o</code> \u6216 <code>make xxx.bin</code>\uff0c\u5373\u53ef\u7f16\u8bd1\u5bf9\u5e94\u7684\u6587\u4ef6\u3002\u4f46\u5982\u679c\u8fd9\u6837\uff0c\u5c31\u53c8\u56de\u5230\u4e4b\u524d\u7684\u95ee\u9898\u4e86\u3002</p> <p>\u7b2c\u4e8c\u79cd\uff0c\u53ef\u4ee5\u5728\u4e00\u4e2a\u5757\u7684 <code>what you need</code> \u90e8\u5206\u6307\u5b9a\uff0c\u7136\u540e <code>make result</code>\u3002\u8fd9\u6837\uff0c\u5728 <code>make result</code> \u7684\u65f6\u5019\uff0c<code>make</code> \u4f1a\u53d1\u73b0 <code>what you need</code> \u8fd8\u4e0d\u5b58\u5728\uff0c\u4e8e\u662f\u5c31\u4f1a\u81ea\u52a8\u7f16\u8bd1\u4e86\u3002</p> <p>\u770b\u6765\u7b2c\u4e8c\u79cd\u6bd4\u8f83\u9002\u5408\u6211\u4eec\u3002\u4e0d\u8fc7\uff0c\u6211\u4eec\u8fd8\u6ca1\u6709\u94fe\u63a5 <code>kernel.bin</code>\uff0c\u6240\u4ee5\u53ef\u4ee5\u5148\u62ff\u5b83\u8bd5\u8bd5\u624b\uff1a</p> <pre><code>out/kernel.bin : $(OBJS)\n[TAB]i686-elf-ld -s -Ttext 0x100000 -o out/kernel.bin $(OBJS)\n</code></pre> <p>\u8fd9\u91cc\u65b0\u51fa\u73b0\u4e86 <code>$(OBJS)</code>\uff0c\u5b83\u5b9e\u9645\u4e0a\u5c31\u662f Makefile \u91cc\u7684\u53d8\u91cf\u3002\u5728 Makefile \u7684\u5f00\u5934\u6dfb\u52a0\u4e00\u884c\uff1a</p> <pre><code>OBJS = out/kernel.o out/common.o out/monitor.o out/main.o\n</code></pre> <p>\u4ee5\u540e\u6211\u4eec\u518d\u589e\u52a0\u65b0\u6587\u4ef6\uff0c\u5c31\u53ea\u9700\u8981\u5728\u8fd9\u91cc\u52a0\u4e00\u4e2a <code>out/xxx.o</code>\uff0c\u6bd4\u4e4b\u524d\u53ef\u65b9\u4fbf\u591a\u4e86\u3002</p> <p>\u4e0b\u9762\u6211\u4eec\u6765\u8fdb\u884c\u6d4b\u8bd5\uff0c\u5728\u547d\u4ee4\u884c\u91cc\u8f93\u5165 <code>make out/kernel.bin</code>\uff1a</p> <p></p> <p>\uff08\u56fe 8-3 \u547d\u4ee4\u884c\u8f93\u51fa\uff09</p> <p></p> <p>\uff08\u56fe 8-4 <code>out</code> \u76ee\u5f55\uff09</p> <p>\u53ea\u4e00\u4e0b\uff0c<code>kernel.bin</code> \u4fbf\u7f16\u8bd1\u5b8c\u6210\u4e86\u3002Makefile \u7684\u786e\u65b9\u4fbf\u54ea\uff08\u7b11\uff09\u3002</p> <p>\u4f46\u4e0b\u9762\u5c31\u662f\u96be\u70b9\u4e86\uff1a\u5199\u76d8\u64cd\u4f5c\u5728 Windows \u548c Linux \u4e0b\u5b8c\u5168\u4e0d\u4e00\u81f4\u3002\u800c\u60f3\u8981\u5224\u65ad\u5f53\u524d\u64cd\u4f5c\u7cfb\u7edf\u662f\u4ec0\u4e48\uff0c\u5e76\u4e0d\u7b80\u5355\uff0c\u8fd9\u6b63\u662f Makefile \u7684\u5c40\u9650\u6027\u3002 \uff08\u7f51\u4e0a\u65b9\u6cd5\u5927\u90fd\u4f9d\u8d56 <code>uname</code>\uff0c\u4f46 Windows \u6ca1\u6709 <code>uname</code>\uff0c\u6240\u4ee5\u4f1a\u62a5\u9519\u9000\u51fa\uff1b\u6240\u6709\u4f9d\u8d56\u62a5\u9519\u7684\u65b9\u6cd5\u4f1a\u76f4\u63a5\u5bfc\u81f4 <code>make</code> \u7ec8\u6b62\uff0c\u56e0\u6b64\u53ea\u80fd\u7528\u5176\u4ed6\u8bed\u8a00\u7684\u5176\u4ed6\u65b9\u6cd5\uff0c\u5982 <code>Python</code> \u7684 <code>os.name</code>\u3002\uff09</p> <p>\u6ca1\u529e\u6cd5\uff0c\u7531\u4e8e\u7b14\u8005\u662f Windows \u673a\uff0c\u6240\u4ee5\u6211\u53ea\u597d\u7528 Windows \u7684\u65b9\u6cd5\u5199\u76d8\u4e86\u3002</p> <pre><code>a.img : out/boot.bin out/loader.bin out/kernel.bin\n[TAB]dd if=out/boot.bin of=a.img bs=512 count=1\n[TAB]edimg imgin:a.img copy from:out/loader.bin to:@: copy from:out/kernel.bin to:@: imgout:a.img\n</code></pre> <p>\u6216\u8bb8\u4e4b\u524d\u6ca1\u63d0\uff0ccommand \u90e8\u5206\u53ef\u4ee5\u6709\u591a\u6761\u547d\u4ee4\u54e6\u3002</p> <p>\u73b0\u5728\uff0c<code>make a.img</code>\uff0c\u6548\u679c\u5982\u4e0b\uff1a</p> <p></p> <p>\uff08\u56fe 8-5 \u5b8c\u5168\u80dc\u5229\uff09</p> <p>\u6211\u4eec\u6700\u540e\u518d\u52a0\u4e00\u6761\u547d\u4ee4\uff0c<code>make run</code>\uff0c\u7528\u4e8e\u4e00\u6b65\u5230\u4f4d\u8fd0\u884c\u64cd\u4f5c\u7cfb\u7edf\u3002</p> <pre><code>run : a.img\n[TAB]qemu-system-i386 -fda a.img\n</code></pre> <p>\u6267\u884c <code>make run</code>\uff0c\u6548\u679c\u5982\u56fe\uff1a</p> <p></p> <p>\uff08\u56fe 8-6 \u6539\u9020\u5b8c\u6210\uff09</p> <p>\u547c\uff0c\u7ecf\u8fc7\u4e00\u6574\u8282\u7684\u6574\u7406\uff0c\u6211\u4eec\u603b\u7b97\u662f\u6709\u4e86\u4e00\u4e2a\u53ef\u9760\u7684\u81ea\u52a8\u7f16\u8bd1\u7cfb\u7edf\u3002\u4e0b\u9762\uff0c\u6211\u4eec\u5c31\u7ee7\u7eed\u56de\u5230coding\u4e4b\u4e2d\u3002</p>"},{"location":"os-tutorial/old/09-gdtidt/","title":"09 \u91cd\u8bbe GDT\u3001IDT","text":"<p>\u65e9\u5728\u7b2c5\u8282\uff0c\u7b14\u8005\u5176\u5b9e\u5c31\u5df2\u7ecf\u8bf4\u8fc7 <code>GDT</code> \u5230\u5e95\u662f\u4e2a\u4ec0\u4e48\u4e1c\u897f\u4e86\u3002\u4f46\u662f\uff0c\u5f53\u65f6\u8bf4\u5f97\u4e0d\u591f\u660e\u786e\uff0c\u8bed\u7109\u4e0d\u8be6\uff0c\u56e0\u6b64\u5728\u8fd9\u91cc\u91cd\u65b0\u8bf4\u4e00\u904d\u3002</p> <p>\u81ea 8086 \u65f6\u4ee3\u4ee5\u6765\uff0c\u5185\u5b58\u4e00\u76f4\u662f\u4e00\u4e2aPC\u4e0a\u5fc5\u4e0d\u53ef\u5c11\u7684\u7269\u4ef6\u3002\u800c\u57288086\u7684\u65f6\u4ee3\uff0cintel\u7684\u5927\u53d4\u4eec\u62cd\u7740\u80f8\u812f\u8bf4\uff1a\u201c\u5185\u5b58\u7edd\u4e0d\u4f1a\u8d85\u8fc71MB\uff01\u201d</p> <p>\u7136\u800c\uff0c\u54ea\u6015\u5728\u5f53\u65f6\uff0c16\u4f4d\u7684\u5bc4\u5b58\u5668\u6700\u591a\u4e5f\u53ea\u80fd\u5bfb\u574064KB\u3002\u4e8e\u662f\uff0cintel\u7684\u5927\u53d4\u4eec\u60f3\u51fa\u4e86\u4e00\u79cd\u7edd\u5999\u7684\u65b9\u6cd5\uff0c\u518d\u52a0\u4e00\u7ec416\u4f4d\u5bc4\u5b58\u5668\uff0c\u53eb\u505a\u6bb5\u5bc4\u5b58\u5668\uff0c\u4e5f\u5c31\u662f <code>ds</code>\u3001<code>es</code>\u3001<code>fs</code>\u3001<code>gs</code>\u3001<code>ss</code>\uff0c\u8fd9\u6837\u5728\u5bfb\u5740\u65f6\uff0c\u7ed9\u6bb5\u5bc4\u5b58\u5668\u4e5816\uff0c\u518d\u52a0\u4e0a\u539f\u672c\u7684\u5730\u5740\uff0c\u5c31\u6709\u4e86 64KB*16+64KB=1088KB \u7684\u5bfb\u5740\u7a7a\u95f4\uff0c\u6bd41MB\u521a\u521a\u8d85\u8fc7\u4e00\u70b9\u3002\u5269\u4e0b\u7684 64KB\uff0cintel\u7684\u5927\u53d4\u4eec\u9009\u62e9\u8ba9\u5b83\u4eec\u6307\u56de0~64KB\uff0c\u5b8c\u7f8e\uff01</p> <p>\u8fdb\u516532\u4f4d\u4e4b\u540e\uff0c\u753132\u4f4d\u5bc4\u5b58\u5668\u6765\u5bfb\u5740\uff0c\u5bfb\u5740\u7a7a\u95f4\u53ef\u8fbe4GB\uff0c\u518d\u8fd9\u4e48\u7ef4\u6301\u4e0b\u53bb\u5c31\u4e0d\u591f\u7528\u4e86\u3002\u540c\u65f6\uff0c32\u4f4d\u6a21\u5f0f\u53c8\u79f0\u201c\u4fdd\u62a4\u201d\u6a21\u5f0f\uff0c\u73b0\u6709\u7684\u65b9\u6cd5\u4e5f\u4e0d\u8db3\u4ee5\u8fdb\u884c\u201c\u4fdd\u62a4\u201d\uff0c\u8fd9\u5c31\u8feb\u5207\u5730\u9700\u8981\u5bf9\u6bb5\u8fdb\u884c\u6539\u9769\u3002</p> <p>\u6539\u9769\u7684\u5177\u4f53\u65b9\u6cd5\u5982\u4e0b\u3002\u9996\u5148\u662f\u6bb5\u5bc4\u5b58\u5668\uff0c\u5b83\u4eec\u4e0d\u518d\u662f\u4e58\u4ee516\u7684\u8fd9\u4e48\u4e00\u4e2a\u4ee3\u8868\uff0c\u800c\u662f\u4e00\u4e2a\u9009\u62e9\u5b50\uff0c\u7ed3\u6784\u5982\u4e0b\uff1a</p> <p></p> <p>\uff08\u56fe 9-1 \u9009\u62e9\u5b50\u7ed3\u6784\uff09</p> <p>\u5176\u4e2d\u7684 <code>TI</code> \u548c <code>RPL</code> \u6b63\u662f\u8fd9\u79cd\u6539\u9769\u5f15\u5165\u7684\u65b0\u4e1c\u897f\uff0c\u540e\u9762\u8fd8\u8981\u8bb2\u5230\uff0c\u5728\u8fd9\u91cc\u4e0d\u591a\u8bf4\u3002\u591a\u8bf4\u51e0\u53e5\u7684\u662f\u5269\u4e0b\u768412\u4f4d\uff0c\u5b83\u4ee3\u8868\u7684\u662f\u63cf\u8ff0\u7b26\u7d22\u5f15\u3002\u4f55\u4e3a\u63cf\u8ff0\u7b26\uff1fGDT \u5168\u79f0 Global Descriptor Table\uff08\u5168\u5c40\u63cf\u8ff0\u7b26\u8868\uff09\uff0c\u5176\u5b9e\u5c31\u662fGDT\u7684\u8868\u9879\u3002</p> <p>\u597d\uff0c\u6bb5\u5bc4\u5b58\u5668\u6539\u9769\u5b8c\u6bd5\u4e86\uff0c\u4f46\u6bb5\u672c\u8eab\u4e5f\u8981\u8fdb\u884c\u6539\u9769\uff0c\u5b83\u4e0d\u80fd\u518d\u53ea\u4ee3\u8868\u4e00\u6bb5\u8fde\u7eed\u7684\u5185\u5b58\u4e86\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4e3a\u4e86\u5c3d\u529b\u538b\u7f29\u7a7a\u95f4\uff0cintel\u7684\u5927\u53d4\u4eec\u8fd8\u662f\u82b1\u4e86\u76f8\u5f53\u7684\u529f\u592b\u7684\uff0c\u4f46\u6700\u540e\u4e5f\u5c31\u5f62\u6210\u4e86\u4e00\u79cd\u5341\u5206\u7578\u5f62\u7684\u7ed3\u6784\uff1a</p> <p></p> <p>\uff08\u56fe 9-2 \u63cf\u8ff0\u7b26\u7ed3\u6784\uff09</p> <p>\u6240\u8c13\u524d\u4eba\u6316\u5751\uff0c\u540e\u4eba\u517c\u5bb9\uff0c\u5c4e\u5c71\u5927\u90fd\u662f\u8fd9\u4e48\u5806\u8d77\u6765\u7684\uff0c\u8fd9\u79cd\u7ed3\u6784\u4e00\u76f4\u4fdd\u5b58\u5230\u73b0\u5728\u768464\u4f4d\uff08\u7b11\uff09\u2026\u2026\u4e0d\u8bf4\u522b\u7684\u4e86\uff0c\u6211\u4eec\u6765\u8003\u8651\u4e9b\u66f4\u52a0\u73b0\u5b9e\u7684\u95ee\u9898\u3002</p> <p>\u65e9\u5728 Loader \u7684\u9636\u6bb5\uff0c\u6211\u4eec\u5df2\u7ecf\u8bbe\u7f6e\u8fc7 GDT\uff0c\u4e0d\u8fc7\u5b83\u7684\u6837\u5b50\u5927\u5bb6\u6050\u6015\u90fd\u5df2\u7ecf\u5fd8\u5b8c\u4e86\u5427\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u628a GDT \u79fb\u5230\u5185\u6838\u6765\u63a7\u5236\u3002</p> <p>GDT \u8fd8\u6709\u53e6\u5916\u4e00\u4e2a\u4f5c\u7528\uff0c\u90a3\u5c31\u662f IDT \u9700\u8981\u4f9d\u8d56 GDT \u63d0\u4f9b\u7684\u4ee3\u7801\u6bb5\u9009\u62e9\u5b50\u8fdb\u884c\u8bbe\u7f6e\uff0c\u6240\u4ee5\u5fc5\u987b\u5148\u8bbe\u7f6e GDT \u624d\u80fd\u8bbe\u7f6e IDT\u3002</p> <p>\u90a3\u4e48\uff0c\u6211\u4eec\u5f00\u59cb\u5427\u3002\u4f9d\u7167\u4e0a\u9762\u7684\u7ed3\u6784\uff0c\u65b0\u5efa <code>gdtidt.h</code>\uff0c\u5b9a\u4e49 GDT \u63cf\u8ff0\u7b26\u5982\u4e0b\uff1a</p> <p>\u4ee3\u7801 9-1 GDT\u63cf\u8ff0\u7b26\uff08include/gdtidt.h\uff09 <pre><code>struct gdt_entry_struct {\n    uint16_t limit_low; // BYTE 0~1\n    uint16_t base_low; // BYTE 2~3\n    uint8_t base_mid; // BYTE 4\n    uint8_t access_right; // BYTE 5, P|DPL|S|TYPE (1|2|1|4)\n    uint8_t limit_high; // BYTE 6, G|D/B|0|AVL|limit_high (1|1|1|1|4)\n    uint8_t base_high; // BYTE 7\n} __attribute__((packed));\n\ntypedef struct gdt_entry_struct gdt_entry_t;\n</code></pre></p> <p>\u7531\u4e8e C \u8bed\u8a00\u7f16\u8bd1\u5668\u7684\u5bf9\u9f50\u673a\u5236\uff0c\u5982\u679c\u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c\u4f1a\u5bfc\u81f4 GDT \u7684\u8868\u9879\u4e0e\u786c\u4ef6\u4e0d\u7b26\uff0c\u56e0\u6b64\u9700\u8981\u52a0\u5165 <code>__attribute__((packed))</code> \u7981\u7528\u5bf9\u9f50\u529f\u80fd\u3002\u4e0b\u9762\u90a3\u4e2a <code>typedef</code> \u4ec5\u4ec5\u662f\u4e3a\u4e86\u770b\u7740\u65b9\u4fbf\u3002</p> <p>CPU \u5982\u4f55\u77e5\u9053 GDT \u7684\u66f4\u6539\u5462\uff1f\u8fd9\u9700\u8981\u901a\u8fc7\u4e00\u4e2a\u6c47\u7f16\u6307\u4ee4\uff1a<code>lgdt [addr]</code>\uff0c\u5b83\u53ef\u4ee5\u4ece <code>addr</code> \u5904\u8bfb\u53d6\u516d\u4e2a\u5b57\u8282\u4f5c\u4e3a\u65b0\u7684 GDTR \u5bc4\u5b58\u5668\uff0c\u4ece\u800c\u544a\u77e5 CPU \u65b0\u7684 GDT \u4f4d\u7f6e\u3002</p> <p>GDTR \u7684\u7ed3\u6784\u5728\u524d\u56fe 5-5 \u4e2d\u6709\u8fc7\u6807\u660e\uff0c\u8fd9\u91cc\u518d\u653e\u4e00\u904d\uff1a</p> <p></p> <p>\uff08\u56fe 9-3 <code>gdtr</code> \u7ed3\u6784\uff09</p> <p>\u4ee5\u4e0b\u662f C \u8bed\u8a00\u5b9a\u4e49\u7684 GDTR \u7ed3\u6784\uff1a</p> <p>\u4ee3\u7801 9-2 GDT\u63cf\u8ff0\u7b26\uff08include/gdtidt.h\uff09 <pre><code>struct gdt_ptr_struct {\n    uint16_t limit;\n    uint32_t base;\n} __attribute__((packed));\n\ntypedef struct gdt_ptr_struct gdt_ptr_t;\n</code></pre></p> <p>\u51fa\u4e8e\u540c\u6837\u7684\u7406\u7531\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 <code>__attribute__((packed))</code>\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u65b0\u5efa <code>gdtidt.c</code>\uff0c\u6211\u4eec\u6765\u5199\u4e00\u4e9b\u5b9e\u9645\u5185\u5bb9\u3002\u9996\u5148\u662f\u51e0\u4e2a\u7b80\u5355\u7684\u58f0\u660e\uff1a</p> <p>\u4ee3\u7801 9-3 \u5934\u90e8\u58f0\u660e\uff08kernel/gdtidt.c\uff09 <pre><code>#include \"common.h\"\n#include \"gdtidt.h\"\n\nextern void gdt_flush(uint32_t);\n\ngdt_entry_t gdt_entries[4096];\ngdt_ptr_t gdt_ptr;\n</code></pre></p> <p>\u7d27\u63a5\u7740\u662f\u5199\u5165 GDT \u8868\u9879\u7684\u51fd\u6570\u5982\u4e0b\uff1a</p> <p>\u4ee3\u7801 9-4 \u5199\u5165GDT\u8868\u9879\uff08kernel/gdtidt.c\uff09 <pre><code>void gdt_set_gate(int32_t num, uint32_t base, uint32_t limit, uint16_t ar)\n{\n    if (limit &gt; 0xfffff) { // \u6bb5\u4e0a\u9650\u8d85\u8fc71MB\n        ar |= 0x8000; // ar\u7684\u7b2c15\u4f4d\uff08\u5c06\u88ab\u5f53\u4f5climit_high\u4e2d\u7684G\u4f4d\uff09\u8bbe\u4e3a1\n        limit /= 0x1000; // \u6bb5\u4e0a\u9650\u7f29\u5c0f\u4e3a\u539f\u6765\u76841/4096\uff0cG\u4f4d\u8868\u793a\u6bb5\u4e0a\u9650\u4e3a\u5b9e\u9645\u76844KB\n    }\n    // base\u90e8\u5206\u6ca1\u6709\u5176\u4ed6\u7684\u5947\u602a\u4e1c\u897f\u6df7\u6742\uff0c\u5f88\u597d\u8bf4\n    gdt_entries[num].base_low = base &amp; 0xFFFF; // \u4f4e16\u4f4d\n    gdt_entries[num].base_mid = (base &gt;&gt; 16) &amp; 0xFF; // \u4e2d\u95f48\u4f4d\n    gdt_entries[num].base_high = (base &gt;&gt; 24) &amp; 0xFF; // \u9ad88\u4f4d\n    // limit\u90e8\u5206\u6df7\u4e86\u4e00\u5768ar\u8fdb\u6765\uff0c\u7565\u5fae\u590d\u6742\n    gdt_entries[num].limit_low = limit &amp; 0xFFFF; // \u4f4e16\u4f4d\n    gdt_entries[num].limit_high = ((limit &gt;&gt; 16) &amp; 0x0F) | ((ar &gt;&gt; 8) &amp; 0xF0); // \u73b0\u5728\u7684limit\u6700\u591a\u4e3a0xfffff\uff0c\u6240\u4ee5\u6700\u9ad8\u4f4d\u53ea\u52694\u4f4d\u4f5c\u4e3a\u4f4e4\u4f4d\uff0c\u9ad84\u4f4d\u81ea\u7136\u88abar\u7684\u9ad812\u4f4d\u6324\u5360\n\n    gdt_entries[num].access_right = ar &amp; 0xFF; // ar\u90e8\u5206\u53ea\u80fd\u5b58\u4f4e4\u4f4d\u4e86\n}\n</code></pre></p> <p>\u8fd9\u4e00\u90e8\u5206\u7684\u4ee3\u7801\u6bd4\u8f83\u62bd\u8c61\uff0c\u56e0\u4e3a\u5b83\u4e0e\u5e95\u5c42\u786c\u4ef6\u903b\u8f91\u5bc6\u5207\u76f8\u5173\uff0c\u5efa\u8bae\u5927\u5bb6\u5728\u7406\u89e3\u65f6\u7ed3\u5408\u6ce8\u91ca\u5e76\u5bf9\u7167\u524d\u9762\u7684\u56fe9-2\uff08\u63cf\u8ff0\u7b26\u7ed3\u6784\uff09\u6765\u7406\u89e3\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6765\u521d\u59cb\u5316\u6574\u4e2a GDT \u8868\uff0c\u540c\u6837\u4f4d\u4e8e <code>gdtidt.c</code>\uff1a</p> <p>\u4ee3\u7801 9-5 \u521d\u59cb\u5316 GDT\uff08kernel/gdtidt.c\uff09 <pre><code>static void init_gdt()\n{\n    gdt_ptr.limit = sizeof(gdt_entry_t) * 4096 - 1; // GDT\u603b\u51714096\u4e2a\u63cf\u8ff0\u7b26\uff0c\u4f46\u6211\u4eec\u603b\u5171\u53ea\u7528\u52303\u4e2a\n    gdt_ptr.base = (uint32_t) &amp;gdt_entries; // \u57fa\u5730\u5740\n\n    gdt_set_gate(0, 0, 0,          0); // \u5360\u4f4d\u7528NULL\u6bb5\n    gdt_set_gate(1, 0, 0xFFFFFFFF, 0x409A); // 32\u4f4d\u4ee3\u7801\u6bb5\n    gdt_set_gate(2, 0, 0xFFFFFFFF, 0x4092); // 32\u4f4d\u6570\u636e\u6bb5\n\n    gdt_flush((uint32_t) &amp;gdt_ptr); // \u5237\u65b0gdt\n}\n\nvoid init_gdtidt()\n{\n    init_gdt(); // \u76ee\u524d\u53ea\u6709gdt\n}\n</code></pre></p> <p>\u8fd9\u4e2a0x409A\u30010x4092\u5c31\u7eaf\u9760\u6b7b\u8bb0\u786c\u80cc\u4e86\uff0c\u786c\u4ef6\u89c4\u7a0b\u5982\u6b64\u3002</p> <p>\u6700\u540e\u662f\u8fd9\u4e2a <code>gdt_flush</code>\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a</p> <p>\u4ee3\u7801 9-6 \u5237\u65b0GDT\uff08lib/nasmfunc.asm\uff09 <pre><code>[global gdt_flush]\n\ngdt_flush:\n    mov eax, [esp + 4] ; \u6839\u636eC\u7f16\u8bd1\u5668\u7ea6\u5b9a\uff0cC\u8bed\u8a00\u4f20\u5165\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f4d\u4e8e\u5185\u5b58esp + 4\u5904\uff0c\u7b2c\u4e8c\u4e2a\u4f4d\u4e8eesp + 8\u5904\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u7b2cn\u4e2a\u4f4d\u4e8eesp + n * 4\u5904\n    lgdt [eax] ; \u52a0\u8f7dgdt\u5e76\u91cd\u65b0\u8bbe\u7f6e\n; \u63a5\u4e0b\u6765\u91cd\u65b0\u8bbe\u7f6e\u5404\u6bb5\n    mov ax, 0x10\n    mov ds, ax\n    mov es, ax\n    mov fs, ax\n    mov gs, ax\n    mov ss, ax ; \u6240\u6709\u6570\u636e\u6bb5\u5747\u4f7f\u75282\u53f7\u6570\u636e\u6bb5\n    jmp 0x08:.flush ; \u5229\u7528farjmp\u91cd\u7f6e\u4ee3\u7801\u6bb5\u4e3a1\u53f7\u4ee3\u7801\u6bb5\u5e76\u5237\u65b0\u6d41\u6c34\u7ebf\n.flush:\n    ret ; \u5b8c\u6210\n</code></pre></p> <p>\u6ce8\u91ca\u91cc\u63d0\u5230\u4e86\u4e00\u4e2a\u201c\u7f16\u8bd1\u5668\u7ea6\u5b9a\u201d\uff0c\u8fd9\u4e2a\u7ea6\u5b9a\u662f\u4f20\u53c2\u6570\u65f6\u5019\u7684\u7ea6\u5b9a\uff1b\u800c\u5728\u51fd\u6570\u8c03\u7528\u4e0a\uff0c\u786c\u4ef6\u672c\u8eab\u4e5f\u6709\u4e00\u4e9b\u89c4\u5b9a\uff0c\u5728\u8fd9\u91cc\u4e00\u5e76\u8bf4\u4e00\u8bf4\u3002</p> <p>\u65e0\u8bba\u662f\u5728\u54ea\u79cd\u6a21\u5f0f\u4e0b\uff0c\u4f46\u51e1\u8c03\u7528\u51fd\u6570\uff0c\u57fa\u672c\u90fd\u6d89\u53ca\u4e00\u4e2a\u8fd4\u56de\u7684\u95ee\u9898\u3002\u65e2\u7136\u8981\u8fd4\u56de\uff0c\u6211\u5c31\u5f97\u65f6\u65f6\u523b\u523b\u77e5\u9053\u8981\u8fd4\u56de\u5230\u4ec0\u4e48\u4f4d\u7f6e\uff0c\u8fd4\u56de\u5730\u5740\u8fd9\u4e2a\u4e1c\u897f\u5c31\u5f97\u4fdd\u5b58\uff0c\u4fdd\u5728\u4ec0\u4e48\u5730\u65b9\u5462\uff1fintel \u65b9\u9762\u9009\u62e9\u4e86 <code>esp</code> \u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f\u5f53\u524d\u6808\u9876\u5c31\u662f\u5f85\u8fd4\u56de\u7684\u4f4d\u7f6e\u3002</p> <p>\u63a5\u4e0b\u6765\u4e00\u4e2a\u81ea\u7136\u7684\u60f3\u6cd5\uff0c\u5c31\u662f\u628a\u51fd\u6570\u6709\u5173\u7684\u4e1c\u897f\u5168\u90fd\u653e\u5728\u6808\u91cc\u3002\u7531\u4e8e 32 \u4f4d\u6a21\u5f0f\u5730\u5740\u53ef\u8fbe 4 \u5b57\u8282\uff0c\u56e0\u6b64\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684\u4f4d\u7f6e\u662f <code>esp + 4</code>\uff0c\u8fd9\u4e2a\u53c2\u6570\u53c8\u53ef\u4ee5\u5360\u7528 4 \u5b57\u8282\uff0c\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684\u4f4d\u7f6e\u5c31\u662f <code>esp + 8</code>\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u6b63\u662f gcc \u4f20\u53c2\u4f7f\u7528\u7684\u6a21\u5f0f\uff08\u5176\u5b9e\u4e5f\u53ef\u4ee5\u6307\u5b9a gcc \u4f7f\u7528\u5bc4\u5b58\u5668\uff0c<code>__attribute__((regparm(xxx)))</code> \u5176\u4e2d <code>xxx</code> \u8868\u793a\u4f7f\u7528\u5bc4\u5b58\u5668\u4f20\u53c2\u7684\u4e2a\u6570\uff09\u3002</p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd4\u56de\u7684\u6d41\u7a0b\u5b9e\u9645\u4e0a\u5c31\u662f <code>jmp [esp]</code>\uff08\u9ed8\u8ba4\u6808\u5e73\u8861\u7531\u88ab\u8c03\u7528\u65b9\u4fdd\u8bc1\uff0c\u56e0\u6b64\u5728\u6700\u540e\u6808\u9876\u5e94\u8be5\u56de\u5f52\u5230\u8fd4\u56de\u5730\u5740\u5904\uff09\u8fd9\u4e48\u4e00\u4e2a\u6d41\u7a0b\uff08\u5f53\u7136\u8fd8\u5305\u62ec\u4e00\u4e9b\u7ec6\u8282\u64cd\u4f5c\u5b9e\u9645\u4e0a\u6bd4\u8fd9\u590d\u6742\uff09\uff0c\u6240\u4ee5\u53ea\u8981\u968f\u4fbf\u627e\u4e2a\u5730\u65b9\u5199\u4e00\u4e2a\u5730\u5740\uff0c\u7136\u540e\u628a\u90a3\u4e2a\u5730\u65b9\u8bbe\u6210\u6808\u9876\u518d\u8c03\u7528 <code>ret</code>\uff0c\u5373\u4f7f\u6839\u672c\u6ca1\u6709\u8c03\u7528\u51fd\u6570\uff0c\u4e00\u6837\u53ef\u4ee5\u8d77\u5230\u201c\u4ece\u51fd\u6570\u8fd4\u56de\u201d\u7684\u6548\u679c\u3002</p> <p>\u8fd9\u6837\u7684\u64cd\u4f5c\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u5728\u540c\u4e00\u4e2a\u5730\u5740\u6bb5\u5f53\u7136\u6ca1\u4ec0\u4e48\u7528\uff0c\u8fd9\u6837\u505a\u751a\u81f3\u6709\u4e9b\u591a\u4f59\uff08\u5b8c\u5168\u53ef\u4ee5\u76f4\u63a5 <code>jmp</code>\uff09\u3002\u8fd9\u6837\u505a\u771f\u6b63\u7684\u7528\u9014\uff0c\u662f\u5728\u540e\u9762\u7b2c 22 \u8282\u7684\u542f\u52a8\u5e94\u7528\u7a0b\u5e8f\uff0c\u4ee5\u53ca 64 \u4f4d\u6a21\u5f0f\u4e0b\u7684\u65f6\u5019\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5c42\u7ea7\u7684 <code>farjmp</code>\uff08\u76f4\u63a5 <code>jmp</code> \u5230\u5176\u4ed6\u5730\u5740\u6bb5\uff0c\u4f7f\u7528\u4f8b\uff1a<code>jmp new_cs:new_ip</code>\uff09/<code>farcall</code>\uff08\u76f4\u63a5 <code>call</code> \u5176\u4ed6\u5730\u5740\u6bb5\u7684\u51fd\u6570\uff0c\u4f7f\u7528\u4f8b\uff1a<code>call new_cs:new_eip</code>\uff09\u88ab\u7981\u7528\uff0c\u53ea\u80fd\u4f7f\u7528\u8fd9\u6837\u7684\u65b9\u5f0f\u6765\u4ee3\u66ff\u76f4\u63a5\u8df3\u8f6c\u3002\u540c\u6837\u5730\uff0c<code>farcall</code> \u9700\u8981\u5bf9\u5e94 <code>farret</code> \u6765\u8fd4\u56de\uff0c\u800c <code>farjmp</code> \u5219\u548c\u666e\u901a <code>jmp</code> \u4e00\u6837\u4e00\u822c\u4e0d\u8003\u8651\u8fd4\u56de\u3002</p> <p>\u90a3\u4e48\u8fd9\u79cd <code>farjmp/farcall</code> \u4e0e\u666e\u901a\u7684 <code>jmp/call</code> \u6709\u4ec0\u4e48\u533a\u522b\u5462\uff1f\u9996\u5148\u65e0\u7591\u662f\u540c\u65f6\u6539\u53d8\u4e86 <code>cs</code> \u7684\u503c\uff0c\u800c <code>cs</code> \u9664\u5f00\u8fd9\u4e24\u79cd\u65b9\u6cd5\u5916\uff0c\u5c31\u53ea\u5269\u4e0b <code>farret</code> \u4e00\u79cd\u6539\u53d8\u65b9\u6cd5\u4e86\u3002\u786c\u8bf4\u8fd8\u6709\u4ec0\u4e48\u533a\u522b\uff0c\u4e5f\u5c31\u53ea\u5269\u4e0b\u6808\u4e86\u3002<code>farjmp</code> \u5bf9\u6808\u5012\u662f\u6ca1\u4ec0\u4e48\u6539\u52a8\uff0c<code>farcall</code> \u5219\u4f1a\u5728\u6808\u91cc\u540c\u65f6\u5b58\u4e00\u4e0b\u51e0\u6837\u4e1c\u897f\uff1a</p> <p><code>esp</code> -&gt; \u8fd4\u56de\u65f6 <code>eip</code>\uff1b<code>esp - 4</code> -&gt; \u8fd4\u56de\u65f6 <code>cs</code>\uff1b<code>esp - 8</code> -&gt; \u8fd4\u56de\u65f6 <code>esp</code>\uff1b<code>esp - 12</code> -&gt; \u8fd4\u56de\u65f6 <code>ss</code>\u3002</p> <p>\u800c\u5728 <code>farret</code> \u7684\u65f6\u5019\uff0c\u4e5f\u5c31\u4f1a\u628a\u8fd9\u56db\u6837\u4e1c\u897f\u4ece\u6808\u91cc\u5f39\u51fa\uff0c\u6700\u540e\u8fdb\u884c\u4e00\u4e2a\u76f8\u5f53\u4e8e <code>farjmp</code> \u7684\u64cd\u4f5c\uff0c\u628a <code>cs</code> \u548c <code>eip</code> \u53d8\u201c\u56de\u53bb\u201d\u3002\u6309\u7167\u4e0a\u9762 <code>ret</code> \u7684\u9053\u7406\uff0c\u540c\u6837\u53ef\u4ee5\u5728\u6808\u91cc\u63d0\u524d <code>push</code> \u597d\u8fd9\u56db\u6837\u4e1c\u897f\uff0c\u7136\u540e\u6267\u884c\u4e00\u4e2a <code>farret</code>\uff08\u8fd9\u4e2a\u76f4\u63a5 <code>retf</code> \u5c31\u884c\uff09\u540c\u65f6\u8bbe\u7f6e\u597d\u8fd9\u56db\u4e2a\u5bc4\u5b58\u5668\u7684\u540c\u65f6\u66f4\u6539\u6267\u884c\u6d41\u3002</p> <p>\u626f\u5f97\u6709\u70b9\u8fdc\u4e86\uff0c\u7a0d\u5fae\u5f80\u56de\u6536\u4e00\u6536\u3002\u5728\u63a5\u4e0b\u6765\u7684\u64cd\u4f5c\u5e94\u8be5\u90fd\u4e0d\u96be\u61c2\uff0c\u6700\u96be\u4ee5\u7406\u89e3\u7684\u5730\u65b9\u4e5f\u5c31\u662f <code>lgdt [eax]</code> \u4e86\u3002\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u4f20\u5165\u7684\u662f <code>gdt_ptr</code> \u7ed3\u6784\u4f53\u7684\u5730\u5740\uff0c\u9700\u8981\u52a0\u4e00\u4e2a <code>[gdt_ptr]</code> \u6765\u83b7\u5f97\u5b83\u5bf9\u5e94\u5185\u5b58\u91cc\u7684\u5177\u4f53\u6570\u503c\u3002\u518d\u5f80\u4e0b\u76f4\u63a5 <code>mov</code> \u548c\u4e0a\u9762\u89e3\u91ca\u8fc7\u7684 <code>farjmp</code> \u5e94\u8be5\u6ca1\u4ec0\u4e48\u9700\u8981\u8bf4\u7684\uff0c\u7531\u4e8e GDT \u53d1\u751f\u6539\u52a8\uff0c\u6240\u4ee5\u9700\u8981\u91cd\u65b0\u8bbe\u7f6e\u6bb5\u5bc4\u5b58\u5668\u7684\u503c\u3002</p> <p>\u7531\u4e8e\u65b0\u589e\u4e86\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u5728\u8fd9\u91cc\u987a\u4fbf\u66f4\u65b0\u4e00\u4e0b Makefile\uff1a</p> <p>\u4ee3\u7801 9-7 \u73b0\u5728\u7684Makefile\uff08Makefile\uff09 <pre><code>OBJS = out/kernel.o out/common.o out/monitor.o out/main.o out/gdtidt.o out/nasmfunc.o\n\nout/%.o : kernel/%.c\n    i686-elf-gcc -c -I include -O0 -fno-builtin -fno-stack-protector -o out/$*.o kernel/$*.c\n\nout/%.o : kernel/%.asm\n    nasm -f elf -o out/$*.o kernel/$*.asm\n\nout/%.o : lib/%.c\n    i686-elf-gcc -c -I include -O0 -fno-builtin -fno-stack-protector -o out/$*.o lib/$*.c\n\nout/%.o : lib/%.asm\n    nasm -f elf -o out/$*.o lib/$*.asm\n\nout/%.bin : boot/%.asm\n    nasm -I boot/include -o out/$*.bin boot/$*.asm\n\nout/kernel.bin : $(OBJS)\n    i686-elf-ld -s -Ttext 0x100000 -o out/kernel.bin $(OBJS)\n\na.img : out/boot.bin out/loader.bin out/kernel.bin\n    dd if=out/boot.bin of=a.img bs=512 count=1\n    edimg imgin:a.img copy from:out/loader.bin to:@: copy from:out/kernel.bin to:@: imgout:a.img\n\nrun : a.img\n    qemu-system-i386 -fda a.img\n</code></pre></p> <p>\u540c\u6837\uff0c\u4f7f\u7528 macOS/Linux \u8ddf\u968f\u672c\u6559\u7a0b\u5b66\u4e60\u7684\u9700\u8981\u81ea\u884c\u66f4\u6539 <code>i686-elf-gcc</code>\u3001<code>i686-elf-ld</code> \u4ee5\u53ca\u5bf9 <code>a.img</code> \u8fdb\u884c\u5199\u5165\u7684\u884c\u4e3a\uff0c\u6240\u6709\u7684\u5185\u5bb9\u5747\u5728\u7b2c0\u30011\u30018\u8282\u6709\u6240\u4ecb\u7ecd\uff0c\u5728\u6b64\u4e0d\u591a\u8d58\u8ff0\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u4fee\u6539 <code>main.c</code> \u7528\u4e8e\u6d4b\u8bd5\u73b0\u5728\u7684 GDT \u662f\u5426\u6709\u6548\uff1a</p> <p>\u4ee3\u7801 9-8 \u5bf9\u91cd\u8bbe GDT \u7684\u6d4b\u8bd5\uff08kernel/main.c\uff09 <pre><code>#include \"monitor.h\"\n#include \"gdtidt.h\"\n\nvoid kernel_main() // kernel.asm\u4f1a\u8df3\u8f6c\u5230\u8fd9\u91cc\n{\n    init_gdtidt();\n    monitor_clear(); // \u5148\u6e05\u5c4f\n    monitor_write(\"Hello, kernel world!\\n\");\n    // \u9a8c\u8bc1write_hex\u548cwrite_dec\uff0c\u7531\u4e8e\u6ca1\u6709printf\uff0c\u8fd9\u4e00\u6b65\u5341\u5206\u70e6\u4eba\n    monitor_write_hex(0x114514);\n    monitor_write(\" = \");\n    monitor_write_dec(0x114514);\n    monitor_write(\"\\n\");\n\n    // \u60ac\u505c\n    while (1);\n}\n</code></pre></p> <p>\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u6548\u679c\u4ecd\u5e94\u5982\u56fe 8-6\u6240\u793a\u3002\u82e5\u60a8\u7684qemu\u6587\u5b57\u5f00\u59cb\u65e0\u9650\u53d8\u6362\uff0c\u8bf7\u68c0\u67e5\u60a8\u7684\u4ee3\u7801\u662f\u5426\u5728\u8fd0\u8f93\u9014\u4e2d\u51fa\u73b0\u4e86\u4e00\u4e9b\u95ee\u9898\uff08\uff1f\uff09</p> <p>\u597d\u4e86\uff0c\u4e00\u523b\u90fd\u6ca1\u6709\u4e3a GDT \u7684\u66f4\u6539\u5982\u6b64\u5e73\u6de1\u800c\u54c0\u60bc\uff0c\u7acb\u523b\u8d76\u5230\u73b0\u573a\u7684\u662f\u2014\u2014IDT\uff01</p> <p>\u4e8b\u5b9e\u4e0a\uff0c\u524d\u9762\u63d0\u5230\u7684qemu\u5185\u90e8\u6587\u5b57\u7684\u65e0\u9650\u53d8\u6362\u662f\u5e95\u5c42 CPU \u65e0\u9650\u91cd\u542f\u7684\u73b0\u8c61\uff0c\u800c\u9020\u6210\u5b83\u65e0\u9650\u91cd\u542f\u7684\u6839\u672c\u539f\u56e0\u5219\u662f\u627e\u4e0d\u5230\u5bf9\u5e94\u7684\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u3002\u56e0\u6b64\uff0c\u73b0\u5728\u7684\u5f53\u52a1\u4e4b\u6025\u662f\u4e3a\u6240\u6709\u5f02\u5e38\u8bbe\u7f6e\u5bf9\u5e94\u7684\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\uff0c\u8fd9\u5c31\u9700\u8981 IDT \u4e86\u3002</p> <p>\u5982\u679c\u8bf4\u91cd\u65b0\u8bbe\u7f6e GDT \u7684\u539f\u56e0\u662f\u5b83\u4f4d\u4e8e Loader \u5185\uff0c\u6781\u4e0d\u53ef\u63a7\uff0c\u90a3\u4e48\u91cd\u8bbe IDT \u7684\u539f\u56e0\u5c31\u662f\uff0c\u73b0\u5728\u7684 IDT \u6839\u672c\u5c31\u662f\u5565\u90fd\u6ca1\u6709\u3002</p> <p>\u4e0e GDT \u76f8\u540c\uff0cIDT \u7684\u6bcf\u4e00\u4e2a\u8868\u9879\u4e5f\u53eb\u505a\u63cf\u8ff0\u7b26\uff0c\u4e0d\u8fc7\u4e3a\u4e86\u4e0e GDT \u7684\u63cf\u8ff0\u7b26\u533a\u5206\uff0c\u4e00\u822c\u79f0 IDT \u7684\u8868\u9879\u4e3a\u4e2d\u65ad\u63cf\u8ff0\u7b26\u3002\u7531\u4e8e\u4e2d\u65ad\u63cf\u8ff0\u7b26\u7ed3\u6784\u6781\u5176\u7b80\u5355\uff0c\u6b64\u5904\u4e0d\u8d34\u56fe\u3002</p> <p>\u4e0e GDT \u7c7b\u4f3c\uff0c\u8ba9 CPU \u77e5\u9053 IDT \u5728\u54ea\u7684\u65b9\u6cd5\u662f\u7528 <code>lidt</code> \u6307\u4ee4\u8bbe\u7f6e\u4e00\u4e2a IDTR \u5bc4\u5b58\u5668\uff0c\u5176\u7ed3\u6784\u4e0e GDTR \u5bc4\u5b58\u5668\u5b8c\u5168\u4e00\u81f4\u3002</p> <p>\u4e2d\u65ad\u63cf\u8ff0\u7b26\u4e0e IDTR \u5bc4\u5b58\u5668\u7ed3\u6784\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <p>\u4ee3\u7801 9-9 IDT\u8868\u9879\u4e0eIDTR\uff08include/gdtidt.h\uff09 <pre><code>struct idt_entry_struct {\n    uint16_t offset_low, selector; // offset_low\u91cc\u6ca1\u6709\u4e00\u5768\uff0cselector\u4e3a\u5bf9\u5e94\u7684\u4fdd\u62a4\u6a21\u5f0f\u4ee3\u7801\u6bb5\n    uint8_t dw_count, access_right; // dw_count\u59cb\u7ec8\u4e3a0\uff0caccess_right\u7684\u503c\u5927\u591a\u4e0e\u786c\u4ef6\u89c4\u7a0b\u76f8\u5173\uff0c\u53ea\u9700\u8981\u6b7b\u8bb0\u786c\u80cc\uff0c\u4e0d\u9700\u8981\u8fdb\u4e00\u6b65\u4e86\u89e3\uff08\n    uint16_t offset_high; // offset_high\u91cc\u4e5f\u6ca1\u6709\u4e00\u5768\n} __attribute__((packed));\n\ntypedef struct idt_entry_struct idt_entry_t;\n\nstruct idt_ptr_struct {\n    uint16_t limit;\n    uint32_t base;\n} __attribute__((packed));\n\ntypedef struct idt_ptr_struct idt_ptr_t;\n</code></pre></p> <p>\u67e5\u8be2\u8d44\u6599\u53ef\u77e5\uff0cintel x86 \u603b\u5171\u670932\u4e2a\u5f02\u5e38\uff0c\u6211\u4eec\u8bb0\u4e3a isr0~isr31\u3002\u5728\u8fd9\u91cc\u9700\u8981\u5bf9\u5b83\u4eec\u8fdb\u884c\u51fd\u6570\u58f0\u660e\u5982\u4e0b\uff1a</p> <p>\u4ee3\u7801 9-10 \u5bf9\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u7684\u58f0\u660e\uff08include/gdtidt.h\uff09 <pre><code>extern void isr0();\nextern void isr1();\nextern void isr2();\nextern void isr3();\nextern void isr4();\nextern void isr5();\nextern void isr6();\nextern void isr7();\nextern void isr8();\nextern void isr9();\nextern void isr10();\nextern void isr11();\nextern void isr12();\nextern void isr13();\nextern void isr14();\nextern void isr15();\nextern void isr16();\nextern void isr17();\nextern void isr18();\nextern void isr19();\nextern void isr20();\nextern void isr21();\nextern void isr22();\nextern void isr23();\nextern void isr24();\nextern void isr25();\nextern void isr26();\nextern void isr27();\nextern void isr28();\nextern void isr29();\nextern void isr30();\nextern void isr31();\n</code></pre></p> <p>\u7531\u4e8e\u6ca1\u6709\u70e6\u4eba\u7684\u4e00\u5768\u5768\uff0cIDT\u8868\u9879\u7684\u8bbe\u7f6e\u5341\u5206\u7b80\u5355\uff1a</p> <p>\u4ee3\u7801 9-11 \u8bbe\u7f6e\u4e2d\u65ad\u63cf\u8ff0\u7b26\u3001\u521d\u59cb\u5316IDT\uff08kernel/gdtidt.c\uff09 <pre><code>static void idt_set_gate(uint8_t num, uint32_t offset, uint16_t sel, uint8_t flags)\n{\n    idt_entries[num].offset_low = offset &amp; 0xFFFF;\n    idt_entries[num].selector = sel;\n    idt_entries[num].dw_count = 0;\n    idt_entries[num].access_right = flags;\n    idt_entries[num].offset_high = (offset &gt;&gt; 16) &amp; 0xFFFF;\n}\n\nstatic void init_idt()\n{\n    idt_ptr.limit = sizeof(idt_entry_t) * 256 - 1;\n    idt_ptr.base = (uint32_t) &amp;idt_entries;\n\n    memset(&amp;idt_entries, 0, sizeof(idt_entry_t) * 256);\n\n    idt_set_gate(0, (uint32_t) isr0, 0x08, 0x8E);\n    idt_set_gate(1, (uint32_t) isr1, 0x08, 0x8E);\n    idt_set_gate(2, (uint32_t) isr2, 0x08, 0x8E);\n    idt_set_gate(3, (uint32_t) isr3, 0x08, 0x8E);\n    idt_set_gate(4, (uint32_t) isr4, 0x08, 0x8E);\n    idt_set_gate(5, (uint32_t) isr5, 0x08, 0x8E);\n    idt_set_gate(6, (uint32_t) isr6, 0x08, 0x8E);\n    idt_set_gate(7, (uint32_t) isr7, 0x08, 0x8E);\n    idt_set_gate(8, (uint32_t) isr8, 0x08, 0x8E);\n    idt_set_gate(9, (uint32_t) isr9, 0x08, 0x8E);\n    idt_set_gate(10, (uint32_t) isr10, 0x08, 0x8E);\n    idt_set_gate(11, (uint32_t) isr11, 0x08, 0x8E);\n    idt_set_gate(12, (uint32_t) isr12, 0x08, 0x8E);\n    idt_set_gate(13, (uint32_t) isr13, 0x08, 0x8E);\n    idt_set_gate(14, (uint32_t) isr14, 0x08, 0x8E);\n    idt_set_gate(15, (uint32_t) isr15, 0x08, 0x8E);\n    idt_set_gate(16, (uint32_t) isr16, 0x08, 0x8E);\n    idt_set_gate(17, (uint32_t) isr17, 0x08, 0x8E);\n    idt_set_gate(18, (uint32_t) isr18, 0x08, 0x8E);\n    idt_set_gate(19, (uint32_t) isr19, 0x08, 0x8E);\n    idt_set_gate(20, (uint32_t) isr20, 0x08, 0x8E);\n    idt_set_gate(21, (uint32_t) isr21, 0x08, 0x8E);\n    idt_set_gate(22, (uint32_t) isr22, 0x08, 0x8E);\n    idt_set_gate(23, (uint32_t) isr23, 0x08, 0x8E);\n    idt_set_gate(24, (uint32_t) isr24, 0x08, 0x8E);\n    idt_set_gate(25, (uint32_t) isr25, 0x08, 0x8E);\n    idt_set_gate(26, (uint32_t) isr26, 0x08, 0x8E);\n    idt_set_gate(27, (uint32_t) isr27, 0x08, 0x8E);\n    idt_set_gate(28, (uint32_t) isr28, 0x08, 0x8E);\n    idt_set_gate(29, (uint32_t) isr29, 0x08, 0x8E);\n    idt_set_gate(30, (uint32_t) isr30, 0x08, 0x8E);\n    idt_set_gate(31, (uint32_t) isr31, 0x08, 0x8E);\n\n    idt_flush((uint32_t) &amp;idt_ptr);\n}\n</code></pre></p> <p>\u4ee3\u7801 9-12 idt_flush\uff08lib/nasmfunc.asm\uff09 <pre><code>[global idt_flush]\nidt_flush:\n    mov eax, [esp + 4]\n    lidt [eax]\n    ret\n</code></pre></p> <p>\u770b\u7740\u5f88\u957f\uff0c\u5176\u5b9e\u5927\u90e8\u5206\u90fd\u662f\u91cd\u590d\u7684\u30020x08\u8868\u793a\u5185\u6838\u4ee3\u7801\u6bb5\uff0c0x8E\u7684\u542b\u4e49\u65e0\u9700\u4e86\u89e3\uff0c\u4f46\u662f\u53ea\u6709\u8fd9\u6837\u8bbe\u7f6e\u624d\u80fd\u6b63\u786e\u8bbe\u7f6e\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u5c31\u662f\u5bf9\u8fd932\u4e2a\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u8fdb\u884c\u7f16\u5199\u4e86\u3002\u5176\u5b9e\u5b83\u4eec\u5f53\u4e2d\u7684\u76f8\u5f53\u4e00\u90e8\u5206\u90fd\u662f\u91cd\u590d\u7684\u3002\u5177\u4f53\u800c\u8a00\uff0c\u5148\u662f\u8981\u5bf9\u4e2d\u65ad\u73af\u5883\u8fdb\u884c\u4fdd\u5b58\uff0c\u4f7f CPU \u77e5\u9053\u5f02\u5e38\u53d1\u751f\u65f6\u7684\u57fa\u672c\u9519\u8bef\u4fe1\u606f\uff1b\u7136\u540e\uff0c\u662f\u8c03\u7528\u5bf9\u5e94\u7684\u9ad8\u5c42\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\uff0c\u8fd9\u4e00\u90e8\u5206\u53ef\u4ee5\u7528 C \u8bed\u8a00\u5b8c\u6210\u3002</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u51fa\u4e00\u4e2a\u6a21\u7cca\u7684\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u6846\u67b6\uff1a</p> <p>\u4ee3\u7801 9-13 \u6a21\u7cca\u6846\u67b6\uff08\u65e0\u6587\u4ef6\uff09 <pre><code>%macro ISR 1\n[global isr%1]\nisr%1:\n    push %1 ; \u4f7f\u5904\u7406\u7a0b\u5e8f\u77e5\u9053\u5f02\u5e38\u53f7\u7801\n    jmp isr_common_stub ; \u901a\u7528\u90e8\u5206\n%endmacro\n</code></pre></p> <p>\u8fd9\u4e2a <code>%macro</code> \u5728\u7b2c\u4e94\u8282\u5df2\u7ecf\u51fa\u73b0\u8fc7\uff0c\u5982\u679c\u5fd8\u4e86\u7f5a\u4f60\u91cd\u8bfb\u3002</p> <p>\u8fd9\u4e2a\u5b8f\u7684\u5c55\u5f00\u6bd4\u8f83\u6709\u610f\u601d\u3002\u4f8b\u5982\uff0c<code>ISR 0</code> \u5c55\u5f00\u540e\u4e3a\uff1a</p> <pre><code>[global isr0]\nisr0:\n    push 0\n    jmp isr_common_stub\n</code></pre> <p>\u5927\u6982\u5982\u6b64\uff0c\u6c47\u7f16\u91cc\u7684\u5b8f\u6bd4 <code>#define</code> \u7b80\u5355\u4e00\u4e9b\uff0c\u6ca1\u6709 <code>#</code> \u548c <code>##</code> \u4e4b\u7c7b\u7684\u5947\u602a\u4e1c\u897f\uff0c\u60f3\u62fc\u63a5\u76f4\u63a5\u5199\u5728\u540e\u9762\u5c31\u53ef\u4ee5\u4e86\u3002</p> <p>\u5176\u5b9e\uff0c\u8fd9\u4e00\u90e8\u5206\u79bb\u771f\u6b63\u7684\u6846\u67b6\u5df2\u7ecf\u76f8\u5f53\u8fd1\u4e86\u3002\u4e4b\u6240\u4ee5\u4e0d\u5b8c\u5168\u6b63\u786e\uff0c\u662f\u56e0\u4e3a\u6709\u7684\u5f02\u5e38\u6709\u9519\u8bef\u7801\uff0c\u800c\u6709\u7684\u5f02\u5e38\u6ca1\u6709\uff0c\u6211\u4eec\u9700\u8981\u8ba9\u6808\u4e2d\u7684\u7ed3\u6784\u4fdd\u6301\u7edf\u4e00\u3002\u8fd9\u5c31\u9700\u8981\u6211\u4eec\u5728\u6ca1\u6709\u9519\u8bef\u7801\u7684\u5f02\u5e38\u4e2d\u538b\u5165\u4e00\u4e2a\u5047\u7684\u9519\u8bef\u7801\u3002</p> <p>\u67e5\u8be2\u8d44\u6599\u53ef\u77e5\uff0c\u7b2c8\u300110~14\u300117\u300121\u53f7\u5f02\u5e38\u6709\u9519\u8bef\u7801\uff0c\u5176\u4f59\u5f02\u5e38\u65e0\u9519\u8bef\u7801\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u5176\u4ed6\u7684\u5f02\u5e38\u8fdb\u884c\u7279\u522b\u5173\u7167\u3002</p> <p>\u7efc\u4e0a\uff0c\u6211\u4eec\u5f97\u51fa\u7684\u57fa\u672c\u6846\u67b6\u5982\u4e0b\uff1a</p> <p>\u4ee3\u7801 9-14 \u771f\u5b9e\u6846\u67b6\uff08kernel/interrupt.asm\uff09 <pre><code>%macro ISR_ERRCODE 1\n[global isr%1]\nisr%1:\n    push %1 ; \u4f7f\u5904\u7406\u7a0b\u5e8f\u77e5\u9053\u5f02\u5e38\u53f7\u7801\n    jmp isr_common_stub ; \u901a\u7528\u90e8\u5206\n%endmacro\n\n%macro ISR_NOERRCODE 1\n[global isr%1]\nisr%1:\n    push byte 0 ; \u5f02\u5e38\u9519\u8bef\u7801\u662f\u56db\u4e2a\u5b57\u8282\uff0c\u8fd9\u91cc\u53eapush\u4e00\u4e2a\u5b57\u8282\u539f\u56e0\u672a\u77e5\n    push %1 ; \u4f7f\u5904\u7406\u7a0b\u5e8f\u77e5\u9053\u5f02\u5e38\u53f7\u7801\n    jmp isr_common_stub ; \u901a\u7528\u90e8\u5206\n%endmacro\n\nISR_NOERRCODE 0\nISR_NOERRCODE 1\nISR_NOERRCODE 2\nISR_NOERRCODE 3\nISR_NOERRCODE 4\nISR_NOERRCODE 5\nISR_NOERRCODE 6\nISR_NOERRCODE 7\nISR_ERRCODE 8\nISR_NOERRCODE 9\nISR_ERRCODE 10\nISR_ERRCODE 11\nISR_ERRCODE 12\nISR_ERRCODE 13\nISR_ERRCODE 14\nISR_NOERRCODE 15\nISR_NOERRCODE 16\nISR_ERRCODE 17\nISR_NOERRCODE 18\nISR_NOERRCODE 19\nISR_NOERRCODE 20\nISR_ERRCODE 21\nISR_NOERRCODE 22\nISR_NOERRCODE 23\nISR_NOERRCODE 24\nISR_NOERRCODE 25\nISR_NOERRCODE 26\nISR_NOERRCODE 27\nISR_NOERRCODE 28\nISR_NOERRCODE 29\nISR_NOERRCODE 30\nISR_NOERRCODE 31\n</code></pre></p> <p>\u63a5\u4e0b\u6765\uff0c\u662f <code>isr_common_stub</code>\u3002\u8fd9\u4e2a\u4e1c\u897f\u5199\u8d77\u6765\u4e0d\u9ebb\u70e6\uff0c\u65e0\u975e\u662f\u4fdd\u5b58\u548c\u8fd8\u539f\u4e2d\u65ad\u73af\u5883\u800c\u5df2\uff1a</p> <p>\u4ee3\u7801 9-15 \u5f02\u5e38\u5904\u7406\u516c\u5171\u90e8\u5206\uff08kernel/interrupt.asm\uff09 <pre><code>[extern isr_handler] ; \u5c06\u4f1a\u5728isr.c\u4e2d\u88ab\u5b9a\u4e49\n\n; \u901a\u7528\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\nisr_common_stub:\n    pusha ; \u5b58\u50a8\u6240\u6709\u5bc4\u5b58\u5668\n\n    mov ax, ds\n    push eax ; \u5b58\u50a8ds\n\n    mov ax, 0x10 ; \u5c06\u5185\u6838\u6570\u636e\u6bb5\u8d4b\u503c\u7ed9\u5404\u6bb5\n    mov ds, ax\n    mov es, ax\n    mov fs, ax\n    mov gs, ax\n\n    call isr_handler ; \u8c03\u7528C\u8bed\u8a00\u5904\u7406\u51fd\u6570\n\n    pop eax ; \u6062\u590d\u5404\u6bb5\n    mov ds, ax\n    mov es, ax\n    mov fs, ax\n    mov gs, ax\n\n    popa ; \u5f39\u51fa\u6240\u6709\u5bc4\u5b58\u5668\n\n    add esp, 8 ; \u5f39\u51fa\u9519\u8bef\u7801\u548c\u4e2d\u65adID\n    iret ; \u4ece\u4e2d\u65ad\u8fd4\u56de\n</code></pre></p> <p>\u8fd9\u4e2a\u6d88\u6389\u4e86\uff0c\u53c8\u51fa\u73b0\u4e00\u4e2a <code>isr_handler</code>\uff0c\u771f\u662f\u9ebb\u70e6\u3002\u4e0d\u8fc7\u8fd9\u573a\u6253\u5730\u9f20\u7684\u6e38\u620f\u4e5f\u8981\u8fce\u6765\u6536\u5c3e\u4e86\uff0c\u800c\u4e14\u53e6\u4e00\u4e2a\u597d\u6d88\u606f\u662f\uff0c\u8fd9\u4e2a\u4e1c\u897f\u662f\u7528 C \u8bed\u8a00\u5199\u7684\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a</p> <p>\u4ee3\u7801 9-16 \u771f\u6b63\u7684\u5f02\u5e38\u5904\u7406\u90e8\u5206\uff08kernel/isr.c\uff09 <pre><code>#include \"monitor.h\"\n#include \"isr.h\"\n\nvoid isr_handler(registers_t regs)\n{\n    asm(\"cli\");\n    monitor_write(\"received interrupt: \");\n    monitor_write_dec(regs.int_no);\n    monitor_put('\\n');\n    while (1);\n}\n</code></pre></p> <p>\u8fd9\u91cc\u4e3a\u4ec0\u4e48\u8981 <code>cli</code> \u548c <code>while (1);</code> \u5462\uff1f\u4e00\u822c\u51fa\u73b0\u5f02\u5e38\u65f6\u5df2\u7ecf\u65e0\u53ef\u633d\u56de\uff0c\u56e0\u6b64\u76f4\u63a5\u60ac\u505c\u5728\u5904\u7406\u7a0b\u5e8f\u91cc\u5373\u53ef\u3002<code>cli</code> \u9632\u6b62\u4e0b\u4e00\u8282\u8981\u8bbe\u7f6e\u7684\u5916\u90e8\u4e2d\u65ad\u6765\u70e6\u4eba\u3002</p> <p>\u4ee3\u7801 9-17 registers_t\u7684\u5b9a\u4e49\uff08kernel/isr.h\uff09 <pre><code>#ifndef _ISR_H_\n#define _ISR_H_\n\n#include \"common.h\"\n\ntypedef struct registers {\n    uint32_t ds;\n    uint32_t edi, esi, ebp, esp, ebx, edx, ecx, eax;\n    uint32_t int_no, err_code;\n    uint32_t eip, cs, eflags, user_esp, ss;\n} registers_t;\n\n#endif\n</code></pre></p> <p><code>gdtidt.c</code> \u7684\u5f00\u5934\u4e5f\u8981\u4f5c\u4fee\u6539\uff1a</p> <p>\u4ee3\u7801 9-18 \u65b0\u7248 gdtidt \u5f00\u5934\uff0c\u66ff\u6362\u81f3gdt_set_gate\u4e4b\u524d\uff08kernel/gdtidt.c\uff09 <pre><code>#include \"common.h\"\n#include \"gdtidt.h\"\n\nextern void gdt_flush(uint32_t);\nextern void idt_flush(uint32_t);\n\ngdt_entry_t gdt_entries[4096];\ngdt_ptr_t gdt_ptr;\nidt_entry_t idt_entries[256];\nidt_ptr_t idt_ptr;\n</code></pre></p> <p>\u6ce8\u610f\u5230 <code>init_idt</code> \u4e2d\u7528\u5230\u4e86 <code>memset</code>\uff0c\u4e3a\u6b64\u5c06\u540e\u7eed\u4f1a\u7528\u5230\u7684\u5b57\u7b26\u4e32/\u5185\u5b58\u64cd\u4f5c\u51fd\u6570\u7edf\u4e00copy\u8fdb\u6765\uff0c\u7ec4\u5408\u6210 <code>lib/string.c</code>\uff1a</p> <p>\u4ee3\u7801 9-19 \u5b57\u7b26\u4e32\u64cd\u4f5c\u51fd\u6570\uff08lib/string.c\uff09 <pre><code>#include \"common.h\"\n\nvoid *memset(void *dst_, uint8_t value, uint32_t size)\n{\n    uint8_t *dst = (uint8_t *) dst_;\n    while (size-- &gt; 0) *dst++ = value;\n    return dst_;\n}\n\nvoid *memcpy(void *dst_, const void *src_, uint32_t size)\n{\n    uint8_t *dst = dst_;\n    const uint8_t *src = src_;\n    while (size-- &gt; 0) *dst++ = *src++;\n    return (void *) src_;\n}\n\nint memcmp(const void *a_, const void *b_, uint32_t size)\n{\n    const char *a = a_;\n    const char *b = b_;\n    while (size-- &gt; 0) {\n        if (*a != *b) return *a &gt; *b ? 1 : -1;\n        a++, b++;\n    }\n    return 0;\n}\n\nchar *strcpy(char *dst_, const char *src_)\n{\n    char *r = dst_;\n    while ((*dst_++ = *src_++));\n    return r;\n}\n\nuint32_t strlen(const char *str)\n{\n    const char *p = str;\n    while (*p++);\n    return p - str - 1;\n}\n\nint8_t strcmp(const char *a, const char *b)\n{\n    while (*a &amp;&amp; *a == *b) a++, b++;\n    return *a &lt; *b ? -1 : *a &gt; *b;\n}\n\nchar *strchr(const char *str, const uint8_t ch)\n{\n    while (*str) {\n        if (*str == ch) return (char *) str;\n        str++;\n    }\n    return NULL;\n}\n</code></pre></p> <p>\u4ee3\u7801 9-20 \u5934\u6587\u4ef6\uff08include/string.h\uff09 <pre><code>#ifndef _STRING_H_\n#define _STRING_H_\n\nvoid *memset(void *dst_, uint8_t value, uint32_t size);\nvoid *memcpy(void *dst_, const void *src_, uint32_t size);\nint memcmp(const void *a_, const void *b_, uint32_t size);\nchar *strcpy(char *dst_, const char *src_);\nuint32_t strlen(const char *str);\nint8_t strcmp(const char *a, const char *b);\nchar *strchr(const char *str, const uint8_t ch);\n\n#endif\n</code></pre></p> <p>\u6700\u540e\uff0c\u5728 <code>common.h</code> \u4e2d\u52a0\u5165 <code>#include \"string.h\"</code>\uff0c\u5728 <code>init_gdtidt</code> \u4e2d\u52a0\u5165\u4e00\u884c <code>init_idt()</code>\uff0c\u5e76\u5728 <code>kernel_main</code> \u4e2d\uff0c\u5728 <code>while (1);</code> \u4e4b\u524d\u52a0\u5165\u4e00\u884c <code>asm(\"ud2\");</code>\uff0c\u5728 Makefile \u7684 OBJS \u53d8\u91cf\u4e2d\u52a0\u5165 <code>out/string.o out/isr.o out/interrupt.o</code>\u3002</p> <p>\u82e5\u4e0a\u8ff0\u6240\u6709\u64cd\u4f5c\u5168\u90e8\u6b63\u786e\u65e0\u8bef\uff0c\u90a3\u4e48\u7f16\u8bd1\u8fd0\u884c\u540e\u6548\u679c\u5e94\u5982\u4e0b\u56fe\uff1a</p> <p></p> <p>\uff08\u56fe 9-4 \u8fd0\u884c\u6548\u679c\uff09</p> <p>\u5c3d\u7ba1\u6211\u4eec\u53ea\u6d4b\u8bd5\u4e86\u4e00\u4e2a <code>ud2</code> \u5f02\u5e38\uff0c\u53736\u53f7\u5f02\u5e38\uff0c\u4f46\u6211\u4eec\u8db3\u4ee5\u76f8\u4fe1\uff0c\u6574\u4e2a IDT \u5bf9\u4e8e\u5f02\u5e38\u5df2\u7ecf\u8bbe\u7f6e\u65e0\u8bef\u4e86\u3002</p>"},{"location":"os-tutorial/old/10-irq/","title":"10 \u63a5\u6536\u5916\u90e8\u4e2d\u65ad\uff0c\u4ece\u65f6\u949f\u5f00\u59cb","text":"<p>\u7b2c9\u8282\u4e2d\uff0c\u6211\u4eec\u8bbe\u7f6e\u7684\u5f02\u5e38\u662f\u4e00\u79cd\u5185\u90e8\u7684\u4e2d\u65ad\u3002\u800c\u672c\u8282\uff0c\u6211\u4eec\u5c06\u8981\u63a5\u6536\u6765\u81ea\u5916\u90e8\u8bbe\u5907\u7684\u4e2d\u65ad\u3002</p> <p>\u8bdd\u8bf4\u56de\u6765\uff0c\u6211\u4eec\u524d\u9762\u4e00\u76f4\u63d0\u5230\u4e2d\u65ad\uff0c\u5230\u5e95\u4ec0\u4e48\u662f\u4e2d\u65ad\uff1f\u5b57\u9762\u610f\u601d\u4e0a\u8bb2\uff0c\u5c31\u662f\u4f60\u6b63\u5728\u6301\u7eed\u7684\u5de5\u4f5c\u88ab\u7a81\u7136\u6253\u65ad\u3002\u53d1\u6325\u8054\u60f3\u8bb0\u5fc6\uff0c\u53ef\u4ee5\u77e5\u9053\uff0c\u4e2d\u65ad\u5b9e\u9645\u4e0a\u5c31\u662f\u5728\u64cd\u4f5c\u7cfb\u7edf\u6b63\u5e38\u8fd0\u884c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8ba9\u5b83\u88ab\u8feb\u63a5\u6536\u7684\u4fe1\u53f7\u3002</p> <p>\u4e0e\u73b0\u5b9e\u751f\u6d3b\u4e2d\u7684\u4e2d\u65ad\u4e0d\u540c\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u4e2d\u65ad\u662f\u64cd\u4f5c\u7cfb\u7edf\u6700\u672c\u8d28\u7684\u9a71\u52a8\u529b\uff0c\u5982\u679c\u6ca1\u6709\u4e2d\u65ad\uff0c\u4e00\u5207\u90fd\u4f1a\u975e\u5e38\u590d\u6742\uff0cCPU\u5c06\u82b1\u8d39\u5927\u91cf\u7684\u65f6\u95f4\u67e5\u8be2\u8bbe\u5907\u72b6\u6001\uff1b\u800c\u73b0\u5728\uff0c\u4e0d\u540c\u7684\u786c\u4ef6\u4f1a\u53d1\u4e0d\u540c\u7684\u4e2d\u65ad\u4fe1\u53f7\uff0c\u5728\u63a5\u6536\u7684\u8fc7\u7a0b\u4e2d\u6162\u6162\u5904\u7406\u5373\u53ef\u3002</p> <p>\u626f\u5f97\u6709\u70b9\u591a\uff0c\u5f80\u56de\u6536\u6536\u3002\u7531\u4e8e0-31\u53f7IDT\u5df2\u7ecf\u5f52\u7ed9\u4e86\u5f02\u5e38\uff0c\u73b0\u5728\u53c8\u670916\u4e2a\u5916\u8bbe\u4e2d\u65ad\u4fe1\u53f7\uff0c\u90a3\u4e48\u6700\u81ea\u7136\u7684\u60f3\u6cd5\uff0c\u5c31\u662f\u628a\u5b83\u4eec\u653e\u7f6e\u572832-47\u53f7IDT\u3002</p> <p>\u4ec0\u4e48\uff1f\u4f60\u8bf4\u7535\u8111\u660e\u660e\u6709\u4e00\u5806\u5916\u8bbe\uff0c\u4e2d\u65ad\u53f7\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u5c11\uff1f\u4ed4\u7ec6\u60f3\u60f3\u5c31\u4f1a\u53d1\u73b0\uff0c\u5982\u679c\u6240\u6709\u7684\u5916\u8bbe\u90fd\u7ed9CPU\u53d1\u4e2d\u65ad\uff0c\u90a3CPU\u4e0d\u4ec5\u5206\u8fa8\u4e0d\u51fa\u6765\u8c01\u662f\u8c01\uff0c\u66f4\u662f\u8981\u70b8\u4e86\u3002\u56e0\u6b64\uff0c\u5728x86\u6846\u67b6\u4e0b\uff0c\u6240\u6709\u7684\u4e2d\u65ad\u4f1a\u88ab\u6c47\u96c6\u5230\u4e00\u4e2a\u53eb\u505a8259A\u7684\u82af\u7247\uff0c\u5b83\u8fd8\u6709\u53e6\u4e00\u4e2a\u540d\u5b57\uff0c\u53eb\u505a\u53ef\u7f16\u7a0b\u4e2d\u65ad\u63a7\u5236\u5668\uff08PIC\uff09\uff0c\u5f53\u7136\uff0c\u76ee\u524d\u5df2\u7ecf\u88ab\u6dd8\u6c70\u4e86\u3002\u5b9e\u9645\u64cd\u4f5c\u4e2d\uff0c\u7531PIC\u5206\u8fa8\u6bcf\u4e00\u4e2a\u5916\u8bbe\uff0c\u5e76\u53d1\u9001\u4e24\u4e2a\u5b57\u8282\uff080xCD \u5916\u8bbe\u7f16\u53f7\uff09\u7ed9CPU\uff0c\u4ece\u800c\u4f7f\u5f97CPU\u81ea\u52a8\u6267\u884c\u5bf9\u5e94\u5916\u8bbe\u7684\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u3002</p> <p>\u597d\u4e86\uff0c\u539f\u7406\u5927\u81f4\u5982\u6b64\uff0c\u6211\u4eec\u5f00\u59cb\u3002\u8fd9\u4e48\u4e00\u770b\uff0c\u4e2d\u65ad\u5904\u7406\u548cIDT\u4e5f\u8131\u4e0d\u4e86\u5e72\u7cfb\uff0c\u5148\u5bf916\u4e2a\u5916\u8bbe\u4e2d\u65ad\u4fe1\u53f7\u5bf9\u5e94\u7684IDT\u8fdb\u884c\u8bbe\u7f6e\uff0c\u8bf7\u6dfb\u52a0\u5728 <code>idt_flush</code> \u4e4b\u524d\uff1a</p> <p>\u4ee3\u7801 10-1 \u8bbe\u7f6e\u5916\u8bbe\u4e2d\u65ad\u4fe1\u53f7\u5bf9\u5e94\u7684\u4e2d\u65ad\u63cf\u8ff0\u7b26\uff08kernel/gdtidt.c\uff09 <pre><code>    idt_set_gate(32, (uint32_t) irq0, 0x08, 0x8E);\n    idt_set_gate(33, (uint32_t) irq1, 0x08, 0x8E);\n    idt_set_gate(34, (uint32_t) irq2, 0x08, 0x8E);\n    idt_set_gate(35, (uint32_t) irq3, 0x08, 0x8E);\n    idt_set_gate(36, (uint32_t) irq4, 0x08, 0x8E);\n    idt_set_gate(37, (uint32_t) irq5, 0x08, 0x8E);\n    idt_set_gate(38, (uint32_t) irq6, 0x08, 0x8E);\n    idt_set_gate(39, (uint32_t) irq7, 0x08, 0x8E);\n    idt_set_gate(40, (uint32_t) irq8, 0x08, 0x8E);\n    idt_set_gate(41, (uint32_t) irq9, 0x08, 0x8E);\n    idt_set_gate(42, (uint32_t) irq10, 0x08, 0x8E);\n    idt_set_gate(43, (uint32_t) irq11, 0x08, 0x8E);\n    idt_set_gate(44, (uint32_t) irq12, 0x08, 0x8E);\n    idt_set_gate(45, (uint32_t) irq13, 0x08, 0x8E);\n    idt_set_gate(46, (uint32_t) irq14, 0x08, 0x8E);\n    idt_set_gate(47, (uint32_t) irq15, 0x08, 0x8E);\n</code></pre></p> <p>\uff08\u8fd9\u4e00\u90e8\u5206\u76f4\u63a5\u653e\u5728\u672b\u5c3e\u5373\u53ef\uff09</p> <p>\u4ee3\u7801 10-2 16\u4e2a\u5916\u8bbe\u4e2d\u65ad\u4fe1\u53f7\u7684\u58f0\u660e\uff08kernel/gdtidt.h\uff09 <pre><code>extern void irq0();\nextern void irq1();\nextern void irq2();\nextern void irq3();\nextern void irq4();\nextern void irq5();\nextern void irq6();\nextern void irq7();\nextern void irq8();\nextern void irq9();\nextern void irq10();\nextern void irq11();\nextern void irq12();\nextern void irq13();\nextern void irq14();\nextern void irq15();\n</code></pre></p> <p><code>interrupt.asm</code> \u4e2d\u7684\u4ee3\u7801\u51e0\u4e4e\u4e0e\u5f02\u5e38\u65f6\u5982\u51fa\u4e00\u8f99\uff1a</p> <p>\u4ee3\u7801 10-3 \u5916\u8bbe\u4e2d\u65ad\u4fe1\u53f7\u7684\u5b9e\u73b0\uff08kernel/interrupt.asm\uff09 <pre><code>%macro IRQ 2\nglobal irq%1\nirq%1:\n    cli\n    push byte 0\n    push %2\n    jmp irq_common_stub\n%endmacro\n\nIRQ 0, 32\nIRQ 1, 33\nIRQ 2, 34\nIRQ 3, 35\nIRQ 4, 36\nIRQ 5, 37\nIRQ 6, 38\nIRQ 7, 39\nIRQ 8, 40\nIRQ 9, 41\nIRQ 10, 42\nIRQ 11, 43\nIRQ 12, 44\nIRQ 13, 45\nIRQ 14, 46\nIRQ 15, 47\n\n[extern irq_handler]\n; \u901a\u7528\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\nirq_common_stub:\n    pusha ; \u5b58\u50a8\u6240\u6709\u5bc4\u5b58\u5668\n\n    mov ax, ds\n    push eax ; \u5b58\u50a8ds\n\n    mov ax, 0x10 ; \u5c06\u5185\u6838\u6570\u636e\u6bb5\u8d4b\u503c\u7ed9\u5404\u6bb5\n    mov ds, ax\n    mov es, ax\n    mov fs, ax\n    mov gs, ax\n\n    call irq_handler ; \u8c03\u7528C\u8bed\u8a00\u5904\u7406\u51fd\u6570\n\n    pop eax ; \u6062\u590d\u5404\u6bb5\n    mov ds, ax\n    mov es, ax\n    mov fs, ax\n    mov gs, ax\n\n    popa ; \u5f39\u51fa\u6240\u6709\u5bc4\u5b58\u5668\n\n    add esp, 8 ; \u5f39\u51fa\u9519\u8bef\u7801\u548c\u4e2d\u65adID\n    iret ; \u4ece\u4e2d\u65ad\u8fd4\u56de\n</code></pre></p> <p>\u53ea\u662f\u8c03\u7528\u7684\u53c2\u6570\u6362\u4e86\u4e2a\u540d\u5b57\u3002\u6700\u540e\u662f <code>irq_handler</code>\uff1a</p> <p>\u4ee3\u7801 10-4 \u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7684C\u8bed\u8a00\u63a5\u53e3\uff08kernel/isr.c\uff09 <pre><code>void irq_handler(registers_t regs)\n{\n    monitor_write(\"received irq: \");\n    monitor_write_dec(regs.int_no);\n    monitor_put('\\n');\n}\n</code></pre></p> <p>\u751a\u81f3\u5b8c\u5168\u4e00\u81f4\uff0c\u9664\u4e86\u5220\u6389\u4e86\u5173\u95ed\u4e2d\u65ad\u548c\u65e0\u9650\u60ac\u505c\u7684\u90e8\u5206\u3002</p> <p>\u6700\u540e\uff0c\u7531\u4e8e <code>kernel.asm</code> \u4e2d\u5173\u95ed\u4e86\u5916\u90e8\u4e2d\u65ad\uff0c\u5728\u6b64\u5904\u9700\u8981\u91cd\u65b0\u6253\u5f00\u3002\u56e0\u6b64\uff0c\u9700\u8981\u5728 <code>main.c</code> \u4e2d\u628a\u4e0a\u4e00\u8282\u6d4b\u8bd5\u7528\u7684 <code>asm(\"ud2\");</code> \u66ff\u6362\u4e3a <code>asm(\"sti\");</code>\u3002</p> <p>\u5b8c\u6574 <code>main.c</code> \u5982\u4e0b\uff1a</p> <p>\u4ee3\u7801 10-5 \u6d4b\u8bd5\u7528\uff08kernel/main.c\uff09 <pre><code>#include \"monitor.h\"\n#include \"gdtidt.h\"\n\nvoid kernel_main() // kernel.asm\u4f1a\u8df3\u8f6c\u5230\u8fd9\u91cc\n{\n    init_gdtidt();\n    monitor_clear(); // \u5148\u6e05\u5c4f\n    monitor_write(\"Hello, kernel world!\\n\");\n    // \u9a8c\u8bc1write_hex\u548cwrite_dec\uff0c\u7531\u4e8e\u6ca1\u6709printf\uff0c\u8fd9\u4e00\u6b65\u5341\u5206\u70e6\u4eba\n    monitor_write_hex(0x114514);\n    monitor_write(\" = \");\n    monitor_write_dec(0x114514);\n    monitor_write(\"\\n\");\n    asm(\"sti\");\n\n    // \u60ac\u505c\n    while (1);\n}\n</code></pre></p> <p>\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u6548\u679c\u5982\u56fe\uff1a </p> <p>\uff08\u56fe 10-1 \u8fd0\u884c\u5931\u8d25\uff09</p> <p>\u55ef\uff1f8\u53f7\u4e2d\u65ad\uff1f\u8fd9\u4e0d\u662f\u5f02\u5e38\u5417\uff1f\u8fd9\u662f\u600e\u4e48\u56de\u4e8b\uff1f\uff1f</p> <p>\u6211\u5f53\u521d\u505a\u5230\u8fd9\u91cc\u7684\u65f6\u5019\uff0c\u4e00\u5ea6\u6000\u7591\u4eba\u751f\uff0c\u5728\u4ee3\u7801\u4e2d\u67e5\u8be2\u5230\u5e95\u662f\u54ea\u91cc\u51fa\u4e86\u95ee\u9898\uff0c\u6700\u7ec8\u6ca1\u6709\u7ed3\u679c\uff08\u7b11\uff09\u3002\u540e\u6765\u67e5\u9605\u8d44\u6599\u53d1\u73b0\uff0c8\u53f7\u5f02\u5e38\u4e0d\u4f1a\u968f\u4fbf\u51fa\u73b0\uff0c\u5f53CPU\u627e\u4e0d\u5230\u5bf9\u5e94\u5f02\u5e38\u7684\u5904\u7406\u7a0b\u5e8f\uff0c\u4f46\u662f\u67098\u53f7\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u65f6\uff0c\u624d\u4f1a\u8c03\u75288\u53f7\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\uff08\u987a\u4fbf\u8bf4\u4e00\u4e0b\uff0c\u5982\u679c\u6ca1\u67098\u53f7\u5904\u7406\u7a0b\u5e8f\uff0c\u7ed3\u679c\u81ea\u7136\u5c31\u662f\u91cd\u542f\u5566\uff09\u3002\u6700\u7ec8\u6211\u624d\u5f97\u4ee5\u786e\u5b9a\uff0c\u7a0b\u5e8f\u672c\u8eab\u5e76\u6ca1\u6709\u95ee\u9898\u3002</p> <p>\u90a3\u4e48\uff0c\u8fd9\u4e2a\u795e\u79d8\u76848\u53f7\u5f02\u5e38\u662f\u54ea\u91cc\u6765\u7684\u5462\uff1f</p> <p>\u89e3\u94c3\u8fd8\u987b\u7cfb\u94c3\u4eba\u3002\u6211\u4eec\u9f13\u6363\u4e86\u534a\u5929\uff0c\u504f\u504f\u628a\u6700\u91cd\u8981\u7684 PIC \u7ed9\u5fd8\u4e86\uff01\u800c16\u4f4d\u6a21\u5f0f\u4e0b\uff0cPIC\u9ed8\u8ba4\u65f6\u949f\u4e2d\u65ad\u4e3a8\u53f7\u5916\u8bbe\uff0c\u7531\u4e8e\u6211\u4eec\u6ca1\u7ba1PIC\uff0c\u6240\u4ee5\u5b83\u8fd8\u662f16\u4f4d\u7684\u72b6\u6001\uff0c\u6b64\u65f6\u51fa\u73b0\u4e86\u65f6\u949f\u4e2d\u65ad\uff0cPIC\u81ea\u7136\u5c31\u4f1a\u7ed9CPU\u53d1\u90018\u53f7\u4e2d\u65ad\uff01</p> <p>\u91cd\u8bbePIC\u4e5f\u662f\u975e\u5e38\u53e4\u8001\u3001\u975e\u5e38\u5c4e\u5c71\u4e5f\u662f\u975e\u5e38\u5b9a\u5f0f\u7684\u64cd\u4f5c\uff0c\u7531\u4e8e\u6d89\u53ca\u5230\u786c\u4ef6\uff0c\u8fd9\u91cc\u4e0d\u591a\u89e3\u8bf4\u3002\u603b\u4e4b\u53ea\u8981\u6dfb\u52a0\u8fd98\u884c\u4ee3\u7801\uff0c\u5c31\u6ca1\u6709\u95ee\u9898\uff08\u628a\u5b83\u4eec\u6dfb\u52a0\u5728 <code>init_idt</code> \u4e2d\u7684 <code>memset</code> \u4e4b\u524d\uff09\uff1a</p> <p>\u4ee3\u7801 10-6 \u91cd\u8bbePIC\uff08kernel/gdtidt.c\uff09 <pre><code>// \u521d\u59cb\u5316PIC\n    outb(0x20, 0x11);\n    outb(0xA0, 0x11);\n    outb(0x21, 0x20);\n    outb(0xA1, 0x28);\n    outb(0x21, 0x04);\n    outb(0xA1, 0x02);\n    outb(0x21, 0x01);\n    outb(0xA1, 0x01);\n    outb(0x21, 0x0);\n    outb(0xA1, 0x0);\n</code></pre></p> <p>\u8001\u6837\u5b50\uff0c\u7f16\u8bd1\u8fd0\u884c\uff0c\u6548\u679c\u5982\u56fe\uff1a </p> <p>\uff08\u56fe 10-2 \u6210\u529f\u4e00\u534a\uff09</p> <p>\u51fa\u73b0\u4e86 <code>received irq: 32</code>\uff0c\u8bf4\u660e\u6211\u4eec\u91cd\u8bbePIC\u6210\u529f\u4e86\uff0c\u8036\uff01\u4f46\u662f\u4ed4\u7ec6\u4e00\u60f3\uff0c\u8c01\u5bb6\u65f6\u949f\u53ea\u4f1a\u6ef4\u7b54\u4e00\u6b21\uff1f\u90a3\u4e48\u4e3a\u4ec0\u4e48\u6211\u4eec\u7684\u65f6\u949f\u4e2d\u65ad\u53ea\u53d1\u4e86\u4e00\u6b21\u5c31\u6ca1\u6709\u4e86\uff1f</p> <p>\u8fd9\u662f\u56e0\u4e3a\uff0cPIC\u975e\u5e38\u5fd9\uff0c\u4e0d\u6b62\u6709\u8fd9\u4e00\u4e2a\u5916\u8bbe\u8981\u7ba1\uff0c\u9b3c\u77e5\u9053\u4f60\u8fd9\u8fb9\u5b8c\u4e8b\u6ca1\u6709\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5411PIC\u53d1\u4fe1\u53f7\u8bf4\u201c\u5904\u7406\u5b8c\u6bd5\u5566\u201d\uff0c\u8fd9\u4e2a\u4fe1\u53f7\u88ab\u79f0\u4f5cEOI\u3002</p> <p>\u6211\u4eec\u5728 <code>irq_handler</code> \u4e2d\u52a0\u5165EOI\u7684\u53d1\u9001\uff1a</p> <p>\u4ee3\u7801 10-7 \u53d1\u9001EOI\uff08kernel/isr.c\uff09 <pre><code>void irq_handler(registers_t regs)\n{\n    if (regs.int_no &gt;= 0x28) outb(0xA0, 0x20); // \u7ed9\u4ece\u7247\u53d1EOI\n    outb(0x20, 0x20); // \u7ed9\u4e3b\u7247\u53d1EOI\n    monitor_write(\"received irq: \");\n    monitor_write_dec(regs.int_no);\n    monitor_put('\\n');\n}\n</code></pre></p> <p>\u8fd9\u91cc\u7684\u4ece\u7247\u4e3b\u7247\u53c8\u662f\u4ec0\u4e48\u4e1c\u897f\u5462\uff1f\u867d\u7136\u603b\u5171\u670916\u4e2a\u5916\u8bbe\u4fe1\u53f7\uff0c\u4f46\u662f\u4e00\u4e2aPIC\u603b\u5171\u53ea\u67098\u6761\u5411\u5916\u8f93\u51fa\u7684\u7ebf\uff0c\u53ea\u597d\u641e\u4e24\u4e2aPIC\uff0c\u4e00\u4e3b\u4e00\u4ece\uff0c\u4e24\u4e2aPIC\u901a\u8fc7\u4e24\u4e2a\u5916\u8bbe\u4e2d\u65ad\u4e92\u76f8\u4ea4\u6362\u4fe1\u606f\u3002\u6240\u4ee5\uff0c\u5176\u5b9e\u6709\u4e24\u4e2a\u5916\u8bbe\u4e2d\u65ad\u662f\u6ca1\u6709\u7528\u7684\u3002</p> <p>\u8fd9\u4e0b\u603b\u884c\u4e86\u5427\uff1f\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u6548\u679c\u5982\u56fe\uff1a</p> <p></p> <p>\uff08\u56fe 10-3 \u6210\u529f\uff09</p> <p>\u81f3\u6b64\uff0c\u6211\u4eec\u6210\u529f\u5b9e\u73b0\u4e86\u5bf9 IRQ \u7684\u63a5\u6536\u3002\u4e0d\u8fc7\uff0c\u6211\u4eec\u5bf9\u5916\u8bbe\u4e2d\u65ad\u7684\u8981\u6c42\u66f4\u82db\u523b\u4e00\u70b9\u2014\u2014\u80fd\u4e0d\u80fd\u8ba9\u63a5\u6536\u65b9\u81ea\u5df1\u51b3\u5b9a\u600e\u4e48\u5904\u7f6e\u5916\u8bbe\u4e2d\u65ad\u5462\uff1f</p> <p>\u8fd9\u4e00\u90e8\u5206\u5b8c\u5168\u5728\u8f6f\u4ef6\u5c42\u7ea7\uff0c\u53ef\u4ee5\u7528 C \u8bed\u8a00\u6765\u5b8c\u6210\u3002</p> <p>\u9996\u5148\uff0c\u5b9a\u4e49\u81ea\u5b9a\u4e49\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u51fd\u6570\uff1a</p> <p>\u4ee3\u7801 10-8 \u5f00\u59cb\u81ea\u5b9a\u4e49\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\uff08kernel/isr.h\uff09 <pre><code>#define IRQ0 32\n#define IRQ1 33\n#define IRQ2 34\n#define IRQ3 35\n#define IRQ4 36\n#define IRQ5 37\n#define IRQ6 38\n#define IRQ7 39\n#define IRQ8 40\n#define IRQ9 41\n#define IRQ10 42\n#define IRQ11 43\n#define IRQ12 44\n#define IRQ13 45\n#define IRQ14 46\n#define IRQ15 47\n\ntypedef void (*isr_t)(registers_t *);\nvoid register_interrupt_handler(uint8_t n, isr_t handler);\n</code></pre></p> <p>\u4e0b\u9762\u5df2\u7ecf\u6dfb\u52a0\u4e86\u6ce8\u518c\u51fd\u6570\u4e86\uff0c\u5728 <code>isr.c</code> \u4e2d\u52a0\u5165\u4e00\u884c\uff1a</p> <p>\u4ee3\u7801 10-9 \u81ea\u5b9a\u4e49\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u5217\u8868\uff08kernel/isr.c\uff09 <pre><code>static isr_t interrupt_handlers[256];\n</code></pre></p> <p>\u7531\u4e8e <code>isr_t</code> \u662f\u51fd\u6570\u6307\u9488\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u662f\u5426\u4e3a NULL \u5224\u65ad\u662f\u5426\u5b58\u5728\u81ea\u5b9a\u4e49\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u3002\u8fd9\u662f\u65b0\u7248\u7684 <code>irq_handler</code>\uff1a</p> <p>\u4ee3\u7801 10-10 \u5c06\u4e2d\u65ad\u4fe1\u53f7\u5206\u53d1\u7ed9\u81ea\u5b9a\u4e49\u5904\u7406\u7a0b\u5e8f\uff0c\u4ee5\u53ca\u6ce8\u518c\u51fd\u6570\uff08kernel/isr.c\uff09 <pre><code>void irq_handler(registers_t regs)\n{\n    if (regs.int_no &gt;= 0x28) outb(0xA0, 0x20); // \u4e2d\u65ad\u53f7 &gt;= 40\uff0c\u6765\u81ea\u4ece\u7247\uff0c\u53d1\u9001EOI\u7ed9\u4ece\u7247\n    outb(0x20, 0x20); // \u53d1\u9001EOI\u7ed9\u4e3b\u7247\n\n    if (interrupt_handlers[regs.int_no])\n    {\n        isr_t handler = interrupt_handlers[regs.int_no]; // \u6709\u81ea\u5b9a\u4e49\u5904\u7406\u7a0b\u5e8f\uff0c\u8c03\u7528\u4e4b\n        handler(&amp;regs); // \u4f20\u5165\u5bc4\u5b58\u5668\n    }\n}\n\nvoid register_interrupt_handler(uint8_t n, isr_t handler)\n{\n    interrupt_handlers[n] = handler;\n}\n</code></pre></p> <p>\u4e3a\u907f\u514d <code>regs</code> \u5728\u4f20\u503c\u4e2d\u51fa\u73b0\u4e0d\u5fc5\u8981\u7684\u62f7\u8d1d\uff0c\u8fd9\u91cc\u9009\u62e9\u4f7f\u7528\u6307\u9488\u5f62\u5f0f\u5bf9\u81ea\u5b9a\u4e49\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u8fdb\u884c\u4f20\u5165\u3002</p> <p>\u73b0\u5728\u518d\u7f16\u8bd1\u8fd0\u884c\uff0c\u5e94\u8be5\u6062\u590d\u5230\u56fe 8-6 \u7684\u72b6\u6001\u4e86\uff0c\u4e00\u7247\u7965\u548c\u3002</p> <p>\u90a3\u4e48\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u66b4\u98ce\u96e8\u4e86\uff0c\u6211\u4eec\u6765\u81ea\u5b9a\u4e49\u4e00\u4e2a\u65f6\u949f\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u3002</p> <p>\u9996\u5148\uff0c\u5bf9\u4e8e\u65f6\u949f\u4e2d\u65ad\u76ee\u524d\u7684\u9891\u7387\uff0c\u6211\u4eec\u53ea\u77e5\u9053 PIT \u5185\u90e8\u7684\u65f6\u949f\u9891\u7387\u4e3a 1193180 Hz\uff08\u4ec0\u4e48b\u6570\uff09\uff0c\u5bf9\u4e8e\u5177\u4f53\u7684\u9891\u7387\uff0c\u6211\u4eec\u662f\u4e00\u65e0\u6240\u77e5\u7684\u3002\u4e0d\u8fc7\uff0c\u8fd9\u4e2a\u503c\u53ef\u4ee5\u66f4\u6539\uff0c\u5177\u4f53\u65b9\u6cd5\u4e3a\uff1a</p> <p>1) \u7528 1193180 Hz \u9664\u4ee5\u5e0c\u671b\u6bcf\u591a\u5c11\u6beb\u79d2\u7ed9\u4e00\u4e2a\u65f6\u949f\u4e2d\u65ad\u7684\u6570\u503c\uff0c\u8bb0\u4e3a x\uff1b</p> <p>2) \u5411 0x43 \u7aef\u53e3\uff08\u65f6\u949f Command \u5bc4\u5b58\u5668\uff09\u53d1\u9001 0x36\uff08\u8bbe\u7f6e\u9891\u7387\uff09\u6307\u4ee4\uff1b</p> <p>3) \u5206\u4e24\u6b21\u5411 0x40 \u7aef\u53e3\uff08\u65f6\u949f Counter 0 \u5bc4\u5b58\u5668\uff0c\u7ba1\u7406\u548c\u8ba1\u6570\u76f8\u5173\u7684\u4e1c\u897f\uff09\u5206\u522b\u53d1\u9001 x \u7684\u4f4e8\u4f4d\u548c\u9ad88\u4f4d\u3002</p> <p>\u4e0a\u8ff0\u903b\u8f91\u5e76\u4e0d\u590d\u6742\u3002\u4e3a\u4e86\u7ba1\u7406\u65f6\u949f\uff0c\u6211\u4eec\u65b0\u5efa\u4e00\u4e2a <code>timer.c</code>\uff0c\u5176\u5177\u4f53\u4ee3\u7801\u4f9d\u7167\u4e0a\u9762\u903b\u8f91\u53ef\u5982\u4e0b\u5199\u51fa\uff1a</p> <p>\u4ee3\u7801 10-11 \u65f6\u949f\u7ba1\u7406\u7a0b\u5e8f\uff08kernel/timer.c\uff09 <pre><code>#include \"timer.h\"\n#include \"isr.h\"\n#include \"monitor.h\"\n\nuint32_t tick = 0; // \u8fd9\u91cc\u505a\u4e00\u4e0b\u8bb0\u5f55\uff0c\u4e0d\u8fc7\u4e5f\u6ca1\u4ec0\u4e48\u7528\uff1f\n\nstatic void timer_callback(registers_t *regs)\n{\n    tick++;\n    monitor_write(\"Tick: \");\n    monitor_write_dec(tick);\n    monitor_put('\\n'); // \u6d4b\u8bd5\u7528\uff0c\u6682\u65f6\u6253\u5370\u4e00\u4e0bticks\n}\n\nvoid init_timer(uint32_t freq)\n{\n    register_interrupt_handler(IRQ0, &amp;timer_callback); // \u5c06\u65f6\u949f\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u6ce8\u518c\u7ed9IRQ\u6846\u67b6\n\n    uint32_t divisor = 1193180 / freq;\n\n    outb(0x43, 0x36); // \u6307\u4ee4\u4f4d\uff0c\u5199\u5165\u9891\u7387\n\n    uint8_t l = (uint8_t) (divisor &amp; 0xFF); // \u4f4e8\u4f4d\n    uint8_t h = (uint8_t) ((divisor &gt;&gt; 8) &amp; 0xFF); // \u9ad88\u4f4d\n\n    outb(0x40, l);\n    outb(0x40, h); // \u5206\u4e24\u6b21\u53d1\u51fa\n}\n</code></pre></p> <p>\u4ee3\u7801 10-12 \u58f0\u660e\uff08include/timer.h\uff09 <pre><code>#ifndef _TIMER_H_\n#define _TIMER_H_\n\n#include \"common.h\"\n\nvoid init_timer(uint32_t freq);\n\n#endif\n</code></pre></p> <p>\u6211\u4eec\u4e0d\u4ec5\u589e\u52a0\u4e86 <code>init_timer</code>\uff0c\u800c\u4e14\u8fd8\u6ce8\u518c\u4e86\u65f6\u949f\u4e2d\u65ad\u7684\u5904\u7406\u51fd\u6570\u3002\u76ee\u524d\u5b83\u53ea\u662f\u6253\u5370\u4e00\u4e0b\u5f53\u524d\u7684ticks\uff0c\u540e\u9762\u4f1a\u5bf9\u5b83\u8fdb\u884c\u66f4\u6539\u3002</p> <p>\u6700\u540e\uff0c\u5728 <code>kernel_main</code> \u4e2d\u52a0\u5165\u4e00\u884c <code>init_timer(50);</code>\uff0c\u5728 <code>Makefile</code> \u7684 <code>OBJS</code> \u53d8\u91cf\u540e\u9762\u8ffd\u52a0 <code>timer.o</code>\uff0c\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u6548\u679c\u5982\u56fe\uff1a</p> <p></p> <p>\uff08\u56fe 10-4 \u81ea\u5b9a\u4e49\u65f6\u949f\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\uff09</p> <p>\u6211\u4eec\u770b\u5230\u4e86\u4e0d\u65ad\u589e\u52a0\u7684 <code>ticks</code>\uff0c\u8fd9\u662f\u4e00\u4e2a\u6781\u597d\u7684\u73b0\u8c61\uff0c\u8bf4\u660e\u6211\u4eec\u5bf9\u65f6\u949f\u7684\u8bbe\u7f6e\u548c\u5bf9 IRQ \u81ea\u5b9a\u4e49\u5904\u7406\u7a0b\u5e8f\u7684\u8bbe\u7f6e\u90fd\u6210\u529f\u4e86\u3002</p>"},{"location":"os-tutorial/old/11-seg-memman/","title":"11 \u6bb5\u5f0f\u5185\u5b58\u7ba1\u7406\u7684\u5b9e\u73b0","text":"<p>\u867d\u7136\u8bf4\u65f6\u949f\u4e2d\u65ad\u5f80\u540e\u7684\u6700\u5408\u7406\u7684\u4e3b\u9898\u5c31\u662f\u591a\u4efb\u52a1\uff0c\u4f46\u4ece\u76ee\u5f55\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u591a\u4efb\u52a1\u662f\u4e0b\u4e00\u8282\u7684\u5185\u5bb9\uff0c\u672c\u8282\u6211\u4eec\u9996\u5148\u5b9e\u73b0\u4e00\u4e2a\u6781\u5176\u7b80\u5355\u7684\u5185\u5b58\u7ba1\u7406\u7cfb\u7edf\u3002</p> <p>\u4ec0\u4e48\u662f\u5185\u5b58\u7ba1\u7406\uff1f\u5185\u5b58\u7ba1\u7406\uff0c\u5c31\u662f\u7ba1\u7406\u5185\u5b58\uff08\u4ec0\u4e48\u5e9f\u8bdd\u6587\u5b66\uff09\u3002\u76f4\u63a5\u89e3\u91ca\u5176\u542b\u4e49\u6709\u70b9\u56f0\u96be\uff0c\u4e0d\u8fc7\uff0c\u5185\u5b58\u7684\u5206\u914d\u548c\u91ca\u653e\uff0c\u5c31\u662f\u5185\u5b58\u7ba1\u7406\u7684\u4e3b\u8981\u90e8\u5206\u3002</p> <p>\u672c\u8282\u5185\u5bb9\u5927\u90e8\u5206\u53c2\u8003\u81ea\u300a30\u5929\u81ea\u5236\u64cd\u4f5c\u7cfb\u7edf\u300b\uff0c\u6709\u539f\u4e66\u7684\u5efa\u8bae\u7ed3\u5408\u539f\u4e66\u4ea4\u53c9\u53c2\u8003\uff0c\u6bd5\u7adf\u6211\u8fd9\u4e2a\u5199\u51fa\u6765\u7684\u4e1c\u897f\u548c\u4eba\u5bb6\u539f\u4e66\u80af\u5b9a\u662f\u6bd4\u4e0d\u4e86\u7684\u3002</p> <p>\u597d\u4e86\uff0c\u6211\u4eec\u5f00\u59cb\u5427\u3002\u9996\u5148\uff0c\u65e2\u7136\u8981\u7ba1\u7406\u5185\u5b58\uff0c\u5fc5\u7136\u8981\u77e5\u9053\u5185\u5b58\u603b\u5171\u6709\u591a\u5927\u3002\u5728 BIOS \u4e2d\uff0c\u6709\u975e\u5e38\u591a\u7684\u65b9\u6cd5\u6765\u505a\u5230\uff08\u5747\u57fa\u4e8e <code>int 15h</code>\uff0c\u6839\u636e <code>ax</code> \u7684\u503c\u4e3a <code>0xe820</code>\u3001<code>0xe801</code> \u548c <code>0x66</code> \u5206\u522b\u6709\u4e0d\u540c\u7684\u884c\u4e3a\uff09\uff0c\u4f46\u662f\u73b0\u5728\u5df2\u7ecf\u5230\u4e86\u4fdd\u62a4\u6a21\u5f0f\uff0c\u6ca1\u6cd5\u7528 BIOS \u4e86\uff0c\u600e\u4e48\u529e\uff1f</p> <p>\u6362\u4e2a\u601d\u8def\u60f3\uff1a32\u4f4d\u4e0b\u5185\u5b58\u6700\u591a\u4e3a4GB\uff0c\u5982\u679c\u5f80\u6ca1\u6709\u5185\u5b58\u7684\u5730\u65b9\u5199\u5165\u4e00\u4e9b\u5b57\u8282\uff0c\u518d\u8bfb\u51fa\u6765\u7684\u65f6\u5019\uff0c\u4e0d\u7ba1\u957f\u4ec0\u4e48\u6837\uff0c\u80af\u5b9a\u4e0d\u4f1a\u662f\u5199\u5165\u65f6\u5019\u7684\u6837\u5b50\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6307\u5b9a\u4e00\u4e2a\u5f00\u5934\u548c\u7ed3\u5c3e\uff0c\u5bf9\u8fd9\u4e00\u6bb5\u533a\u57df\u7684\u6240\u6709\u5185\u5b58\u8fdb\u884c\u8bd5\u5199\uff0c\u5982\u679c\u9047\u5230\u4e86\u8fb9\u754c\uff0c\u90a3\u4e48\u76f4\u63a5\u9000\u51fa\uff0c\u5e76\u62a5\u544a\u8fb9\u754c\u503c\u5373\u53ef\u3002</p> <p>\u770b\u4e0a\u53bb\u5f88\u7f8e\u597d\uff0c\u4f46intel\u7684\u8bbe\u8ba1\u66f4\u4e3a\u524d\u536b\uff0c\u4e3a\u4e86\u589e\u52a0\u8bbf\u95ee\u5185\u5b58\u7684\u6548\u7387\uff0c486\u4e4b\u540e\u7684intel cpu\u52a0\u5165\u4e86\u7f13\u5b58\u529f\u80fd\u3002\u5728\u7f13\u5b58\u4e2d\u8bfb\u5199\u81ea\u7136\u662f\u6ca1\u6709\u610f\u4e49\u7684\uff0c\u56e0\u6b64\u9996\u5148\u8981\u68c0\u6d4b\u662f\u5426\u5728486\u4ee5\u4e0a\uff0c\u5982\u679c\u662f\uff0c\u90a3\u4e48\u5c31\u8981\u628a\u7f13\u5b58\u5173\u6389\u3002</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u65b0\u5efa <code>memory.c</code>\uff0c\u7b80\u5355\u5199\u4e00\u4e0b\u5185\u5b58\u68c0\u6d4b\u7684\u90e8\u5206\u3002</p> <p>\u4ee3\u7801 11-1 \u5185\u5b58\u68c0\u6d4b\uff08kernel/memory.c\uff09 <pre><code>#include \"common.h\"\n#include \"memory.h\"\n\n#define EFLAGS_AC_BIT 0x00040000\n#define CR0_CACHE_DISABLE 0x60000000\n\nextern uint32_t load_eflags();\nextern uint32_t load_cr0();\nextern void store_eflags(uint32_t);\nextern void store_cr0(uint32_t);\n\nstatic uint32_t memtest_sub(uint32_t start, uint32_t end)\n{\n    uint32_t i, *p, old, pat0 = 0xaa55aa55, pat1 = 0x55aa55aa;\n    for (i = start; i &lt;= end; i += 0x1000) {\n        p = (uint32_t *) (i + 0xffc); // \u6bcf4KB\u68c0\u67e5\u6700\u540e4\u4e2a\u5b57\u8282\n        old = *p; // \u8bb0\u4f4f\u4fee\u6539\u524d\u7684\u503c\n        *p = pat0; // \u8bd5\u5199\n        *p ^= 0xffffffff; // \u7ffb\u8f6c\n        if (*p != pat1) { // ~pat0 = pat1\uff0c\u7ffb\u8f6c\u4e4b\u540e\u5982\u679c\u4e0d\u662fpat1\u5219\u5199\u5165\u5931\u8d25\n            *p = old; // \u5199\u56de\u53bb\n            break;\n        }\n        *p ^= 0xffffffff; // \u518d\u7ffb\u8f6c\n        if (*p != pat0) { // \u4e24\u6b21\u7ffb\u8f6c\u5e94\u8be5\u8f6c\u56de\u53bb\uff0c\u5982\u679c\u4e0d\u662fpat0\u5219\u5199\u5165\u5931\u8d25\n            *p = old; // \u5199\u56de\u53bb\n            break;\n        }\n        *p = old; // \u8bd5\u5199\u5b8c\u6bd5\uff0c\u6b644KB\u53ef\u7528\uff0c\u6062\u590d\u4e3a\u4fee\u6539\u524d\u7684\u503c\n    }\n    return i; // \u8fd4\u56de\u5185\u5b58\u5bb9\u91cf\n}\n\nstatic uint32_t memtest(uint32_t start, uint32_t end)\n{\n    char flg486 = 0;\n    uint32_t eflags, cr0, i;\n\n    eflags = load_eflags();\n    eflags |= EFLAGS_AC_BIT; // AC-bit = 1\n    store_eflags(eflags);\n    eflags = load_eflags();\n    if ((eflags &amp; EFLAGS_AC_BIT) != 0) flg486 = 1;\n    // 486\u7684CPU\u4f1a\u628aAC\u4f4d\u5f53\u56de\u4e8b\uff0c\u4f46386\u7684\u5219\u4f1a\u628aAC\u4f4d\u59cb\u7ec8\u7f6e0\n    // \u8fd9\u6837\u5c31\u53ef\u4ee5\u5224\u65adCPU\u662f\u5426\u5728486\u4ee5\u4e0a\n    // \u6062\u590d\u56de\u53bb\n    eflags &amp;= ~EFLAGS_AC_BIT; // AC-bit = 0\n    store_eflags(eflags);\n\n    if (flg486) {\n        cr0 = load_cr0();\n        cr0 |= CR0_CACHE_DISABLE; // \u7981\u7528\u7f13\u5b58\n        store_cr0(cr0);\n    }\n\n    i = memtest_sub(start, end); // \u771f\u6b63\u7684\u5185\u5b58\u63a2\u6d4b\u51fd\u6570\n\n    if (flg486) {\n        cr0 = load_cr0();\n        cr0 &amp;= ~CR0_CACHE_DISABLE; // \u5141\u8bb8\u7f13\u5b58\n        store_cr0(cr0);\n    }\n\n    return i;\n}\n</code></pre></p> <p>\u914d\u5408\u6ce8\u91ca\u5e94\u8be5\u4e0d\u96be\u7406\u89e3\u2026\u2026\u5427\u3002\u4e3a\u4e86\u52a0\u5feb\u6548\u7387\uff0c<code>memtest_sub</code> \u6bcf\u6b21\u53ea\u68c0\u6d4b\u6bcf\u4e00\u4e2a 4KB \u7684\u5f00\u5934\u3002<code>memtest</code> \u5219\u662f\u5bf9 <code>memtest_sub</code> \u7684\u5c01\u88c5\uff0c\u52a0\u4e0a\u4e86\u5224\u65ad486\u3001\u5173\u95ed\u7f13\u5b58\u7b49\u7684\u8fc7\u7a0b\u3002</p> <p>\u5728\u8fd9\u91cc\u7528\u5230\u4e86\u5bf9 eflags \u548c cr0 \u8fdb\u884c\u64cd\u4f5c\u7684\u56db\u4e2a\u6c47\u7f16\u51fd\u6570\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a</p> <p>\u4ee3\u7801 11-2 \u64cd\u4f5ceflags\u548ccr0\u7684\u6c47\u7f16\uff08lib/nasmfunc.asm\uff09 <pre><code>[global load_eflags]\n\nload_eflags:\n    pushfd ; eflags\u5bc4\u5b58\u5668\u53ea\u80fd\u7528pushfd/popfd\u64cd\u4f5c\uff0c\u5c06eflags\u5165\u6808/\u5c06\u6808\u4e2d\u5185\u5bb9\u5f39\u5165eflags\n    pop eax ; eax = eflags;\n    ret ; return eax;\n\n[global store_eflags]\n\nstore_eflags:\n    mov eax, [esp + 4] ; \u83b7\u53d6\u53c2\u6570\n    push eax\n    popfd ; eflags = eax;\n    ret\n\n[global load_cr0]\n\nload_cr0:\n    mov eax, cr0 ; cr0\u53ea\u80fd\u548ceax\u4e4b\u95f4mov\n    ret ; return cr0;\n\n[global store_cr0]\n\nstore_cr0:\n    mov eax, [esp + 4] ; \u83b7\u53d6\u53c2\u6570\n    mov cr0, eax ; \u8d4b\u503ccr0\n    ret\n</code></pre></p> <p>\u7a0b\u5e8f\u5199\u597d\u4e86\uff0c\u600e\u4e48\u6d4b\u8bd5\u5462\uff1f\u770b\u770b\u8fd9\u6837\u884c\u4e0d\u884c\uff1a</p> <p>\u4ee3\u7801 11-3 init_memory\uff08kernel/memory.c\uff09 <pre><code>void init_memory()\n{\n    uint32_t memtotal = memtest(0x00400000, 0xbfffffff); // \u68c0\u6d4b4MB~3GB\u8303\u56f4\u5185\u7684\u5185\u5b58\n    monitor_write(\"memory  \");\n    monitor_write_dec(memtotal / 1024 / 1024);\n    monitor_write(\"MB\\n\"); // \u4ee5MB\u5f62\u5f0f\u6253\u5370\u51fa\u6765\n}\n</code></pre></p> <p>\u4ee3\u7801 11-4 \u5934\u6587\u4ef6\uff08include/memory.h\uff09 <pre><code>#ifndef _MEMORY_H_\n#define _MEMORY_H_\n\n#include \"common.h\"\n\nvoid init_memory();\n\n#endif\n</code></pre></p> <p>\u4ee3\u7801 11-5 \u6d4b\u8bd5\u7528main\uff08kernel/main.c\uff09 <pre><code>#include \"monitor.h\"\n#include \"gdtidt.h\"\n#include \"memory.h\"\n#include \"timer.h\"\n\nvoid kernel_main() // kernel.asm\u4f1a\u8df3\u8f6c\u5230\u8fd9\u91cc\n{\n    monitor_clear(); // \u5148\u6e05\u5c4f\n    init_gdtidt();\n    init_timer(50);\n    init_memory();\n    monitor_write(\"Hello, kernel world!\\n\");\n    // \u9a8c\u8bc1write_hex\u548cwrite_dec\uff0c\u7531\u4e8e\u6ca1\u6709printf\uff0c\u8fd9\u4e00\u6b65\u5341\u5206\u70e6\u4eba\n    monitor_write_hex(0x114514);\n    monitor_write(\" = \");\n    monitor_write_dec(0x114514);\n    monitor_write(\"\\n\");\n    //asm(\"sti\");\n\n    // \u60ac\u505c\n    while (1);\n}\n</code></pre></p> <p>\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u6548\u679c\u5982\u56fe\u6240\u793a\uff1a </p> <p>\uff08\u56fe 11-1 \u5185\u5b58\u68c0\u6d4b\u6210\u529f\uff09</p> <p>\u6211\u4eec\u7684\u68c0\u6d4b\u7a0b\u5e8f\u62a5\u544a\u5171\u6709128MB\u5185\u5b58\uff0c\u8fd9\u4e0e QEMU \u7684\u9ed8\u8ba4\u8bbe\u7f6e\u76f8\u7b26\u3002\u5982\u679c\u8bfb\u8005\u4e0d\u653e\u5fc3\uff0c\u53ef\u4ee5\u81ea\u884c\u5728 <code>qemu</code> \u7684\u53c2\u6570\u4e2d\u52a0\u5165 <code>-m &lt;memsize&gt;</code> \u53c2\u6570\u6307\u5b9a\u5185\u5b58\u5927\u5c0f\uff0c\u5176\u4e2d <code>memsize</code> \u4ee5MB\u4e3a\u5355\u4f4d\u3002</p> <p>\u68c0\u6d4b\u5b8c\u4e86\uff0c\u4e0b\u9762\u5c31\u8be5\u6b63\u5f0f\u8fdb\u884c\u7ba1\u7406\u4e86\u3002\u6211\u76ee\u524d\u770b\u5230\u7684\u6240\u6709\u6559\u7a0b\u4e2d\uff0c\u5927\u81f4\u53ef\u5c06\u5185\u5b58\u7ba1\u7406\u65b9\u6848\u5206\u4e3a\u4e09\u79cd\uff1a\u4f4d\u56fe\u578b\uff0c\u8868\u683c\u578b\u4ee5\u53ca\u6df7\u5408\u578b\u3002</p> <p>\u4f4d\u56fe\u578b\uff0c\u662f\u6307\u7528\u4f4d\u56fe\u7684\u65b9\u5f0f\u6765\u7ba1\u7406\u5185\u5b58\u3002\u4f4d\u56fe\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\uff0c\u6bcf\u4e00\u4e2a\u6570\u7ec4\u7684\u6bcf\u4e00\u4f4d\u5206\u522b\u4ee3\u8868\u4e00\u4e2a\u7ba1\u7406\u5355\u5143\uff08\u901a\u5e38\u4e3a4KB\uff09\uff0c\u82e5\u8981\u5206\u914d\u8fde\u7eed\u591a\u4e2a4KB\u7684\u5185\u5b58\uff0c\u5219\u9700\u8981\u64cd\u63a7\u4f4d\u56fe\u7684\u5355\u72ec\u4f4d\u6765\u5b9e\u73b0\u3002\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u4ec5\u8bf4\u8d77\u6765\u9ebb\u70e6\uff0c\u5199\u8d77\u6765\u4e5f\u9ebb\u70e6\uff0c\u56e0\u6b64\u4e0d\u8003\u8651\u4e86\u3002</p> <p>\u8868\u683c\u578b\u5c31\u975e\u5e38\u597d\u7406\u89e3\u4e86\uff0c\u5c31\u662f\u628a\u53ef\u7528\u5185\u5b58\u4fe1\u606f\u653e\u5728\u4e00\u4e2a\u4e00\u4e2a\u7684\u8868\u9879\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u9879\u7684\u5185\u5bb9\u5305\u62ec\u8d77\u59cb\u5730\u5740\u3001\u5185\u5b58\u5927\u5c0f\u7b49\u4fe1\u606f\u3002\u5728\u8fd9\u91cc\u4e3a\u4e86\u5077\u61d2\uff0c\u5c31\u53ea\u5305\u62ec\u8fd9\u4e24\u9879\u4fe1\u606f\u4e86\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4ee5UEFI\u4e3a\u57fa\u7840\u768464\u4f4d\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u4e2d\uff0c\u79bb\u4e0d\u5f00\u4e0e\u8fd9\u79cd\u8868\u683c\u7684\u4ea4\u9053\uff08\u5728\u6b64\u4e0d\u8be6\u8c08\u4e86\uff0c\u66f4\u4f55\u51b564\u4f4d\u7684\u57fa\u672c\u5c5e\u4e8e\u6df7\u5408\u578b\uff09\u3002</p> <p>\u6df7\u5408\u578b\u6bd4\u8fd9\u4e24\u79cd\u8fd8\u8981\u590d\u6742\uff0c\u4e5f\u4e0d\u591a\u8003\u8651\u4e86\u3002</p> <p>\u7efc\u4e0a\uff0c\u6211\u4eec\u6700\u7ec8\u9009\u62e9\u4e86\u8868\u683c\u578b\u7684\u65b9\u5f0f\u8fdb\u884c\u7ba1\u7406\u3002\u5982\u679c\u786c\u8981\u5199\u4e00\u6bb5\u4ee3\u7801\u7684\u8bdd\uff0c\u5927\u81f4\u662f\u8fd9\u6837\u7684\uff1a</p> <p>\u4ee3\u7801 11-6 \u8868\u683c\u578b\u5185\u5b58\u7ba1\u7406\u65b9\u6848\u793a\u4f8b\uff08\u65e0\u6587\u4ef6\uff09 <pre><code>// \u5b9a\u4e49\ntypedef struct FREEINFO {\n    uint32_t addr, size;\n} freeinfo_t;\n\ntypedef struct MEMMAN {\n    int frees;\n    freeinfo_t free[1000];\n} memman_t;\n// \u521d\u59cb\u5316\nmemman_t memman;\nmemman.frees = 1;\nmemman.free[0].addr = 0x7c00;\nmemman.free[0].size = 0x400;\n// \u5206\u914d\nmemman.free[0].addr += size;\nmemman.free[0].size -= size;\n// \u91ca\u653e\nmemman.free[0].addr -= size;\nmemman.free[0].size += size;\n</code></pre></p> <p>\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u4e0d\u7ba1\u662f\u521d\u59cb\u5316\u3001\u5206\u914d\u3001\u8fd8\u662f\u91ca\u653e\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(1)\u7ea7\u522b\u7684\u3002\u867d\u7136\u8868\u9879\u4e00\u591a\uff0c\u91ca\u653e\u7684\u4ee3\u7801\u4e5f\u4f1a\u8ddf\u7740\u591a\uff0c\u4f46\u603b\u4f53\u800c\u8a00\uff0c\u548c\u91ca\u653e\u5185\u5b58\u591a\u5c11\u5e76\u6ca1\u6709\u5173\u7cfb\u3002\u5982\u679c\u7528\u4f4d\u56fe\u578b\u7684\u8bdd\uff0c\u90a3\u5206\u914d\u548c\u91ca\u653e\u591a\u5c11\u5185\u5b58\u5c31\u8981\u5199\u591a\u5c11\u4e2a\u201c1\u201d\u548c\u201c0\u201d\uff0c\u8fd9\u4e48\u4e00\u770b\uff0c\u8868\u683c\u578b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u8981\u4f4e\u4e00\u4e9b\u3002</p> <p>\u4e3a\u4e86\u4ee5\u9632\u8bfb\u8005\u7ed5\u4e0d\u8fc7\u6765\u5f2f\uff0c\u5728\u6b64\u7279\u522b\u58f0\u660e\uff1a\u5185\u5b58\u88ab\u5206\u914d\uff0c\u662f\u7a0b\u5e8f\u62ff\u5230\u4e86\u5185\u5b58\uff0c\u6240\u4ee5\u5185\u5b58\u5206\u914d\u5668\u5931\u53bb\u8fd9\u6bb5\u5185\u5b58\u7684\u7ba1\u7406\u6743\uff1b\u5185\u5b58\u88ab\u91ca\u653e\uff0c\u662f\u7a0b\u5e8f\u653e\u5f03\u4e86\u5185\u5b58\uff0c\u6240\u4ee5\u5185\u5b58\u5206\u914d\u5668\u62ff\u56de\u8fd9\u6bb5\u5185\u5b58\u7684\u7ba1\u7406\u6743\u3002\u6240\u4ee5\uff0c\u5f53\u6211\u4eec\u9700\u8981\u7ed9\u5185\u5b58\u5206\u914d\u5668\u4e00\u70b9\u5185\u5b58\u7684\u65f6\u5019\uff0c\u8981\u8c03\u7528 <code>free</code> \u800c\u4e0d\u662f <code>alloc</code>\u3002</p> <p>\u597d\u4e86\uff0c\u6211\u4eec\u5f00\u59cb\u5427\u3002\u9996\u5148\u628a\u4e0a\u9762\u7684\u8868\u9879\u4f9d\u6837\u753b\u846b\u82a6\u6284\u4e0b\u6765\uff1a</p> <p>\u4ee3\u7801 11-7 \u8868\u683c\u578b\u5185\u5b58\u7ba1\u7406\u6570\u636e\u7ed3\u6784\u7684\u5b9a\u4e49\uff08include/memory.h\uff09 <pre><code>#define MEMMAN_FREES 4090\n\ntypedef struct FREEINFO {\n    uint32_t addr, size;\n} freeinfo_t;\n\ntypedef struct MEMMAN {\n    int frees;\n    freeinfo_t free[MEMMAN_FREES];\n} memman_t;\n</code></pre></p> <p>\u7d27\u63a5\u7740\uff0c\u662f\u521d\u59cb\u5316\u3001\u603b\u6570\u636e\u548c\u5206\u914d\u7684\u4ee3\u7801\uff0c\u7531\u4e8e\u5341\u5206\u7b80\u5355\uff0c\u5408\u5e76\u4e3a\u540c\u4e00\u4e2a\u90e8\u5206\uff1a</p> <p>\u4ee3\u7801 11-8 \u8868\u683c\u521d\u59cb\u5316\u3001\u8868\u683c\u603b\u6570\u636e\u548c\u5185\u5b58\u5206\u914d\uff08kernel/memory.c\uff09 <pre><code>static void memman_init(memman_t *man)\n{\n    man-&gt;frees = 0;\n}\n\nstatic uint32_t memman_total(memman_t *man)\n{\n    uint32_t i, t = 0;\n    for (i = 0; i &lt; man-&gt;frees; i++) t += man-&gt;free[i].size; // \u5269\u4f59\u5185\u5b58\u603b\u548c\n    return t;\n}\n\nstatic uint32_t memman_alloc(memman_t *man, uint32_t size)\n{\n    uint32_t i, a;\n    for (i = 0; man-&gt;frees; i++) {\n        if (man-&gt;free[i].size &gt;= size) { // \u627e\u5230\u4e86\u8db3\u591f\u7684\u5185\u5b58\n            a = man-&gt;free[i].addr;\n            man-&gt;free[i].addr += size; // addr\u540e\u79fb\uff0c\u56e0\u4e3a\u539f\u6765\u7684addr\u88ab\u4f7f\u7528\u4e86\n            man-&gt;free[i].size -= size; // size\u4e5f\u8981\u51cf\u6389\n            if (man-&gt;free[i].size == 0) { // \u8fd9\u4e00\u6761size\u88ab\u5206\u914d\u5b8c\u4e86\n                man-&gt;frees--; // \u51cf\u4e00\u6761frees\n                for (; i &lt; man-&gt;frees; i++) {\n                    man-&gt;free[i] = man-&gt;free[i + 1]; // \u5404free\u524d\u79fb\n                }\n            }\n            return a; // \u8fd4\u56de\n        }\n    }\n    return 0; // \u65e0\u53ef\u7528\u7a7a\u95f4\n}\n</code></pre></p> <p>\u5185\u5b58\u5206\u914d\u548c\u603b\u6570\u636e\u7edf\u8ba1\u5c31\u4e0d\u591a\u89e3\u91ca\u4e86\uff0c\u5206\u914d\u7684\u64cd\u4f5c\u5927\u90e8\u5206\u90fd\u5df2\u7ecf\u89e3\u91ca\u8fc7\uff0c\u4e5f\u4e0d\u591a\u8bf4\u3002</p> <p>\u63a5\u4e0b\u6765\u662f\u5185\u5b58\u91ca\u653e\uff0c\u8fd9\u4e00\u90e8\u5206\u6bd4\u8f83\u590d\u6742\u3002</p> <p>\u4ee3\u7801 11-9 \u5185\u5b58\u91ca\u653e\uff08kernel/memory.c\uff09 <pre><code>static int memman_free(memman_t *man, uint32_t addr, uint32_t size)\n{\n    int i, j;\n    for (i = 0; i &lt; man-&gt;frees; i++) {\n        // \u5404free\u6309addr\u5347\u5e8f\u6392\u5217\n        if (man-&gt;free[i].addr &gt; addr) break; // \u627e\u5230\u4f4d\u7f6e\u4e86\uff01\n        // \u73b0\u5728\u7684\u8fd9\u4e2a\u4f4d\u7f6e\u662f\u7b2c\u4e00\u4e2a\u5728addr\u4e4b\u540e\u7684\u4f4d\u7f6e\uff0c\u6709man-&gt;free[i - 1].addr &lt; addr &lt; man-&gt;free[i].addr\n    }\n    if (i &gt; 0) {\n        if (man-&gt;free[i - 1].addr + man-&gt;free[i - 1].size == addr) {\n            // \u53ef\u4ee5\u548c\u524d\u9762\u7684\u53ef\u7528\u90e8\u5206\u5408\u5e76\n            man-&gt;free[i - 1].size += size; // \u5e76\u5165\n            if (i &lt; man-&gt;frees) {\n                if (addr + size == man-&gt;free[i].addr) {\n                    // \u53ef\u4ee5\u4e0e\u540e\u9762\u7684\u53ef\u7528\u90e8\u5206\u5408\u5e76\n                    man-&gt;free[i - 1].size += man-&gt;free[i].size;\n                    // man-&gt;free[i]\u5220\u9664\u4e0d\u7528\n                    man-&gt;frees--; // frees\u51cf1\n                    for (; i &lt; man-&gt;frees; i++) {\n                        man-&gt;free[i] = man-&gt;free[i + 1]; // \u524d\u79fb\n                    }\n                }\n            }\n            return 0; // free\u5b8c\u6bd5\n        }\n    }\n    // \u4e0d\u80fd\u4e0e\u524d\u9762\u7684\u5408\u5e76\n    if (i &lt; man-&gt;frees) {\n        if (addr + size == man-&gt;free[i].addr) {\n            // \u53ef\u4ee5\u4e0e\u540e\u9762\u7684\u53ef\u7528\u90e8\u5206\u5408\u5e76\n            man-&gt;free[i].addr = addr;\n            man-&gt;free[i].size += size;\n            return 0; // \u6210\u529f\u5408\u5e76\n        }\n    }\n    // \u4e24\u8fb9\u90fd\u5408\u5e76\u4e0d\u4e86\n    if (man-&gt;frees &lt; MEMMAN_FREES) {\n        // free[i]\u4e4b\u540e\u7684\u540e\u79fb\uff0c\u817e\u51fa\u7a7a\u95f4\n        for (j = man-&gt;frees; j &gt; i; j--) man-&gt;free[j] = man-&gt;free[j - 1];\n        man-&gt;frees++;\n        man-&gt;free[i].addr = addr;\n        man-&gt;free[i].size = size; // \u66f4\u65b0\u5f53\u524d\u5730\u5740\u548c\u5927\u5c0f\n        return 0; // \u6210\u529f\u5408\u5e76\n    }\n    // \u65e0free\u53ef\u7528\u4e14\u65e0\u6cd5\u5408\u5e76\n    return -1; // \u5931\u8d25\n}\n</code></pre></p> <p>\u91ca\u653e\u7684\u90e8\u5206\u6bd4\u4e0a\u9762\u4e09\u4e2a\u90e8\u5206\u52a0\u8d77\u6765\u8fd8\u957f\uff0c\u89e3\u91ca\u4e00\u4e0b\u3002</p> <p>\u9996\u5148\uff0c\u7a0d\u5fae\u5206\u6790\u4e00\u4e0b\u5c31\u4f1a\u53d1\u73b0\uff0c\u5728\u8868\u683c\u4e2d\u7684\u6240\u6709\u8868\u9879\uff0c\u5fc5\u7136\u4ee5\u57fa\u5730\u5740\u4e3a\u952e\u5448\u5347\u5e8f\u6392\u5217\uff08\u4e5f\u5c31\u662f\u8bf4\uff0c\u8d8a\u5f80\u540e\u7684\u9879\uff0c\u57fa\u5730\u5740\u4e5f\u8d8a\u5927\uff09\u3002\u6b63\u56e0\u5982\u6b64\uff0c\u7b2c3~8\u884c\u7684\u5224\u65ad\u624d\u5f97\u4ee5\u987a\u5229\u8fdb\u884c\u3002</p> <p>\u7b2c9<sub>26\u884c\uff0c\u662f\u5f53\u524d\u91ca\u653e\u7684\u8fd9\u4e00\u6bb5\u5185\u5b58\u4e0e\u524d\u540e\u8fdb\u884c\u5408\u5e76\u7684\u5224\u65ad\u3002\u7b2c28</sub>35\u884c\uff0c\u5982\u679c\u65e0\u6cd5\u4e0e\u524d\u9762\u7684\u5408\u5e76\uff0c\u5219\u8981\u8fdb\u884c\u4e0e\u540e\u9762\u7684\u5185\u5b58\u5408\u5e76\u7684\u5224\u65ad\u3002\u5982\u679c\u4e0d\u8fd9\u6837\u5224\u65ad\uff0c\u4f1a\u51fa\u73b0\u4e0b\u9762\u7684\u60c5\u51b5\uff1a</p> <pre><code>\u5185\u5b58\u8868\u98790: \u8d77\u59cb\u5730\u5740 0x400000\uff0c\u5927\u5c0f 3KB\n\u5185\u5b58\u8868\u98791: \u8d77\u59cb\u5730\u5740 0x401000\uff0c\u5927\u5c0f 4KB\n\n\u5f53\u91ca\u653e\u4ece 0x400c00 \u5f00\u59cb\u7684 1KB \u65f6\uff0c\u5982\u679c\u4e0d\u8fdb\u884c\u5224\u65ad\uff0c\u90a3\u4e48\u5982\u679c\u540e\u7eed\u8981\u5206\u914d 5KB \u5185\u5b58\uff0c\u4fbf\u65e0\u4ece\u4e0b\u624b\u3002\u7136\u800c\uff0c\u8fd9\u4e09\u6bb5\u5185\u5b58\uff08\u8868\u98790\u3001\u8868\u98791\u3001\u521a\u91ca\u653e\uff09\u5b9e\u9645\u4e0a\u662f\u4ee5 0x400000 \u4e3a\u8d77\u59cb\u3001\u5171\u8ba1 8KB \u7684\u8fde\u7eed\u5185\u5b58\u7a7a\u95f4\uff0c\u5b8c\u5168\u53ef\u4ee5\u5206\u914d 5KB \u5185\u5b58\u3002\n</code></pre> <p>\u5982\u679c\u90fd\u5408\u5e76\u4e0d\u4e86\uff0c\u53ea\u597d\u5355\u72ec\u521b\u5efa\u4e00\u4e2a\u5185\u5b58\u5757\u63d2\u5165\u5728\u8fd9\u4e4b\u95f4\u3002\u5982\u679c\u5df2\u7ecf\u5b8c\u5168\u6ca1\u6709\u5730\u65b9\uff0c\u53ea\u597d\u8fd4\u56de-1\u62a5\u9519\u4e86\u3002</p> <p>\u597d\u4e86\uff0c\u5230\u6b64\u4e3a\u6b62\uff0c\u6211\u4eec\u4ec5\u7528\u4e86\u4e0d\u5230200\u884c\u4ee3\u7801\uff0c\u5c31\u5b8c\u6210\u4e86\u6bb5\u5f0f\u5185\u5b58\u7ba1\u7406\u7684\u5b9e\u73b0\u2014\u2014\u5427\u3002\u5728\u6b64\u4e4b\u524d\uff0c\u6211\u4eec\u8981\u5bf9\u6bb5\u5f0f\u5185\u5b58\u7ba1\u7406\u8fdb\u884c\u4e00\u4e2a\u57fa\u672c\u7684\u5c01\u88c5\u3002</p> <p>\u9996\u5148\uff0c\u73b0\u5728\u7684\u5185\u5b58\u91ca\u653e\u9700\u8981\u6307\u5b9a\u5927\u5c0f\uff0c\u8fd9\u5b9e\u5728\u662f\u975e\u5e38\u4e0d\u65b9\u4fbf\u7684\u4e00\u4e2a\u56e0\u7d20\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5f00\u8f9f\u51fa\u4e00\u5b9a\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u4f9b\u5185\u5b58\u91ca\u653e\u65f6\u8bfb\u53d6\u5927\u5c0f\u4f7f\u7528\u3002</p> <p>\u5177\u4f53\u800c\u8a00\uff0c\u5c01\u88c5\u540e\u7684 <code>kmalloc</code> \u548c <code>kfree</code> \u5982\u4e0b\uff1a</p> <p>\u4ee3\u7801 11-10 \u6700\u7ec8\u5c01\u88c5\u5185\u5b58\u7ba1\u7406\uff08kernel/memory.c\uff09 <pre><code>void *kmalloc(uint32_t size)\n{\n    uint32_t addr;\n    memman_t *memman = (memman_t *) MEMMAN_ADDR;\n    addr = memman_alloc(memman, size + 16); // \u591a\u5206\u914d16\u5b57\u8282\n    memset((void *) addr, 0, size + 16);\n    char *p = (char *) addr;\n    if (p) {\n        *((int *) p) = size;\n        p += 16;\n    }\n    return (void *) p;\n}\n\nvoid kfree(void *p)\n{\n    char *q = (char *) p;\n    int size = 0;\n    if (q) {\n        q -= 16;\n        size = *((int *) q);\n    }\n    memman_t *memman = (memman_t *) MEMMAN_ADDR;\n    memman_free(memman, (uint32_t) q, size + 16);\n    p = NULL;\n    return;\n}\n</code></pre></p> <p>\u4ee3\u7801 11-11 <code>MEMMAN_ADDR</code> \u7684\u5b9a\u4e49\uff08include/memory.h\uff09 <pre><code>#define MEMMAN_ADDR 0x003c0000\n</code></pre></p> <p>\u8fd9\u4e00\u90e8\u5206\u6d89\u53ca\u5230\u76f8\u5f53\u6666\u6da9\u7684\u6307\u9488\u64cd\u4f5c\uff0c\u7b80\u5355\u89e3\u91ca\u4e00\u4e0b\u3002</p> <p>\u5728 <code>kmalloc</code> \u4e2d\uff0c\u9996\u5148\u4ece\u4e00\u4e2a\u56fa\u5b9a\u7684\u5730\u5740\uff080x3c0000\uff09\u8bfb\u51fa\u4e00\u4e2a <code>memman_t</code> \u6765\uff0c\u7136\u540e\u5206\u914d <code>size</code> \u5b57\u8282\u7684\u5185\u5b58\u3002\u6ce8\u610f\u8fd9\u91cc\u8fd8\u591a\u5206\u914d\u4e86 16 \u4e2a\u5b57\u8282\uff0c\u8fd9\u662f\u5e72\u4ec0\u4e48\u7528\u7684\u5462\uff1f</p> <p>\u4f17\u6240\u5468\u77e5\uff0c<code>free</code> \u662f\u4e0d\u9700\u8981\u77e5\u9053\u8fd9\u6bb5\u5185\u5b58\u7684\u5927\u5c0f\u7684\uff0c\u6211\u4eec\u5e0c\u671b <code>kfree</code> \u4e5f\u662f\u4e00\u6837\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u4fbf\u9700\u8981\u5728\u8fd9\u6bb5\u5185\u5b58\u7684\u4e00\u5f00\u5934\u628a\u5927\u5c0f\u5b58\u8d77\u6765\u3002\u8fd9\u4e5f\u5c31\u662f\u7b2c 351 \u884c\u5728\u5e72\u7684\u4e8b\u60c5\uff1a\u628a p \u8f6c\u5316\u6210 int \u6307\u9488\uff0c\u518d\u5411\u5b83\u8fd9\u4e2a\u5730\u5740\u5904\u5199\u5165\u5927\u5c0f\uff0c\u6700\u540e\u628a\u6307\u9488\u540e\u79fb16\u628a\u5927\u5c0f\u8fd9\u4e00\u5757\u7a7a\u8fc7\u53bb\u3002</p> <p>\u540c\u7406\uff0c\u5728 <code>kfree</code> \u4e2d\uff0c\u5148\u4ece\u5730\u5740\u6700\u5f00\u5934\u8bfb\u51fa\u5927\u5c0f\uff0c\u7136\u540e\u4ece\u540c\u4e00\u4e2a <code>memman_t</code> \u5904\u628a\u5185\u5b58\u91ca\u653e\u3002</p> <p>\u6700\u540e\u7684\u6700\u540e\uff0c\u7531\u4e8e <code>kmalloc</code> \u548c <code>kfree</code> \u90fd\u6307\u7740\u8fd9\u5757\u5730\u7684 <code>memman_t</code> \u5462\uff0c\u6211\u4eec\u9700\u8981\u5728 <code>init_memory</code> \u4e2d\u521d\u59cb\u5316 <code>memman</code>\u3002\u4ee3\u7801\u5982\u4e0b\uff1a</p> <p>\u4ee3\u7801 11-12 \u521d\u59cb\u5316 <code>memman</code>\uff08kernel/memory.c\uff09 <pre><code>void init_memory()\n{\n    uint32_t memtotal = memtest(0x00400000, 0xbfffffff);\n    memman_t *memman = (memman_t *) MEMMAN_ADDR;\n    memman_init(memman);\n    memman_free(memman, 0x400000, memtotal - 0x400000);\n}\n</code></pre></p> <p>\u540c\u6837\u5220\u53bb\u4e86\u6253\u5370\uff0c\u56e0\u4e3a\u7528\u4e0d\u5230\u4e86\u3002</p> <p>\u5185\u5b58\u7ba1\u7406\u5230\u6b64\u7ed3\u675f\uff0c\u6211\u4eec\u8fd8\u771f\u9a8c\u8bc1\u4e0d\u4e86\u5b83\u80fd\u4e0d\u80fd\u7528\uff0c\u4e0d\u8fc7\uff0c\u5f88\u5feb\uff0c\u6211\u4eec\u4f1a\u8f6c\u5165\u53e6\u4e00\u4e2a\u66f4\u5177\u6311\u6218\u6027\u7684\u8bfe\u9898\u2014\u2014\u591a\u4efb\u52a1\u3002</p>"},{"location":"os-tutorial/old/12-multitasking/","title":"12 \u591a\u4efb\u52a1","text":"<p>\u6ce8\uff1a\u4e0e\u4e0a\u4e00\u7bc7\u7c7b\u4f3c\uff0c\u672c\u8282\u540c\u6837\u6709\u53c2\u8003\u300a30\u5929\u81ea\u5236\u64cd\u4f5c\u7cfb\u7edf\u300b\uff0c\u4f46\u4e0d\u50cf\u4e0a\u4e00\u8282\u4e00\u6837\u6ca1\u6709\u539f\u521b\u7684\u4e1c\u897f\uff08<code>kmalloc</code> \u548c <code>kfree</code> \u7684\u4ee3\u7801\u572829.3\u8282\u4e2d\u6709\uff09\u3002</p> <p>\u591a\u4efb\u52a1\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u591a\u4e2a\u4efb\u52a1\u540c\u65f6\u8fdb\u884c\u3002\u5728\u8ba1\u7b97\u673a\u4e2d\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u6982\u5ff5\uff0c\u5426\u5219\u8fd9\u7bc7\u6559\u7a0b\u751a\u81f3\u5199\u4e0d\u51fa\u6765\uff08\u6211\u9700\u8981\u4e00\u8fb9\u6253\u5b57\u4e00\u8fb9\u5199\u4ee3\u7801\uff0c\u663e\u7136\u9700\u8981\u4e24\u4e2a\u4e00\u5757\u5f00\uff09\u3002\u5f53\u7136\u5728\u73b0\u5b9e\u751f\u6d3b\u4e2d\uff0c\u4e0d\u63a8\u8350\u4f7f\u7528\u591a\u4efb\u52a1\u3002</p> <p>\u7406\u8bba\u4e0a\u8bb2\uff0c\u53ea\u6709\u4e00\u4e2a CPU \u7684\u65f6\u5019\uff0c\u662f\u6ca1\u6709\u529e\u6cd5\u591a\u4e2a\u4efb\u52a1\u201c\u540c\u65f6\u201d\u8fdb\u884c\u7684\u2014\u2014\u56e0\u4e3a\u4e00\u6b21\u53ea\u80fd\u6709\u4e00\u6bb5\u4ee3\u7801\u5728 CPU \u4e0a\u8dd1\u3002\u4f46\u6b63\u50cfO(1)\u4e0d\u662f\u7acb\u5373\u5b8c\u6210\uff0c\u800c\u662f\u201c\u5e38\u91cf\u65f6\u95f4\u201d\uff0c\u591a\u4efb\u52a1\u4e5f\u4e0d\u662f\u540c\u65f6\u8fdb\u884c\uff0c\u800c\u662f\u201c\u4ea4\u66ff\u8fdb\u884c\u201d\uff0c\u53ea\u662f\u8fd9\u79cd\u4ea4\u66ff\u95f4\u9694\u65f6\u95f4\u6781\u77ed\u3002</p> <p>\u5728 intel x86 cpu \u4e2d\uff0c\u4efb\u52a1\u5207\u6362\u7684\u6838\u5fc3\u662f\u4efb\u52a1\u72b6\u6001\u6bb5\uff08TSS\uff09\uff0c\u8fd9\u4e00\u90e8\u5206\u5b8c\u5168\u662f intel \u786c\u4ef6\u63d0\u4f9b\u7684\u3002\u7531\u4e8e TSS \u662f\u4e00\u4e2a\u6bb5\uff0c\u5728\u5b9e\u9645\u4f7f\u7528\u65f6\uff0c\u9700\u8981\u628a\u8fd9\u4e2a\u6bb5\u6ce8\u518c\u5230 GDT \u4e2d\u3002</p> <p>\u7531\u4e8e\u6548\u7387\u8f83\u4f4e\uff0c\u5728 Linux \u7b49\u66f4\u4e3a\u73b0\u4ee3\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u5df2\u7ecf\u5e9f\u5f03\u4e86\u8fd9\u79cd\u65b9\u6cd5\uff0c\u4f46\u521d\u5b66\u800c\u8a00\uff0c\u8fd8\u662f\u7528\u539f\u751f\u81ea\u5e26\u7684\u6bd4\u8f83\u597d\u3002</p> <p>TSS \u603b\u5171\u6709 16 \u4f4d\u300132 \u4f4d\u548c 64 \u4f4d\u4e09\u79cd\u7248\u672c\uff0c\u6211\u4eec\u6765\u770b\u770b 32 \u4f4d\u7248\u7684 TSS \u957f\u4ec0\u4e48\u6837\uff1a</p> <p>\u4ee3\u7801 12-1 TSS32\uff08include/mtask.h\uff09 <pre><code>#ifndef _MTASK_H_\n#define _MTASK_H_\n\n#include \"common.h\"\n\ntypedef struct TSS32 {\n    uint32_t backlink, esp0, ss0, esp1, ss1, esp2, ss2, cr3;\n    uint32_t eip, eflags, eax, ecx, edx, ebx, esp, ebp, esi, edi;\n    uint32_t es, cs, ss, ds, fs, gs;\n    uint32_t ldtr, iomap;\n} tss32_t;\n\n#endif\n</code></pre></p> <p><code>TSS32</code> \u7ed3\u6784\u4f53\u7684\u7b2c\u4e8c\u3001\u4e09\u884c\uff0c\u662f\u4efb\u52a1\u5207\u6362\u4e2d\u4f1a\u968f\u65f6\u66f4\u6539\u7684\u5bc4\u5b58\u5668\u3002\u4efb\u52a1\u5207\u6362\u53d1\u751f\u65f6\uff0c\u4f1a\u628a\u5f53\u65f6\u5bc4\u5b58\u5668\u7684\u503c\u5b58\u5165 TSS\u3002</p> <p>\u7b2c\u4e00\u3001\u56db\u884c\u4e0e\u4efb\u52a1\u5207\u6362\u76f8\u5173\uff0c\u6682\u4e14\u6309\u4e0b\u4e0d\u8868\u3002<code>ldtr</code> \u8fd9\u4e2a\u540d\u5b57\uff0c\u8054\u60f3 <code>gdtr</code> \u548c <code>idtr</code>\uff0c\u76f8\u4fe1\u5404\u4f4d\u8bfb\u8005\u80fd\u591f\u63a8\u6d4b\u51fa\u5b83\u8868\u793a\u4ec0\u4e48\uff0c\u7b2c 22 \u8282\u6211\u4eec\u518d\u56de\u6765\u91cd\u7ffb\u65e7\u6848\u3002</p> <p>\u7531\u4e8e <code>TSS32</code> \u7684\u7ed3\u6784\u4e0e\u786c\u4ef6\u5f3a\u76f8\u5173\uff0c\u663e\u7136\u6211\u4eec\u4e0d\u80fd\u7528\u5b83\u6765\u4ee3\u8868\u4e00\u4e2a\u4efb\u52a1\uff0c\u4e0d\u7136\u60f3\u7ed9\u4efb\u52a1\u52a0\u70b9\u4ec0\u4e48\u989d\u5916\u7684\u5c5e\u6027\uff0c\u786c\u4ef6\u5c31\u8981\u6709\u610f\u89c1\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u5728\u5916\u9762\u5957\u4e00\u5c42\u5c01\u88c5\uff0c\u6784\u6210 <code>TASK</code> \u7ed3\u6784\u4f53\uff1a</p> <p>\u4ee3\u7801 12-2 \u8868\u793a\u4efb\u52a1\u7684\u7ed3\u6784\u4f53\uff08include/mtask.h\uff09 <pre><code>typedef struct TASK {\n    uint32_t sel;\n    int32_t flags;\n    tss32_t tss;\n} task_t;\n</code></pre></p> <p>\u76ee\u524d\uff0c\u5b83\u53ea\u6709\u4e24\u4e2a\u5c5e\u6027\uff1a<code>sel</code> \u548c <code>flags</code>\u3002<code>sel</code> \u4ee3\u8868\u5b83\u5bf9\u5e94\u7684 TSS \u7684\u9009\u62e9\u5b50\uff0c<code>flags</code> \u4ee3\u8868\u5b83\u7684\u6807\u5fd7\uff0c\u5982\u662f\u5426\u4f7f\u7528\u8fc7\u3001\u662f\u5426\u5728\u8fd0\u884c\u7b49\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6765\u5b9e\u73b0\u4e00\u4e2a\u63a7\u5236\u4efb\u52a1\u7684\u7ed3\u6784\u4f53\u3002\u7531\u4e8e\u6ce8\u518c\u7684\u4efb\u52a1\u548c\u5b9e\u9645\u7684\u4efb\u52a1\u53ef\u80fd\u4e0d\u4e00\u81f4\uff0c\u8fd9\u9700\u8981\u4e24\u4e2a <code>task_t</code> \u6570\u7ec4\uff0c\u7531\u4e8e\u8f83\u4e3a\u590d\u6742\uff0c\u6253\u5305\u4e3a\u4e00\u4e2a\u7ed3\u6784\u4f53\uff1a</p> <p>\u4ee3\u7801 12-3 \u4efb\u52a1\u63a7\u5236\u7ed3\u6784\u4f53\uff08include/mtask.h\uff09 <pre><code>#define MAX_TASKS 1000\n#define TASK_GDT0 3\n\ntypedef struct TASKCTL {\n    int running, now;\n    task_t *tasks[MAX_TASKS];\n    task_t tasks0[MAX_TASKS];\n} taskctl_t;\n</code></pre></p> <p><code>running</code> \u548c <code>now</code> \u4ee3\u8868\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u6570\u91cf\u548c\u5f53\u524d\u8fd0\u884c\u7684\u4efb\u52a1\u7f16\u53f7\uff0c<code>tasks</code> \u662f\u5b9e\u9645\u8fd0\u884c\u4efb\u52a1\u7684\u6570\u7ec4\uff0c<code>tasks0</code> \u662f\u4efb\u52a1\u6ce8\u518c\u65f6\u8fdb\u5165\u7684\u6570\u7ec4\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4e00\u4e2a <code>taskctl_t</code>\uff0c\u5c31\u53ef\u4ee5\u5f15\u7528\u5230\u6240\u6709\u8fd9\u4e9b\u63a7\u5236\u4efb\u52a1\u7684\u53d8\u91cf\u4e86\u3002</p> <p><code>TASK_GDT0</code> \u8868\u793a\u4ece\u7b2c\u591a\u5c11\u53f7 GDT \u5f00\u59cb\u5206\u914d\u7ed9 TSS \u4f7f\u7528\u3002</p> <p>\u4efb\u52a1\u63a7\u5236\u7684\u58f0\u660e\u90e8\u5206\u6682\u544a\u4e00\u6bb5\u843d\uff0c\u63a5\u4e0b\u6765\u662f\u5b9e\u9645\u7684\u63a7\u5236\u4ee3\u7801\u3002\u7cfb\u597d\u5b89\u5168\u5e26\uff0c\u6211\u4eec\u5f00\u59cb\u5427\u3002</p> <p>\u9996\u5148\uff0c\u662f\u521d\u59cb\u5316\u591a\u4efb\u52a1\u73af\u5883\u7684\u51fd\u6570 <code>task_init</code>\u3002\u9996\u5148\u5b83\u4f1a\u521d\u59cb\u5316 <code>taskctl</code>\uff0c\u5728\u6267\u884c\u5b8c\u540e\uff0c\u5f53\u524d\u6267\u884c\u6d41\u5c06\u88ab\u5f53\u6210\u4e00\u4e2a\u4efb\u52a1\u6765\u5bf9\u5f85\uff0c\u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u65b9\u4fbf\u7ba1\u7406\u3002</p> <p>\u4ee3\u7801 12-4 \u521d\u59cb\u5316\u591a\u4efb\u52a1\u73af\u5883\uff08kernel/mtask.c\uff09 <pre><code>#include \"mtask.h\"\n#include \"gdtidt.h\"\n#include \"memory.h\"\n#include \"isr.h\"\n\nextern void load_tr(int);\nextern void farjmp(int, int);\n\ntaskctl_t *taskctl;\n\ntask_t *task_init()\n{\n    task_t *task;\n    taskctl = (taskctl_t *) kmalloc(sizeof(taskctl_t));\n    for (int i = 0; i &lt; MAX_TASKS; i++) {\n        taskctl-&gt;tasks0[i].flags = 0;\n        taskctl-&gt;tasks0[i].sel = (TASK_GDT0 + i) * 8;\n        gdt_set_gate(TASK_GDT0 + i, (int) &amp;taskctl-&gt;tasks0[i].tss, 103, 0x89); // \u786c\u6027\u89c4\u5b9a\uff0c0x89 \u4ee3\u8868 TSS\uff0c103 \u662f\u56e0\u4e3a TSS \u5171 26 \u4e2a uint32_t \u7ec4\u6210\uff0c\u603b\u8ba1 104 \u5b57\u8282\uff0c\u56e0\u89c4\u7a0b\u51cf1\u53d8\u4e3a103\n    }\n    task = task_alloc();\n    task-&gt;flags = 2;\n    taskctl-&gt;running = 1;\n    taskctl-&gt;now = 0;\n    taskctl-&gt;tasks[0] = task;\n    load_tr(task-&gt;sel); // \u5411CPU\u62a5\u544a\u5f53\u524dtask-&gt;sel\u5bf9\u5e94\u7684\u4efb\u52a1\u4e3a\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\n    return task;\n}\n</code></pre></p> <p>\u8fd9\u4e4b\u4e2d\u6700\u96be\u61c2\u7684\u5927\u6982\u5c31\u662f\u5012\u6570\u7b2c\u4e09\u884c\u7684 <code>load_tr</code> \u4e86\u5427\u3002\u8c03\u7528 <code>task_init</code> \u7684\u5e94\u8be5\u662f <code>kernel_main</code>\uff0c\u800c <code>kernel_main</code> \u6b64\u65f6\u8fd8\u6ca1\u6709\u4efb\u52a1\u5f62\u6001\uff0c\u9700\u8981\u7528 <code>load_tr</code> \u6765\u4f7f\u5f97 CPU \u8ba4\u8bc6\u5230\u8fd9\u662f\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u3002</p> <p>\u4ee3\u7801 12-5 load_tr\uff08lib/nasmfunc.asm\uff09 <pre><code>[global load_tr]\nload_tr:\n    ltr [esp + 4]\n    ret\n</code></pre></p> <p>\u5728\u8fd9\u4e4b\u4e2d\uff0c\u7528\u5230\u4e86 <code>task_alloc</code>\uff0c\u5b83\u662f\u5206\u914d\u4e00\u4e2a\u4efb\u52a1\u7528\u7684\u51fd\u6570\u3002\u5148\u4ece <code>tasks0</code> \u4e2d\u627e\u5230\u7a7a\u9879\uff0c\u7136\u540e\u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u5de5\u4f5c\uff0c\u6700\u540e\u8fd4\u56de\u4e00\u4e2a\u5d2d\u65b0\u7684\u4efb\u52a1\u3002</p> <p>\u4ee3\u7801 12-6 \u5206\u914d\u4efb\u52a1\u7528 <code>task_alloc</code>\uff08kernel/mtask.c\uff09 <pre><code>task_t *task_alloc()\n{\n    task_t *task;\n    for (int i = 0; i &lt; MAX_TASKS; i++) {\n        if (taskctl-&gt;tasks0[i].flags == 0) {\n            task = &amp;taskctl-&gt;tasks0[i];\n            task-&gt;flags = 1;\n            task-&gt;tss.eflags = 0x00000202; // \u6253\u5f00\u4e2d\u65ad\n            task-&gt;tss.eax = task-&gt;tss.ecx = task-&gt;tss.edx = task-&gt;tss.ebx = 0;\n            task-&gt;tss.ebp = task-&gt;tss.esi = task-&gt;tss.edi = 0;\n            task-&gt;tss.es = task-&gt;tss.ds = task-&gt;tss.fs = task-&gt;tss.gs = 0;\n            task-&gt;tss.ldtr = 0;\n            task-&gt;tss.iomap = 0x40000000;\n            return task;\n        }\n    }\n    return NULL;\n}\n</code></pre></p> <p><code>eflags</code> \u7684\u8fd9\u4e2a\u6570\u503c\u8868\u793a\u65b0\u4efb\u52a1\u9ed8\u8ba4\u5f00\u542f\u4e2d\u65ad\u3002<code>iomap</code> \u672c\u610f\u662f\u8ba9\u5e94\u7528\u7a0b\u5e8f\u80fd\u591f\u6267\u884c <code>in/out</code> \u6307\u4ee4\u6240\u8bbe\u7f6e\uff0c\u4f46\u6211\u4eec\u4e0d\u9700\u8981\u8ba9\u5b83\u6267\u884c\u8fd9\u4e9b\u6307\u4ee4\uff0c\u5426\u5219\u5230\u65f6\u5019\u6267\u884c\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff0c\u952e\u76d8\u4e5f\u4e0d\u53d1\u4fe1\u53f7\u4e86\uff0c\u65f6\u949f\u4e5f\u4e0d\u54cd\u4e86\uff0c\u5c31\u8fde\u7535\u8111\u90fd\u91cd\u542f\u4e86\uff0c\u6240\u4ee5\u628a\u5b83\u8bbe\u7f6e\u6210 <code>0x40000000</code>\uff08\u4e8b\u5b9e\u4e0a\u53ea\u8981\u5927\u4e8e\u7b49\u4e8e 103 \u5c31\u53ef\u4ee5\uff09\u8868\u793a\uff1a\u5f53\u4f5c\u4e3a\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u4e0d\u9700\u8981\u6267\u884c <code>in/out</code> \u6307\u4ee4\u3002\u81f3\u4e8e CPU \u600e\u4e48\u5224\u65ad\u4f60\u662f\u4e0d\u662f\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff0c\u7b2c 22 \u8282\u518d\u8bf4\u3002</p> <p>\u63a5\u4e0b\u6765\u662f <code>task_run</code>\uff0c\u4f7f\u4e00\u4e2a\u4efb\u52a1\u5f00\u59cb\u8fd0\u884c\u3002\u5b9e\u9645\u4e0a\u53ea\u662f\u628a\u8fd9\u4e2a\u4efb\u52a1\u52a0\u5165\u4e86 <code>tasks</code> \u6570\u7ec4\u800c\u5df2\u3002</p> <p>\u4ee3\u7801 12-7 \u8fd0\u884c\u4efb\u52a1\u7528 <code>task_run</code>\uff08kernel/mtask.c\uff09 <pre><code>void task_run(task_t *task)\n{\n    task-&gt;flags = 2;\n    taskctl-&gt;tasks[taskctl-&gt;running] = task;\n    taskctl-&gt;running++;\n}\n</code></pre></p> <p>\u63a5\u4e0b\u6765\u662f <code>task_switch</code>\uff0c\u771f\u6b63\u6267\u884c\u4efb\u52a1\u5207\u6362\u7684\u90e8\u5206\u3002\u4e0d\u8fc7\uff0c\u6211\u4eec\u597d\u50cf\u8fd8\u6ca1\u6709\u5177\u4f53\u8bb2\u7a76\u7adf\u662f\u600e\u4e48\u4efb\u52a1\u5207\u6362\u7684\uff0c\u6211\u4eec\u73b0\u5728\u6765\u7b80\u5355\u8bf4\u4e00\u4e0b\u3002</p> <p>\u5176\u5b9e\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u7528 <code>farjmp</code> \u5c31\u53ef\u4ee5\u4e86\u3002\u5f53\u6267\u884c\u4e00\u4e2a\u8fdc\u8df3\u8f6c\uff08\u5c31\u662f\u6211\u4eec\u4e4b\u524d\u7528\u8fc7\u7684 <code>jmp xxx:xxx</code>\uff09\u65f6\uff0cCPU \u4f1a\u68c0\u67e5\u5bf9\u5e94\u7684\u6bb5\u662f\u5426\u662f\u4ee3\u7801\u6bb5\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5c31\u9000\u800c\u6c42\u5176\u6b21\u68c0\u67e5\u662f\u4e0d\u662f TSS\u3002\u5982\u679c\u662f TSS\uff0c\u5c31\u4f1a\u5148\u628a\u5f53\u524d\u4efb\u52a1\u7684\u5168\u90e8\u5bc4\u5b58\u5668\u5b58\u5230\u5b83\u7684 TSS \u91cc\uff0c\u7136\u540e\u81ea\u52a8\u8bfb\u53d6 TSS \u4e2d\u7684\u5168\u90e8\u5bc4\u5b58\u5668\uff0c\u8fd9\u4e4b\u4e2d\u5305\u62ec\u4e0b\u4e00\u6b65\u6267\u884c\u54ea\u91cc\u7684 <code>eip</code>\uff0c\u4ece\u800c\u6062\u590d\u65ad\u70b9\uff0c\u7ee7\u7eed\u6267\u884c\u3002</p> <p>\u4ee3\u7801 12-8 <code>farjmp</code>\uff08lib/nasmfunc.asm\uff09 <pre><code>[global farjmp]\nfarjmp:\n    jmp far [esp + 4]\n    ret\n</code></pre></p> <p>\u5728\u5b9e\u9645\u8fd0\u7528\u4e2d\uff0c\u5e94\u5728 C \u4e2d\u5982\u6b64\u8c03\u7528\uff1a<code>farjmp(eip, cs)</code>\u3002<code>eip</code> \u4e3a\u4e0b\u4e00\u6b65\u6267\u884c\u54ea\u91cc\u7684\u5bc4\u5b58\u5668\uff0c\u5982\u679c\u8df3\u7684\u662f TSS\uff0c\u90a3\u5c31\u5fc5\u987b\u5199 0\uff1bcs \u4e3a\u8df3\u5165\u7684\u4ee3\u7801\u6bb5\u9009\u62e9\u5b50\uff0c\u5728\u8fd9\u91cc\u662f TSS\u3002</p> <p>\u4e3a\u4ec0\u4e48\u4e00\u5b9a\u8981\u8fd9\u6837\u5462\uff1f\u8fd9\u548c\u6211\u4eec\u4f7f\u7528\u4e86 <code>jmp far [addr]</code> \u6765\u8fdb\u884c\u8fdc\u8df3\u8f6c\u6709\u5173\u3002\u4f60\u53ea\u9700\u8981\u77e5\u9053\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c<code>[addr]</code> \u7684\u4f4d\u7f6e\u5fc5\u987b\u5199 EIP\uff0c<code>[addr + 4]</code> \u7684\u4f4d\u7f6e\u5fc5\u987b\u5199 cs\u3002</p> <p>\u8fd9\u6837\u4e00\u6765\uff0c<code>task_switch</code> \u5c31\u5341\u5206\u7b80\u5355\u4e86\u3002</p> <p>\u4ee3\u7801 12-9 \u4efb\u52a1\u5207\u6362\uff08kernel/mtask.c\uff09 <pre><code>void task_switch()\n{\n    if (taskctl-&gt;running &gt;= 2) { // \u663e\u7136\uff0c\u81f3\u5c11\u5f97\u6709\u4e24\u4e2a\u4efb\u52a1\u624d\u80fd\u5207\u6362\n        taskctl-&gt;now++; // \u4e0b\u4e00\u4e2a\u4efb\u52a1\n        if (taskctl-&gt;now == taskctl-&gt;running) { // \u5230\u7ed3\u5c3e\u4e86\n            taskctl-&gt;now = 0; // \u8f6c\u6362\u4e3a\u7b2c\u4e00\u4e2a\n        }\n        farjmp(0, taskctl-&gt;tasks[taskctl-&gt;now]-&gt;sel); // \u8df3\u5165\u4efb\u52a1\u5bf9\u5e94\u7684 TSS\n    }\n}\n</code></pre></p> <p>\u7ed3\u5408\u6ce8\u91ca\u5e94\u8be5\u4e0d\u96be\u7406\u89e3\u2026\u2026\u6211\u662f\u7b2c\u51e0\u6b21\u8bf4\u8fd9\u53e5\u8bdd\u4e86\uff1f</p> <p>\u6700\u540e\u662f <code>task_now</code>\uff0c\u8fd4\u56de\u5f53\u524d\u4efb\u52a1\uff0c\u540e\u7eed\u4f1a\u9891\u7e41\u7528\u5230\u3002</p> <p>\u4ee3\u7801 12-10 \u8fd4\u56de\u5f53\u524d\u4efb\u52a1\uff08kernel/mtask.c\uff09 <pre><code>task_t *task_now()\n{\n    return taskctl-&gt;tasks[taskctl-&gt;now];\n}\n</code></pre></p> <p>\u81f3\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u57fa\u672c\u5b8c\u6210\u4e86\u4e00\u4e2a\u53ef\u7528\u7684\u4efb\u52a1\u5904\u7406\u6846\u67b6\u3002\u4f46\u662f\u8fd8\u6709\u6700\u540e\u4e00\u4e2a\u95ee\u9898\uff1a\u8c01\u6765\u63a7\u5236\u4efb\u52a1\u5207\u6362\u7684\u8fdb\u884c\u5462\uff1f</p> <p>\u8fd8\u8bb0\u5f97\u524d\u9762\u8bf4\u7684\u8bdd\u5417\uff1f\u4efb\u52a1\u9700\u8981\u201c\u4ea4\u66ff\u8fd0\u884c\u201d\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4efb\u52a1\u5207\u6362\u9700\u8981\u4e00\u6bb5\u65f6\u95f4\u53d1\u751f\u4e00\u6b21\u3002\u6211\u4eec\u53d1\u73b0\uff0c\u65f6\u949f\u4e2d\u65ad\u521a\u597d\u53ef\u4ee5\u80dc\u4efb\uff01</p> <p>\u56e0\u6b64\uff0c\u8fdb\u5165 <code>timer.c</code>\uff0c\u5220\u9664 <code>tick</code> \u53d8\u91cf\u548c\u6240\u6709\u5bf9 <code>tick</code> \u53d8\u91cf\u7684\u64cd\u4f5c\uff0c\u4fee\u6539 <code>timer_callback</code> \u5982\u4e0b\uff1a</p> <p>\u4ee3\u7801 12-11 \u65b0\u7248\u65f6\u949f\u4e2d\u65ad\u56de\u8c03\uff08kernel/timer.c\uff09 <pre><code>#include \"mtask.h\"\n\nstatic void timer_callback(registers_t *regs)\n{\n    task_switch(); // \u6bcf\u51fa\u73b0\u4e00\u6b21\u65f6\u949f\u4e2d\u65ad\uff0c\u5207\u6362\u4e00\u6b21\u4efb\u52a1\n}\n</code></pre></p> <p>\u9996\u5148\uff0c\u8fdb\u5165\u5230 <code>main.c</code>\uff0c\u6dfb\u52a0\u4e00\u4e2a\u521b\u5efa\u5185\u6838\u4efb\u52a1\u7684\u51fd\u6570\u3002\u7531\u4e8e\u4ee3\u7801\u91cf\u5927\u4e14\uff08\u5c06\u4f1a\uff09\u9891\u7e41\u7528\u5230\uff0c\u505a\u4e00\u4e2a\u5c0f\u5c0f\u7684\u5c01\u88c5\u3002</p> <p>\u4ee3\u7801 12-12 \u521b\u5efa\u5185\u6838\u4efb\u52a1\uff08kernel/main.c\uff09 <pre><code>#include \"mtask.h\"\n\ntask_t *create_kernel_task(void *entry)\n{\n    task_t *new_task;\n    new_task = task_alloc();\n    new_task-&gt;tss.esp = (uint32_t) kmalloc(64 * 1024) + 64 * 1024 - 4;\n    new_task-&gt;tss.eip = (int) entry;\n    new_task-&gt;tss.es = new_task-&gt;tss.ss = new_task-&gt;tss.ds = new_task-&gt;tss.fs = new_task-&gt;tss.gs = 2 * 8;\n    new_task-&gt;tss.cs = 1 * 8;\n    return new_task;\n}\n</code></pre></p> <p>\u7136\u540e\u662f\u65b0\u4efb\u52a1\u7684\u4e3b\u4f53 <code>task_b_main</code>\uff0c\u76ee\u524d\u5b83\u8fd8\u6ca1\u5565\u5927\u4f5c\u7528\u3002</p> <p>\u4ee3\u7801 12-13 \u65b0\u4efb\u52a1\u4e3b\u4f53 <code>task_b_main</code>\uff08kernel/main.c\uff09 <pre><code>void task_b_main()\n{\n    while (1) monitor_put('B'); // \u91cd\u590d\u6253\u5370B\n}\n</code></pre></p> <p>\u6700\u540e\u662f\u65b0\u7248 <code>kernel_main</code>\uff1a</p> <p>\u4ee3\u7801 12-14 \u6700\u65b0\u5185\u6838\u4e3b\u51fd\u6570\uff08kernel/main.c\uff09 <pre><code>void kernel_main() // kernel.asm\u4f1a\u8df3\u8f6c\u5230\u8fd9\u91cc\n{\n    monitor_clear(); // \u5148\u6e05\u5c4f\n    init_gdtidt();\n    init_memory();\n    init_timer(100);\n    asm(\"sti\");\n\n    task_t *task_a = task_init();\n    task_t *task_b = create_kernel_task(task_b_main);\n    task_run(task_b);\n\n    // \u6b64\u65f6kernel_main\u5df2\u7ecf\u6210\u4e3atask_a\u7684\u4e00\u90e8\u5206\n    while (1) monitor_put('A');\n}\n</code></pre></p> <p>\u9996\u5148\u6211\u4eec\u5c06\u65f6\u949f\u4e2d\u65ad\u53d1\u751f\u9891\u7387\u6539\u4e3a\u6bcf0.1s\u53d1\u751f\u4e00\u6b21\uff0c\u7136\u540e\u662f\u521b\u5efa\u3001\u8fd0\u884c\u4efb\u52a1\u7684\u4ee3\u7801\uff0c\u5e94\u8be5\u4e0d\u96be\u7406\u89e3\u3002</p> <p>\u5728 <code>include/gdtidt.h</code> \u4e2d\u52a0\u5165\u4e00\u884c\u58f0\u660e\uff1a</p> <p>\u4ee3\u7801 12-15 \u58f0\u660e\uff08include/gdtidt.h\uff09 <pre><code>void gdt_set_gate(int32_t num, uint32_t base, uint32_t limit, uint16_t ar);\n</code></pre></p> <p><code>mtask.h</code> \u4e5f\u8981\u52a0\u5165\u58f0\u660e\uff0c\u5168\u6587\u5982\u4e0b\uff1a</p> <p>\u4ee3\u7801 12-16 include/mtask.h <pre><code>#ifndef _MTASK_H_\n#define _MTASK_H_\n\n#include \"common.h\"\n\ntypedef struct TSS32 {\n    uint32_t backlink, esp0, ss0, esp1, ss1, esp2, ss2, cr3;\n    uint32_t eip, eflags, eax, ecx, edx, ebx, esp, ebp, esi, edi;\n    uint32_t es, cs, ss, ds, fs, gs;\n    uint32_t ldtr, iomap;\n} tss32_t;\n\ntypedef struct TASK {\n    uint32_t sel;\n    int32_t flags;\n    tss32_t tss;\n} task_t;\n\n#define MAX_TASKS 1000\n#define TASK_GDT0 3\n\ntypedef struct TASKCTL {\n    int running, now;\n    task_t *tasks[MAX_TASKS];\n    task_t tasks0[MAX_TASKS];\n} taskctl_t;\n\ntask_t *task_init();\ntask_t *task_alloc();\nvoid task_run(task_t *task);\nvoid task_switch();\ntask_t *task_now();\n\n#endif\n</code></pre></p> <p>\u5728\u6240\u6709\u58f0\u660e\u6dfb\u52a0\u5b8c\u6210\u540e\uff0c\u7f16\u8bd1\u8fd0\u884c\uff0c\u6548\u679c\u5982\u56fe\u6240\u793a\uff1a </p> <p>\uff08\u56fe 12-1 \u8fd0\u884c\u6210\u529f\uff09</p> <p>\u6211\u4eec\u770b\u5230\u4e86\u4ea4\u9519\u7684 <code>A</code> \u548c <code>B</code>\uff0c\u8fd9\u662f\u4e2a\u597d\u73b0\u8c61\u3002\u90a3\u4e48\u6211\u4eec\u7684\u591a\u4efb\u52a1\u5230\u6b64\u7ed3\u675f\u2026\u2026</p> <p>\u2026\u2026\u90a3\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u6211\u4eec\u8fd8\u6709\u4e00\u4e9b\u5185\u5bb9\u6ca1\u6709\u5b8c\u6210\u3002\u6211\u4eec\u8fd8\u8981\u5b9e\u73b0 Linux \u4e2d <code>exit</code> \u548c <code>waitpid</code> \u7684\u529f\u80fd\u3002\u8fd9\u4e00\u90e8\u5206\u5730\u57fa\u6253\u597d\u4e86\uff0c\u6211\u4eec\u540e\u9762\u7684\u5e94\u7528\u7a0b\u5e8f\u624d\u80fd\u66f4\u597d\u5730\u8fd0\u884c\u8d77\u6765\u3002</p> <p>\u90a3\u4e48\uff0c\u6211\u4eec\u518d\u6b21\u5f00\u59cb\u3002\u9996\u5148\uff0c<code>exit</code> \u662f\u6709\u8fd4\u56de\u503c\u7684\uff0c\u6211\u4eec\u9700\u8981\u5728\u67d0\u4e00\u4e2a\u5730\u65b9\u5b58\u4e00\u4e0b\u8fd4\u56de\u503c\u3002\u601d\u6765\u60f3\u53bb\uff0c\u6700\u5408\u9002\u7684\u5730\u65b9\u8fd8\u662f\u5728 <code>TASK</code> \u7ed3\u6784\u4f53\u4e2d\uff0c\u5728 <code>mtask.h</code> \u4e2d\u6dfb\u52a0\u8fd9\u6837\u4e00\u4e2a\u5b9a\u4e49\uff1a</p> <p>\u4ee3\u7801 12-17 \u65b0\u58f0\u660e\uff08include/mtask.h\uff09 <pre><code>typedef struct exit_retval {\n    int pid, val;\n} exit_retval_t;\n\ntypedef struct TASK {\n    uint32_t sel;\n    int32_t flags;\n    exit_retval_t my_retval;\n    tss32_t tss;\n} task_t;\n</code></pre></p> <p>\u5220\u53bb\u539f\u672c\u7684 <code>TASK</code> \u5b9a\u4e49\uff0c\u66ff\u6362\u4e3a\u4e0a\u9762\u8fd9\u4e00\u6bb5\u3002\u7531\u4e8e <code>exit</code> \u7684\u8fd4\u56de\u503c\u53ef\u4ee5\u662f\u4efb\u4f55\u4e00\u4e2a\u4e1c\u897f\uff0c\u56e0\u6b64\u7279\u610f\u6dfb\u52a0\u4e86\u4e00\u4e2a <code>pid</code> \u53d8\u91cf\uff0c\u7528\u6765\u786e\u8ba4\u662f\u5426\u9000\u51fa\u3002\u5f53\u7136\u8fd9\u4e2a\u53d8\u91cf\u53ef\u4ee5\u6362\u6210\u968f\u4fbf\u4e00\u4e2a\u4e1c\u897f\uff0c\u8fd9\u91cc\u7528 <code>pid</code> \u53ea\u662f\u4e00\u79cd\u7528\u6cd5\u3002</p> <p>\u90a3\u4e48\uff0c\u4e00\u4e2a\u4efb\u52a1\u7684 <code>pid</code> \u662f\u4ec0\u4e48\u5462\uff1f<code>pid</code> \u81ea\u7136\u662f\u4e00\u4e2a <code>id</code>\uff0c\u662f\u4e00\u4e2a\u4efb\u52a1\u7684\u53e6\u4e00\u4e2a\u8eab\u4efd\u8bc1\u3002\u4e00\u822c\u800c\u8a00\uff0c\u5b83\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u6570\uff0c\u8868\u793a\u5b83\u5728\u4e00\u4e2a\u4efb\u52a1\u6570\u7ec4\u6216\u8005\u4ec0\u4e48\u5730\u65b9\u7684\u7d22\u5f15\u3002</p> <p>\u5728\u8fd9\u91cc\uff0c\u7531\u4e8e\u6211\u4eec\u7684\u5168\u5c40\u6570\u7ec4\u662f <code>taskctl-&gt;tasks0</code>\uff0c\u56e0\u6b64\uff0c\u4e00\u4e2a\u4efb\u52a1\u7684 <code>pid</code> \u5c31\u662f\u5b83\u5728 <code>tasks0</code> \u4e2d\u7684\u7d22\u5f15\u3002\u770b\u8d77\u6765\u4ece\u4e00\u4e2a\u4efb\u52a1\u627e <code>pid</code> \u662f\u4e00\u4e2a O(n) \u7684\u64cd\u4f5c\uff0c\u4f46\u662f\u6ce8\u610f <code>task_init</code> \u4e2d\u7684\u8fd9\u884c\u4ee3\u7801\uff1a</p> <pre><code>        taskctl-&gt;tasks0[i].sel = (TASK_GDT0 + i) * 8;\n</code></pre> <p>\u5012\u63a8\u56de\u53bb\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\uff1a\u4e00\u4e2a\u4efb\u52a1\u5bf9\u5e94\u7684 <code>pid</code> \u4e3a <code>task-&gt;sel / 8 - TASK_GDT0</code>\u3002\u8fd9\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u7ed3\u8bba\uff0c\u6211\u4eec\u628a\u5b83\u5199\u6210\u5355\u72ec\u7684\u51fd\u6570 <code>task_pid</code>\uff1a</p> <p>\u4ee3\u7801 12-18 \u4ece\u4efb\u52a1\u627e <code>pid</code>\uff08kernel/mtask.c\uff09 <pre><code>int task_pid(task_t *task)\n{\n    return task-&gt;sel / 8 - TASK_GDT0;\n}\n</code></pre></p> <p>\u4e0b\u9762\u5c31\u662f\u6b63\u5f0f\u7684 <code>exit</code> \u4ee3\u7801\u4e86\u3002<code>exit</code> \u5fc5\u7136\u610f\u5473\u7740\u4e00\u4e2a\u4efb\u52a1\u6267\u884c\u7684\u7ec8\u6b62\uff0c\u8fd9\u4e5f\u5c31\u610f\u5473\u7740\u5b83\u5c06\u4f1a\u88ab\u4ece <code>tasks</code> \u5220\u9664\uff0c\u5982\u679c\u6b63\u5728\u6267\u884c\u8fd9\u4e2a\u4efb\u52a1\uff0c\u90a3\u4e48\u8fd8\u8981\u8fdb\u884c\u5207\u6362\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5148\u5355\u72ec\u5199\u4e00\u4e2a \u5220\u9664\u4efb\u52a1\u7684\u51fd\u6570 <code>task_remove</code>\uff1a</p> <p>\u4ee3\u7801 12-19 \u4ece <code>tasks</code> \u4e2d\u5220\u9664\u4efb\u52a1\uff08kernel/mtask.c\uff09 <pre><code>void task_remove(task_t *task)\n{\n    bool need_switch = false; // \u662f\u5426\u8981\u8fdb\u884c\u5207\u6362\uff1f\n    int i;\n    if (task-&gt;flags == 2) { // \u6b64\u4efb\u52a1\u6b63\u5728\u8fd0\u884c\uff0c\u5982\u679c\u4e0d\u8fd0\u884c\u90a3\u5c31\u6839\u672c\u4e0d\u5728tasks\u91cc\uff0c\u4ec0\u4e48\u90fd\u4e0d\u7528\u5e72\n        if (task == task_now()) { // \u662f\u5f53\u524d\u4efb\u52a1\n            need_switch = true; // \u5f85\u4f1a\u8fd8\u5f97\u6da6\n        }\n        for (i = 0; i &lt; taskctl-&gt;running; i++) {\n            if (taskctl-&gt;tasks[i] == task) break; // \u5728tasks\u4e2d\u627e\u5230\u5f53\u524d\u4efb\u52a1\n        }\n        taskctl-&gt;running--; // \u8fd0\u884c\u4efb\u52a1\u6570\u91cf\u51cf1\n        if (i &lt; taskctl-&gt;now) taskctl-&gt;now--; // \u5982\u679cnow\u5728\u8fd9\u4e2a\u4efb\u52a1\u7684\u540e\u9762\uff0c\u90a3now\u4e5f\u8981\u524d\u79fb\u4e00\u4e2a\uff08\u56e0\u4e3a\u8fd9\u4e2a\u4efb\u52a1\u8981\u5220\u4e86\uff0c\u540e\u9762\u7684\u8981\u586b\u4e0a\u6765\uff0c\u4f1a\u6574\u4f53\u524d\u79fb\u4e00\u4e2a\uff09\n        for (; i &lt; taskctl-&gt;running; i++) {\n            taskctl-&gt;tasks[i] = taskctl-&gt;tasks[i + 1]; // \u6574\u4f53\u524d\u79fb\uff0c\u4e0d\u5fc5\u591a\u8bf4\n        }\n        if (need_switch) { // \u9700\u8981\u5207\u6362\n            if (taskctl-&gt;now &gt;= taskctl-&gt;running) {\n                taskctl-&gt;now = 0; // now\u8d85\u9650\uff0c\u91cd\u7f6e\u4e3a0\n            }\n            farjmp(0, task_now()-&gt;sel); // \u8df3\u5165\u5230\u73b0\u5728\u7684\u5f53\u524d\u4efb\u52a1\u4e2d\n        }\n    }\n}\n</code></pre></p> <p><code>task_remove</code> \u6bd4\u8f83\u957f\uff0c\u56e0\u6b64\u7ed9\u4e86\u8be6\u5c3d\u7684\u6ce8\u91ca\u3002\u57fa\u672c\u4e0a\u5c31\u662f\u4e00\u5806\u5584\u540e\u5de5\u4f5c\u9700\u8981\u505a\uff0c\u6838\u5fc3\u90e8\u5206\u53ea\u6709\u4e2d\u95f4\u7684\u4e09\u884c\u6574\u4f53\u524d\u79fb\u3002</p> <p>\u4e3a\u4ec0\u4e48\u6dfb\u52a0\u4e86\u4e00\u4e2a <code>need_switch</code> \u7684\u53d8\u91cf\u5462\uff1f\u56e0\u4e3a\u5982\u679c\u5728\u6700\u4e0a\u9762\u7684 <code>if</code> \u90a3\u5c31\u5207\u6362\uff0c\u90a3\u4e0b\u9762\u7684\u6574\u4f53\u524d\u79fb\u5c31\u6839\u672c\u6267\u884c\u4e0d\u5230\uff0c\u8fd9\u6837\u5c31\u6ca1\u6709\u5220\u9664\u7684\u4f5c\u7528\u4e86\u3002</p> <p>\u6709\u4e86 <code>task_remove</code>\uff0c<code>task_exit</code> \u5c31\u975e\u5e38\u7b80\u5355\u4e86\uff1a</p> <p>\u4ee3\u7801 12-20 \u4efb\u52a1\u81ea\u52a8\u9000\u51fa\uff08kernel/mtask.c\uff09 <pre><code>void task_exit(int value)\n{\n    task_t *cur = task_now(); // \u5f53\u524d\u4efb\u52a1\n    cur-&gt;my_retval.pid = task_pid(cur); // pid\u53d8\u4e3a\u5f53\u524d\u4efb\u52a1\u7684pid\n    cur-&gt;my_retval.val = value; // val\u4e3a\u6b64\u65f6\u7684\u503c\n    task_remove(cur); // \u5220\u9664\u5f53\u524d\u4efb\u52a1\n    cur-&gt;flags = 4; // \u8fd4\u56de\u503c\u8fd8\u6ca1\u4eba\u6536\uff0c\u6682\u65f6\u8fd8\u4e0d\u80fd\u91ca\u653e\u8fd9\u4e2a\u5757\u4e3a\u53ef\u7528\uff080\uff09\n}\n</code></pre></p> <p>\u63a5\u4e0b\u6765\u662f <code>task_wait</code>\uff0c\u7b49\u5f85\u6307\u5b9a <code>pid</code> \u7684\u8fdb\u7a0b\u6267\u884c <code>exit</code> \u9000\u51fa\u3002</p> <p>\u4ee3\u7801 12-21 \u7b49\u5f85\u4efb\u52a1\u9000\u51fa\uff08kernel/mtask.c\uff09 <pre><code>int task_wait(int pid)\n{\n    task_t *task = &amp;taskctl-&gt;tasks0[pid]; // \u627e\u51fa\u5bf9\u5e94\u7684task\n    while (task-&gt;my_retval.pid == -1); // \u82e5\u6ca1\u6709\u8fd4\u56de\u503c\u5c31\u4e00\u76f4\u7b49\u7740\n    task-&gt;flags = 0; // \u91ca\u653e\u4e3a\u53ef\u7528\n    return task-&gt;my_retval.val; // \u62ff\u5230\u8fd4\u56de\u503c\n}  \n</code></pre></p> <p>\u6ce8\u610f\uff0c\u7531\u4e8e\u6b64\u5904\u662f\u5224\u65ad <code>pid</code> \u662f\u5426\u4e3a -1 \u6765\u5224\u65ad\u4efb\u52a1\u662f\u5426\u4e3a\u9000\u51fa\uff0c\u5e94\u5f53\u5728\u521d\u59cb\u5316\u4efb\u52a1\u7684\u65f6\u5019\uff08\u5373 <code>task_alloc</code> \u4e2d\uff09\u52a0\u4e0a\u5bf9 <code>pid</code> \u7684\u8bbe\u5b9a\u5982\u4e0b\uff1a</p> <p>\u4ee3\u7801 12-22 \u521d\u59cb\u5316 <code>my_retval</code>\uff08kernel/mtask.c\uff09 <pre><code>            task-&gt;tss.iomap = 0x40000000;\n            task-&gt;my_retval.pid = -1;      // \u8fd9\u91cc\u662f\u65b0\u589e\u7684\u90e8\u5206\n            task-&gt;my_retval.val = -114514; // \u8fd9\u91cc\u662f\u65b0\u589e\u7684\u90e8\u5206\n            return task;\n</code></pre></p> <p>\u8bf7\u81ea\u884c\u5728 mtask.h \u4e2d\u6dfb\u52a0 <code>task_pid</code>\u3001<code>task_exit</code> \u548c <code>task_wait</code> \u7684\u58f0\u660e\u3002</p> <p>\u63a5\u4e0b\u6765\u662f\u6d4b\u8bd5\u7528\u4f8b\uff0c\u76f4\u63a5\u628a\u5b8c\u6574\u7248 main.c \u7aef\u4e0a\u6765\uff1a</p> <p>\u4ee3\u7801 12-23 \u6d4b\u8bd5\u7528\u4f8b\uff08kernel/main.c\uff09 <pre><code>#include \"monitor.h\"\n#include \"gdtidt.h\"\n#include \"isr.h\"\n#include \"timer.h\"\n#include \"memory.h\"\n#include \"mtask.h\"\n\ntask_t *create_kernel_task(void *entry)\n{\n    task_t *new_task;\n    new_task = task_alloc();\n    new_task-&gt;tss.esp = (uint32_t) kmalloc(64 * 1024) + 64 * 1024 - 4;\n    new_task-&gt;tss.eip = (int) entry;\n    new_task-&gt;tss.es = new_task-&gt;tss.ss = new_task-&gt;tss.ds = new_task-&gt;tss.fs = new_task-&gt;tss.gs = 2 * 8;\n    new_task-&gt;tss.cs = 1 * 8;\n    return new_task;\n}\n\nvoid task_b_main()\n{\n    monitor_write(\"Waiting for task_a to dead...\\n\");\n    int retval = task_wait(0); // kernel_main\n    monitor_write(\"R.I.P. task_a, retval: \");\n    monitor_write_hex(retval);\n    monitor_write(\"\\nWaiting for 10 seconds (roughly)...\\n\");\n    for (int i = 0; i &lt; 10000000; i++) for (int j = 0; j &lt; 20; j++);\n    task_exit(114514);\n}\n\nvoid task_c_main()\n{\n    monitor_write(\"Waiting for task_b to dead...\\n\");\n    int retval = task_wait(1); // task_b\n    monitor_write(\"R.I.P. task_b, retval: \");\n    monitor_write_dec(retval);\n    monitor_write(\"\\nThey're all dead, I must live!!!\");\n    while (1);\n}\n\nvoid kernel_main() // kernel.asm\u4f1a\u8df3\u8f6c\u5230\u8fd9\u91cc\n{\n    monitor_clear();\n    init_gdtidt();\n    init_memory();\n    init_timer(100);\n    asm(\"sti\");\n\n    task_t *task_a = task_init(); // task_a: pid 0\n    task_t *task_b = create_kernel_task(task_b_main); // task_b: pid 1\n    task_t *task_c = create_kernel_task(task_c_main); // task_c: pid 2\n    task_run(task_b);\n    task_run(task_c);\n\n    monitor_write(\"Waiting for 10 seconds (roughly)...\\n\");\n    for (int i = 0; i &lt; 10000000; i++) for (int j = 0; j &lt; 20; j++);\n\n    // \u60ac\u505c\n    task_exit(0xDEADBEEF); // \u518d\u89c1\u2026\u2026\n}\n</code></pre></p> <p>\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u7b49\u5f85\u7ea6\u534a\u5206\u949f\u540e\uff0c\u6548\u679c\u5982\u4e0b\uff1a</p> <p></p> <p>\uff08\u56fe 12-2 \u6210\u529f\uff09</p> <p>\u597d\u4e86\uff0c\u591a\u4efb\u52a1\u5230\u6b64\u4e3a\u6b62\u5df2\u7ecf\u53ef\u4ee5\u7ed3\u675f\u4e86\u3002\u4e0b\u9762\u6211\u4eec\u6765\u52a0\u901f\u51b2\u523a\uff0c\u8fdb\u5165\u5230\u4eba\u673a\u4ea4\u4e92\u7684\u7b2c\u4e00\u4e2a\u91cc\u7a0b\u7891\u2014\u2014\u952e\u76d8\u9a71\u52a8\u3002</p>"},{"location":"os-tutorial/old/13-kbd-part0/","title":"13 \u7ec8\u4e8e\u53ef\u4ee5\u6253\u5b57\u4e86\u2014\u2014\u952e\u76d8\u9a71\u52a8\uff08\u4e0a\uff09","text":"<p>\u5982\u679c\u6ca1\u6709\u952e\u76d8\uff0c\u8fd9\u7bc7\u6587\u7ae0\u5927\u6982\u662f\u5199\u4e0d\u51fa\u6765\u7684\uff0c\u7531\u6b64\u5c31\u53ef\u4ee5\u770b\u51fa\u952e\u76d8\u5bf9\u4e8e\u4eba\u673a\u4ea4\u4e92\u7684\u91cd\u8981\u5f71\u54cd\u3002</p> <p>\u9996\u5148\u662f\u4e00\u4e2a\u597d\u6d88\u606f\uff0c\u952e\u76d8\u5728 PIC \u91cc\u662f\u6709\u5916\u8bbe\u7f16\u53f7\u7684\uff08\u5e0c\u671b\u5927\u5bb6\u8fd8\u8bb0\u5f97 PIC\uff0c\u5426\u5219\u5efa\u8bae\u590d\u4e60\u7b2c10\u8282\uff09\uff0c\u6309\u6211\u4eec\u7684\u8bbe\u5b9a\uff0c\u7f16\u53f7\u4e3a 33\u3002\u5e76\u4e0d\u662f\u6240\u6709\u7684\u5916\u8bbe\u90fd\u5728 PIC \u91cc\u81ea\u5e26\u7f16\u53f7\uff0c\u50cf\u7f51\u5361\u554a\u3001\u58f0\u5361\u8fd9\u4e9b\uff0c\u90fd\u662f\u6ca1\u6709\u81ea\u5e26\u7f16\u53f7\u7684\u3002</p> <p>\u90a3\u4e48\u65e2\u7136\u5982\u6b64\uff0c\u65b0\u5efa <code>drivers/keyboard.c</code>\uff0c\u6211\u4eec\u6765\u5199\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u952e\u76d8\u9a71\u52a8\uff1a</p> <p>\u4ee3\u7801 13-1 \u6700\u7b80\u5355\u7684\u952e\u76d8\u9a71\u52a8\uff08drivers/keyboard.c\uff09 <pre><code>#include \"isr.h\"\n#include \"keyboard.h\"\n\nvoid keyboard_handler(registers_t *regs)\n{\n    monitor_write(\"*\");\n}\n\nvoid init_keyboard()\n{\n    register_interrupt_handler(IRQ1, keyboard_handler);\n}\n</code></pre></p> <p>\u4ee3\u7801 13-2 \u58f0\u660e\uff08include/keyboard.h\uff09 <pre><code>#ifndef _KEYBOARD_H_\n#define _KEYBOARD_H_\n\nvoid init_keyboard();\n\n#endif\n</code></pre></p> <p>\u6dfb\u52a0\u4e86\u65b0\u76ee\u5f55\uff0c\u7167\u4f8b\u653e\u4e00\u4e0b Makefile\uff1a</p> <p>\u4ee3\u7801 13-3 \u5982\u4eca\u7684 Makefile\uff08Makefile\uff09 <pre><code>OBJS = out/kernel.o out/common.o out/monitor.o out/main.o out/gdtidt.o out/nasmfunc.o out/isr.o out/interrupt.o \\\n     out/string.o out/timer.o out/memory.o out/mtask.o out/keyboard.o\n\nout/%.o : kernel/%.c\n    i686-elf-gcc -c -I include -O0 -fno-builtin -fno-stack-protector -o out/$*.o kernel/$*.c\n\nout/%.o : kernel/%.asm\n    nasm -f elf -o out/$*.o kernel/$*.asm\n\nout/%.o : lib/%.c\n    i686-elf-gcc -c -I include -O0 -fno-builtin -fno-stack-protector -o out/$*.o lib/$*.c\n\nout/%.o : lib/%.asm\n    nasm -f elf -o out/$*.o lib/$*.asm\n\nout/%.o : drivers/%.c\n    i686-elf-gcc -c -I include -O0 -fno-builtin -fno-stack-protector -o out/$*.o drivers/$*.c\n\nout/%.o : drivers/%.asm\n    nasm -f elf -o out/$*.o drivers/$*.asm\n\nout/%.bin : boot/%.asm\n    nasm -I boot/include -o out/$*.bin boot/$*.asm\n\nout/kernel.bin : $(OBJS)\n    i686-elf-ld -s -Ttext 0x100000 -o out/kernel.bin $(OBJS)\n\na.img : out/boot.bin out/loader.bin out/kernel.bin\n    dd if=out/boot.bin of=a.img bs=512 count=1\n    edimg imgin:a.img copy from:out/loader.bin to:@: copy from:out/kernel.bin to:@: imgout:a.img\n\nrun : a.img\n    qemu-system-i386 -fda a.img\n</code></pre></p> <p>\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u6548\u679c\u5982\u4e0b\u4e24\u56fe\uff1a </p> <p>\uff08\u56fe 13-1 \u6309\u4e0b\u7b2c\u4e00\u4e2a\u6309\u952e\u524d\uff09</p> <p></p> <p>\uff08\u56fe 13-2 \u6309\u4e0b\u7b2c\u4e00\u4e2a\u6309\u952e\u540e\uff09</p> <p>\u6309\u4e0b\u7b2c\u4e00\u4e2a\u6309\u952e\u540e\uff0c\u51fa\u73b0\u4e86\u4e00\u4e2a <code>*</code>\uff0c\u8fd9\u662f\u975e\u5e38\u597d\u7684\u73b0\u8c61\u3002\u4f46\u662f\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u540e\u7eed\u65e0\u8bba\u518d\u600e\u4e48\u6309\u952e\uff0c\u90fd\u5b8c\u5168\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\uff0c\u5c4f\u5e55\u4e0a\u4e0d\u518d\u6709\u65b0\u7684\u661f\u53f7\u51fa\u73b0\u3002</p> <p>\u8fd9\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f\u67e5\u9605\u8d44\u6599\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u662f\u952e\u76d8\u63a7\u5236\u5668\uff088042\u30018048\uff09\u5e72\u7684\u597d\u4e8b\u3002\u5f53\u6309\u952e\u88ab\u6309\u4e0b\u65f6\uff0c\u952e\u76d8\u5904\u7406\u5668\u5c06\u6839\u636e\u5bf9\u5e94\u7684\u952e\u4ea7\u751f\u4e00\u4e2a\u6216\u591a\u4e2a\u5bf9\u5e94\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u626b\u63cf\u7801\uff0c\u8fd9\u4e2a\u6216\u8fd9\u4e9b\u626b\u63cf\u7801\u968f\u5373\u88ab\u4f9d\u6b21\u5199\u5165\u5230\u952e\u76d8\u63a7\u5236\u5668\u81ea\u5e26\u7684\u7f13\u51b2\u533a\u4e2d\u3002\u5728\u5199\u5165\u5b8c\u540e\uff0c\u952e\u76d8\u63a7\u5236\u5668\u4f1a\u7acb\u5373\u53d1\u9001\u4e00\u4e2a\u4e2d\u65ad\u4fe1\u53f7\u3002\u7136\u800c\uff0c\u5982\u679c\u5185\u6838\u5728\u6536\u5230\u4e2d\u65ad\u540e\u4e0d\u8bfb\u51fa\u8fd9\u4e2a\u7f13\u51b2\u533a\u91cc\u7684\u626b\u63cf\u7801\uff0c\u952e\u76d8\u5c31\u4f1a\u5361\u6b7b\u3002</p> <p>\u952e\u76d8\u63a7\u5236\u5668\u7684\u7f13\u51b2\u533a\u7aef\u53e3\u53f7\u4e3a <code>0x60</code>\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7528 <code>inb(0x60)</code> \u5c31\u53ef\u4ee5\u8bfb\u51fa\u952e\u76d8\u7f13\u51b2\u533a\u4e2d\u7684\u626b\u63cf\u7801\u3002\u56e0\u6b64\uff0c\u4fee\u6539 <code>keyboard_handler</code>\uff0c\u6211\u4eec\u6765\u770b\u770b\u8bfb\u51fa\u7684\u626b\u63cf\u7801\u957f\u4ec0\u4e48\u6837\uff1a</p> <p>\u4ee3\u7801 13-4 \u65b0\u7248\u952e\u76d8\u9a71\u52a8\uff08drivers/keyboard.c\uff09 <pre><code>#include \"isr.h\"\n#include \"keyboard.h\"\n\nvoid keyboard_handler(registers_t *regs)\n{\n    monitor_write_hex(inb(0x60)); // \u6253\u5370\u8bfb\u51fa\u7684\u626b\u63cf\u7801\n}\n\nvoid init_keyboard()\n{\n    register_interrupt_handler(IRQ1, keyboard_handler);\n}\n</code></pre></p> <p>\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u7b49\u5f85\u7ea6\u534a\u5206\u949f\u540e\uff0c\u6548\u679c\u5982\u4e0b\uff1a</p> <p></p> <p>\uff08\u56fe 13-3 \u8fd0\u884c\u6548\u679c\uff09</p> <p>\u5728\u672c\u56fe\u4e2d\uff0c\u4f9d\u6b21\u6309\u4e0b\u4e86shift\u3001a\u3001a\u3001shift\u3001a\u3001lctrl\u3001lctrl\u3001alt\u3001win\u8fd9\u51e0\u4e2a\u952e\u3002\u6211\u4eec\u53d1\u73b0\uff0c\u867d\u7136\u4e00\u5171\u53ea\u6309\u4e869\u4e2a\u952e\uff0c\u4f46\u4ea7\u751f\u4e8620\u4e2a\u626b\u63cf\u7801\u3002\u8fd9\u662f\u56e0\u4e3a\uff0c\u626b\u63cf\u7801\u4e0d\u662f\u5355\u72ec\u51fa\u73b0\uff0c\u800c\u662f\u6210\u5bf9\u51fa\u73b0\u7684\uff0c\u6309\u4e0b\u65f6\u4ea7\u751f\u4e00\u7ec4\uff0c\u677e\u5f00\u65f6\u4ea7\u751f\u4e00\u7ec4\u3002</p> <p>\u90a3\u4e48\uff0c\u6211\u4eec\u600e\u4e48\u77e5\u9053\u6bcf\u4e2a\u6309\u952e\u5bf9\u5e94\u7684\u662f\u54ea\u4e2a\u626b\u63cf\u7801\u5462\uff1f\u4e00\u4e2a\u53ef\u5b9e\u8df5\u7684\u65b9\u6cd5\u662f\uff0c\u6309\u7167\u4e0a\u9762\u7684\u987a\u5e8f\u4f9d\u6b21\u5206\u522b\u6309\u4e0b\uff0c\u89c2\u5bdf\u5c4f\u5e55\u4e0a\u626b\u63cf\u7801\u7684\u53d8\u5316\u3002\u4e0d\u8fc7\uff0c\u8fd9\u5bf9\u5199\u4ee3\u7801\u89e3\u6790\u626b\u63cf\u7801\u662f\u6ca1\u6709\u5e2e\u52a9\u7684\u3002</p> <p>\u8fd8\u6709\u53e6\u5916\u4e00\u4e2a\u529e\u6cd5\uff0c\u5c31\u662f\u4f9d\u6b21\u6309\u4e0b\u952e\u76d8\u4e0a\u7684\u6bcf\u4e00\u4e2a\u952e\uff0c\u770b\u770b\u5b83\u5bf9\u5e94\u7684\u626b\u63cf\u7801\uff0c\u7136\u540e\u8bb0\u5f55\u5230\u4e00\u4e2a\u6570\u7ec4\u6216\u8005\u5176\u4ed6\u4ec0\u4e48\u5730\u65b9\u3002\u4e0d\u8fc7\uff0c\u8fd9\u6837\u505a\u5b9e\u5728\u592a\u8fc7\u8017\u65f6\uff0c\u524d\u4eba\u683d\u6811\uff0c\u540e\u4eba\u4e58\u51c9\uff0c\u6211\u4eec\u9009\u62e9\u76f4\u63a5\u628a\u8fd9\u4e2a\u6570\u7ec4\u6284\u4e0b\u6765\uff1a</p> <p>\u4ee3\u7801 13-5 \u4ece\u626b\u63cf\u7801\u5230\u6bcf\u4e00\u4e2a\u952e\u7684\u5bf9\u5e94\u5173\u7cfb\uff08drivers/keymap.c\uff09 <pre><code>#include \"keyboard.h\"\n#include \"common.h\"\n\nuint32_t keymap[NR_SCAN_CODES * MAP_COLS] = {\n    0,            0,           0,\n    ESC,          ESC,         0,\n    '1',          '!',         0,\n    '2',          '@',         0,\n    '3',          '#',         0,\n    '4',          '$',         0,\n    '5',          '%',         0,\n    '6',          '^',         0,\n    '7',          '&amp;',         0,\n    '8',          '*',         0,\n    '9',          '(',         0,\n    '0',          ')',         0,\n    '-',          '_',         0,\n    '=',          '+',         0,\n    BACKSPACE,    BACKSPACE,   0,\n    TAB,          TAB,         0,\n    'q',          'Q',         0,\n    'w',          'W',         0,\n    'e',          'E',         0,\n    'r',          'R',         0,\n    't',          'T',         0,\n    'y',          'Y',         0,\n    'u',          'U',         0,\n    'i',          'I',         0,\n    'o',          'O',         0,\n    'p',          'P',         0,\n    '[',          '{',         0,\n    ']',          '}',         0,\n    ENTER,        ENTER,       PAD_ENTER,\n    CTRL_L,       CTRL_L,      CTRL_R,\n    'a',          'A',         0,\n    's',          'S',         0,\n    'd',          'D',         0,\n    'f',          'F',         0,\n    'g',          'G',         0,\n    'h',          'H',         0,\n    'j',          'J',         0,\n    'k',          'K',         0,\n    'l',          'L',         0,\n    ';',          ':',         0,\n    '\\'',         '\"',         0,\n    '`',          '~',         0,\n    SHIFT_L,      SHIFT_L,     0,\n    '\\\\',         '|',         0,\n    'z',          'Z',         0,\n    'x',          'X',         0,\n    'c',          'C',         0,\n    'v',          'V',         0,\n    'b',          'B',         0,\n    'n',          'N',         0,\n    'm',          'M',         0,\n    ',',          '&lt;',         0,\n    '.',          '&gt;',         0,\n    '/',          '?',         PAD_SLASH,\n    SHIFT_R,      SHIFT_R,     0,\n    '*',          '*',         0,\n    ALT_L,        ALT_L,       ALT_R,\n    ' ',          ' ',         0,\n    CAPS_LOCK,    CAPS_LOCK,   0,\n    F1,           F1,          0,\n    F2,           F2,          0,\n    F3,           F3,          0,\n    F4,           F4,          0,\n    F5,           F5,          0,\n    F6,           F6,          0,\n    F7,           F7,          0,\n    F8,           F8,          0,\n    F9,           F9,          0,\n    F10,          F10,         0,\n    NUM_LOCK,     NUM_LOCK,    0,\n    SCROLL_LOCK,  SCROLL_LOCK, 0,\n    PAD_HOME,     '7',         HOME,\n    PAD_UP,       '8',         UP,\n    PAD_PAGEUP,   '9',         PAGEUP,\n    PAD_MINUS,    '-',         0,\n    PAD_LEFT,     '4',         LEFT,\n    PAD_MID,      '5',         0,\n    PAD_RIGHT,    '6',         RIGHT,\n    PAD_PLUS,     '+',         0,\n    PAD_END,      '1',         END,\n    PAD_DOWN,     '2',         DOWN,\n    PAD_PAGEDOWN, '3',         PAGEDOWN,\n    PAD_INS,      '0',         INSERT,\n    PAD_DOT,      '.',         DELETE,\n    0,            0,           0,\n    0,            0,           0,\n    0,            0,           0,\n    F11,          F11,         0,\n    F12,          F12,         0,\n    0,            0,           0,\n    0,            0,           0,\n    0,            0,           GUI_L,\n    0,            0,           GUI_R,\n    0,            0,           APPS,\n    0,            0,           0\n};\n</code></pre></p> <p><code>keymap</code> \u6570\u7ec4\u4e2d\u7684\u7b2c\u4e00\u5217\u4ee3\u8868\u6b63\u5e38\u6309\u4e0b\u5bf9\u5e94\u7684\u952e\uff0c\u7b2c\u4e8c\u5217\u4ee3\u8868\u6309 <code>shift</code> \u65f6\u5bf9\u5e94\u7684\u952e\uff0c\u7b2c\u4e09\u5217\u4ee3\u8868\u540c\u6837\u7684\u626b\u63cf\u7801\u524d\u9762\u8ddf\u7740 <code>0xE0</code> \u65f6\u5019\u5bf9\u5e94\u7684\u952e\u3002\u540e\u7eed\u7684\u89e3\u6790\u4e2d\uff0c\u8fd9\u4e00\u6bb5\u662f\u6709\u5927\u7528\u5904\u7684\u3002</p> <p>\u8fd9\u4e00\u6bb5\u6570\u7ec4\u4e2d\u51fa\u73b0\u4e86\u975e\u5e38\u591a\u7684\u5b8f\uff0c\u8bf8\u5982 <code>NR_SCAN_CODES</code>\u3001<code>MAP_COLS</code>\u3001<code>ESC</code> \u7b49\u7b49\u3002\u6570\u7ec4\u4e2d\u7684\u5b8f\u662f\u6bcf\u4e00\u4e2a\u952e\u7684\u552f\u4e00\u6807\u8bc6\uff0c\u5728\u4fdd\u8bc1\u552f\u4e00\u6027\u7684\u60c5\u51b5\u4e0b\uff0c\u8bfb\u8005\u53ef\u4ee5\u4efb\u610f\u6307\u5b9a\uff1b\u800c\u5269\u4e0b\u7684 <code>NR_SCAN_CODES</code> \u548c <code>MAP_COLS</code> \u5219\u5206\u522b\u4e3a <code>0x7f</code> \u548c <code>3</code>\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c<code>keymap</code> \u91cc\u7684\u7d22\u5f15\u662f\u6309\u4e0b\u65f6\u7684\u626b\u63cf\u7801\uff0c\u800c\u975e\u62ac\u8d77\u65f6\u7684\u626b\u63cf\u7801\uff0c\u5b9e\u9645\u7f16\u7a0b\u65f6\u9700\u8981\u7559\u610f\u4e00\u4e0b\u3002</p> <p>\u5728\u672c\u6559\u7a0b\u4e2d\u4f7f\u7528\u7684\u4e00\u4e2a <code>keyboard.h</code> \u7684\u793a\u4f8b\u5982\u4e0b\uff1a</p> <p>\u4ee3\u7801 13-6 \u5404\u79cd\u5b8f\u7684\u7edf\u4e00\u58f0\u660e\uff08include/keyboard.h\uff09 <pre><code>#ifndef _KEYBOARD_H_\n#define _KEYBOARD_H_\n\nvoid init_keyboard();\n\n#define NR_SCAN_CODES 0x80\n#define MAP_COLS      3\n\n#define FLAG_BREAK    0x0080\n#define FLAG_EXT      0x0100\n#define FLAG_SHIFT_L  0x0200\n#define FLAG_SHIFT_R  0x0400\n#define FLAG_CTRL_L   0x0800\n#define FLAG_CTRL_R   0x1000\n#define FLAG_ALT_L    0x2000\n#define FLAG_ALT_R    0x4000\n#define FLAG_PAD      0x8000\n\n#define MASK_RAW      0x1ff\n\n#define ESC           (0x01 + FLAG_EXT)\n#define TAB           (0x02 + FLAG_EXT)\n#define ENTER         (0x03 + FLAG_EXT)\n#define BACKSPACE     (0x04 + FLAG_EXT)\n\n#define GUI_L         (0x05 + FLAG_EXT)\n#define GUI_R         (0x06 + FLAG_EXT)\n#define APPS          (0x07 + FLAG_EXT)\n\n#define SHIFT_L       (0x08 + FLAG_EXT)\n#define SHIFT_R       (0x09 + FLAG_EXT)\n#define CTRL_L        (0x0A + FLAG_EXT)\n#define CTRL_R        (0x0B + FLAG_EXT)\n#define ALT_L         (0x0C + FLAG_EXT)\n#define ALT_R         (0x0D + FLAG_EXT)\n\n#define CAPS_LOCK     (0x0E + FLAG_EXT)\n#define NUM_LOCK      (0x0F + FLAG_EXT)\n#define SCROLL_LOCK   (0x10 + FLAG_EXT)\n\n#define F1            (0x11 + FLAG_EXT)\n#define F2            (0x12 + FLAG_EXT)\n#define F3            (0x13 + FLAG_EXT)\n#define F4            (0x14 + FLAG_EXT)\n#define F5            (0x15 + FLAG_EXT)\n#define F6            (0x16 + FLAG_EXT)\n#define F7            (0x17 + FLAG_EXT)\n#define F8            (0x18 + FLAG_EXT)\n#define F9            (0x19 + FLAG_EXT)\n#define F10           (0x1A + FLAG_EXT)\n#define F11           (0x1B + FLAG_EXT)\n#define F12           (0x1C + FLAG_EXT)\n\n#define PRINTSCREEN   (0x1D + FLAG_EXT)\n#define PAUSEBREAK    (0x1E + FLAG_EXT)\n#define INSERT        (0x1F + FLAG_EXT)\n#define DELETE        (0x20 + FLAG_EXT)\n#define HOME          (0x21 + FLAG_EXT)\n#define END           (0x22 + FLAG_EXT)\n#define PAGEUP        (0x23 + FLAG_EXT)\n#define PAGEDOWN      (0x24 + FLAG_EXT)\n#define UP            (0x25 + FLAG_EXT)\n#define DOWN          (0x26 + FLAG_EXT)\n#define LEFT          (0x27 + FLAG_EXT)\n#define RIGHT         (0x28 + FLAG_EXT)\n\n#define POWER         (0x29 + FLAG_EXT)\n#define SLEEP         (0x2A + FLAG_EXT)\n#define WAKE          (0x2B + FLAG_EXT)\n\n#define PAD_SLASH     (0x2C + FLAG_EXT)\n#define PAD_STAR      (0x2D + FLAG_EXT)\n#define PAD_MINUS     (0x2E + FLAG_EXT)\n#define PAD_PLUS      (0x2F + FLAG_EXT)\n#define PAD_ENTER     (0x30 + FLAG_EXT)\n#define PAD_DOT       (0x31 + FLAG_EXT)\n#define PAD_0         (0x32 + FLAG_EXT)\n#define PAD_1         (0x33 + FLAG_EXT)\n#define PAD_2         (0x34 + FLAG_EXT)\n#define PAD_3         (0x35 + FLAG_EXT)\n#define PAD_4         (0x36 + FLAG_EXT)\n#define PAD_5         (0x37 + FLAG_EXT)\n#define PAD_6         (0x38 + FLAG_EXT)\n#define PAD_7         (0x39 + FLAG_EXT)\n#define PAD_8         (0x3A + FLAG_EXT)\n#define PAD_9         (0x3B + FLAG_EXT)\n\n#define PAD_UP        PAD_8\n#define PAD_DOWN      PAD_2\n#define PAD_LEFT      PAD_4\n#define PAD_RIGHT     PAD_6\n#define PAD_HOME      PAD_7\n#define PAD_END       PAD_1\n#define PAD_PAGEUP    PAD_9\n#define PAD_PAGEDOWN  PAD_3\n#define PAD_INS       PAD_0\n#define PAD_MID       PAD_5\n#define PAD_DEL       PAD_DOT\n\n#define KB_DATA  0x60\n#define KB_CMD   0x64\n#define LED_CODE 0xED\n#define KB_ACK   0xFA\n\n#endif\n</code></pre></p> <p>\u8fd9\u91cc\u7ed9\u6240\u6709\u5728 <code>keymap</code> \u6570\u7ec4\u4e2d\u7528\u5230\u7684\u5b8f\u7edf\u4e00\u52a0\u4e86 <code>FLAG_EXT</code>\uff0c\u8fd9\u662f\u4e3a\u4e86\u540e\u671f\u5904\u7406\u65f6\u53ef\u4ee5\u5206\u8fa8\u53ef\u6253\u5370\u7684\u5b57\u7b26\u5bf9\u5e94\u7684\u952e\uff08\u5982asdf\uff09\u4e0e\u4e0d\u53ef\u6253\u5370\u7684\u5b57\u7b26\u5bf9\u5e94\u7684\u952e\uff08\u5982F11\u3001F12\uff09\u3002</p> <p>\u5728 <code>Makefile</code> \u7684 <code>OBJS</code> \u4e2d\u8ffd\u52a0\u4e00\u4e2a <code>keymap.o</code>\uff0c\u7531\u4e8e\u6211\u4eec\u5c1a\u672a\u5f00\u59cb\u89e3\u6790\u626b\u63cf\u7801\uff0c\u6240\u4ee5\u8fd9\u4e00\u90e8\u5206\u6ca1\u6709\u53d8\u5316\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u4e3a\u4e86\u5b58\u50a8\u83b7\u5f97\u5230\u7684\u626b\u63cf\u7801\uff0c\u6211\u4eec\u6765\u505a\u4e00\u4e2a\u5b58\u50a8\u626b\u63cf\u7801\u7528\u7684\u6570\u636e\u7ed3\u6784\u3002\u663e\u7136\uff0c\u5148\u6309\u4e0b\u7684\u952e\u9700\u8981\u5148\u88ab\u5904\u7406\uff0c\u6240\u4ee5\u6211\u4eec\u9009\u62e9\u505a\u4e00\u4e2a\u961f\u5217\u3002</p> <p>\u57fa\u672c\u6570\u636e\u7ed3\u6784\u76f8\u5173\u7684\u4ee3\u7801\u5c31\u4e0d\u89e3\u8bf4\u4e86\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u6ca1\u90a3\u4e48\u7ecf\u5178\u7684\u73af\u5f62\u961f\u5217\u7684\u5b9e\u73b0\uff1a</p> <p>\u4ee3\u7801 13-7 FIFO\u961f\u5217\u7684\u5b9e\u73b0\uff08lib/fifo.c\uff09 <pre><code>#include \"fifo.h\"\n\nvoid fifo_init(fifo_t *fifo, int size, uint32_t *buf)\n{\n    fifo-&gt;size = size;\n    fifo-&gt;buf = buf;\n    fifo-&gt;free = size;\n    fifo-&gt;flags = 0;\n    fifo-&gt;p = 0;\n    fifo-&gt;q = 0;\n}\n\nint fifo_put(fifo_t *fifo, uint32_t data)\n{\n    if (fifo-&gt;free == 0) {\n        fifo-&gt;flags |= FIFO_FLAGS_OVERRUN;\n        return -1;\n    }\n    fifo-&gt;buf[fifo-&gt;p] = data;\n    fifo-&gt;p++;\n    if (fifo-&gt;p == fifo-&gt;size) fifo-&gt;p = 0;\n    fifo-&gt;free--;\n    return 0;\n}\n\nint fifo_get(fifo_t *fifo)\n{\n    int data;\n    if (fifo-&gt;free == fifo-&gt;size) return -1;\n    data = fifo-&gt;buf[fifo-&gt;q];\n    fifo-&gt;q++;\n    if (fifo-&gt;q == fifo-&gt;size) fifo-&gt;q = 0;\n    fifo-&gt;free++;\n    return data;\n}\n\nint fifo_status(fifo_t *fifo)\n{\n    return fifo-&gt;size - fifo-&gt;free;\n}\n</code></pre></p> <p>\u4ee3\u7801 13-8 \u58f0\u660e\uff08include/fifo.h\uff09 <pre><code>#ifndef _FIFO_H_\n#define _FIFO_H_\n\n#include \"common.h\"\n\ntypedef struct FIFO {\n    uint32_t *buf;\n    int p, q, size, free, flags;\n} fifo_t;\n\n#define FIFO_FLAGS_OVERRUN 1\n\nvoid fifo_init(fifo_t *fifo, int size, uint32_t *buf);\nint fifo_put(fifo_t *fifo, uint32_t data);\nint fifo_get(fifo_t *fifo);\nint fifo_status(fifo_t *fifo);\n\n#endif\n</code></pre></p> <p>\u5728 <code>Makefile</code> \u7684 <code>OBJS</code> \u4e2d\u8ffd\u52a0 <code>out/fifo.o</code>\uff0c\u7f16\u8bd1\u8fd0\u884c\uff0c\u6548\u679c\u4ecd\u5e94\u4e0d\u53d8\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u961f\u5217\u6211\u4eec\u4e5f\u8fd8\u6ca1\u5f00\u59cb\u7528\u3002</p> <p>\u5177\u4f53\u5b9e\u8df5\u4e2d\u5982\u4f55\u4f7f\u7528\u8fd9\u6837\u4e00\u4e2a\u961f\u5217\u5462\uff1f\u6211\u4eec\u5148\u6765\u5230 <code>keyboard.c</code>\uff0c\u521b\u5efa\u4e00\u4e2a\u5b58\u50a8\u626b\u63cf\u7801\u7528\u7684 <code>keyfifo</code>\uff1a</p> <p>\u4ee3\u7801 13-9 \u521b\u5efa <code>keyfifo</code>\uff08drivers/keyboard.c\uff09 <pre><code>#include \"isr.h\"\n#include \"keyboard.h\"\n#include \"fifo.h\"\n\nfifo_t keyfifo;\nuint32_t keybuf[32];\nextern uint32_t keymap[];\n\nvoid keyboard_handler(registers_t *regs)\n{\n    monitor_write_hex(inb(0x60));\n}\n\nvoid init_keyboard()\n{\n    fifo_init(&amp;keyfifo, 32, keybuf);\n    register_interrupt_handler(IRQ1, keyboard_handler);\n}\n</code></pre></p> <p>\u7136\u540e\u5728 <code>keyboard_handler</code> \u4e2d\uff0c\u6211\u4eec\u5b58\u50a8\u626b\u63cf\u7801\u5230 <code>keyfifo</code>\uff1a</p> <p>\u4ee3\u7801 13-10 \u5b58\u5165\u626b\u63cf\u7801\uff08drivers/keyboard.c\uff09 <pre><code>static uint8_t get_scancode()\n{\n    uint8_t scancode;\n    asm(\"cli\");\n    scancode = fifo_get(&amp;keyfifo);\n    asm(\"sti\");\n    return scancode;\n}\n\nstatic void keyboard_read()\n{\n    if (fifo_status(&amp;keyfifo) &gt; 0) {\n        uint8_t scancode = get_scancode();\n        monitor_write_hex(scancode);\n    }\n}\n\nvoid keyboard_handler(registers_t *regs)\n{\n    fifo_put(&amp;keyfifo, inb(KB_DATA));\n    keyboard_read();\n}\n</code></pre></p> <p>\u6211\u4eec\u540c\u65f6\u8fd8\u65b0\u5efa\u4e86 <code>keyboard_read</code> \u548c <code>get_scancode</code> \u4e24\u4e2a\u51fd\u6570\uff0c\u672a\u6765\u6211\u4eec\u5bf9\u952e\u76d8\u6570\u636e\u7684\u5904\u7406\u5c06\u4e3b\u8981\u5728 <code>keyboard_read</code> \u5f53\u4e2d\u8fdb\u884c\u3002</p> <p>\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u6548\u679c\u4ecd\u5e94\u4e0d\u53d8\uff0c\u56e0\u4e3a\u6211\u4eec\u8fd8\u6ca1\u6709\u5f00\u59cb\u5904\u7406\u626b\u63cf\u7801\u3002\u4e8b\u4e0d\u8fc7\u4e09\uff0c\u6211\u4eec\u9a6c\u4e0a\u5c31\u5f00\u59cb\u5904\u7406\u5de5\u4f5c\u3002</p> <p>\u4ee3\u7801 13-11 \u521d\u6b65\u5904\u7406\u626b\u63cf\u7801\uff08drivers/keyboard.c\uff09 <pre><code>static void keyboard_read()\n{\n    uint8_t scancode;\n    int make;\n    if (fifo_status(&amp;keyfifo) &gt; 0) {\n        scancode = get_scancode();\n        if (scancode == 0xE1) {\n            // \u7279\u6b8a\u5f00\u5934\uff0c\u6682\u4e0d\u505a\u5904\u7406\n        } else if (scancode == 0xE0) {\n            // \u7279\u6b8a\u5f00\u5934\uff0c\u6682\u4e0d\u505a\u5904\u7406\n        } else {\n            make = (scancode &amp; FLAG_BREAK ? true : false);\n            if (make) {\n                char key = keymap[(scancode &amp; 0x7f) * MAP_COLS];\n                monitor_put(key);\n            }\n        }\n    }\n}\n</code></pre></p> <p><code>FLAG_BREAK</code> \u5728\u4e4b\u524d\u7684 <code>keyboard.h</code> \u4e2d\u5df2\u6709\u5b9a\u4e49\uff0c\u662f <code>0x80</code>\u3002\u591a\u542f\u52a8\u51e0\u6b21\u6309\u51e0\u4e2a\u952e\u4f1a\u53d1\u73b0\uff0c\u9664\u4e86\u4e00\u90e8\u5206\u4ea7\u751f\u591a\u4e2a\u626b\u63cf\u7801\u7684\u952e\u4ee5\u5916\uff0c\u6bcf\u6b21\u6309\u4e0b\u7684\u626b\u63cf\u7801\u6bd4\u62ac\u8d77\u7684\u626b\u63cf\u7801\u5c11 <code>0x80</code>\u3002\u56e0\u6b64\u53ea\u9700\u8981\u63a2\u6d4b <code>0x80</code> \u662f\u5426\u5b58\u5728\uff0c\u5c31\u53ef\u4ee5\u786e\u5b9a\u73b0\u5728\u7684\u8fd9\u4e2a\u952e\u662f\u88ab\u6309\u4e0b\u8fd8\u662f\u88ab\u62ac\u8d77\uff0c\u9009\u62e9\u4e00\u4e2a\u5904\u7406\u5373\u53ef\u3002</p> <p>\u8fd9\u5c31\u662f <code>else</code> \u4e2d\u7b2c\u4e00\u884c\u7684\u4f5c\u7528\uff0c\u8fd9\u91cc\u9009\u62e9\u7684\u662f\u88ab\u62ac\u8d77\u65f6\u8fdb\u884c\u5224\u65ad\u3002<code>scancode &amp; 0x7f</code> \u53ef\u4ee5\u53d6\u5f97\u5bf9\u5e94\u7684\u88ab\u6309\u4e0b\u65f6\u7684\u626b\u63cf\u7801\uff0c\u4ece\u800c\u4f5c\u4e3a <code>keymap</code> \u7684\u7d22\u5f15\u83b7\u5f97\u5bf9\u5e94\u7684\u952e\u3002</p> <p>\u597d\u4e86\uff0c\u73b0\u5728\u7f16\u8bd1\u8fd0\u884c\uff0c\u7b49\u5f85 <code>task_c</code> \u8f93\u51fa\u5b8c\u6210\u540e\uff0c\u8f93\u5165 <code>abc123</code>\uff0c\u6548\u679c\u5982\u4e0b\uff1a</p> <p></p> <p>\uff08\u56fe 13-4 \u6210\u529f\u8f93\u51fa\uff09</p> <p>\u6211\u4eec\u770b\u5230\u4e86\u540e\u9762\u7684 <code>abc123</code>\uff0c\u8bf4\u660e\u6211\u4eec\u7684\u952e\u76d8\u9a71\u52a8\u5df2\u7ecf\u521d\u6b65\u5b8c\u6210\u3002\u672c\u8282\u7684\u7bc7\u5e45\u5df2\u7ecf\u591f\u957f\u4e86\uff0c\u4e0b\u4e00\u8282\u6211\u4eec\u5c06\u7ee7\u7eed\u5199\u952e\u76d8\u9a71\u52a8\uff0c\u505a\u51fa\u4e00\u4e2a\u57fa\u672c\u7684\u5904\u7406\u6846\u67b6\u3002</p>"},{"location":"os-tutorial/old/14-kbd-part1/","title":"14 \u7ec8\u4e8e\u53ef\u4ee5\u6253\u5b57\u4e86\u2014\u2014\u952e\u76d8\u9a71\u52a8\uff08\u4e0b\uff09","text":"<p>\u6b22\u8fce\u56de\u6765\uff0c\u6211\u4eec\u7ee7\u7eed\u952e\u76d8\u9a71\u52a8\u7684\u65c5\u9014\u3002</p> <p>\u9996\u5148\uff0c\u662f\u4e09\u4e2a\u6700\u57fa\u672c\u7684\u4e1c\u897f\uff1ashift\u3001alt \u548c ctrl\u3002\u8fd9\u4e09\u4e2a\u4e1c\u897f\u6211\u4eec\u5b8c\u5168\u6ca1\u6709\u5904\u7406\uff0c\u7279\u522b\u662f shift\uff0c\u5bfc\u81f4\u6211\u4eec\u73b0\u5728\u4efb\u4f55\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\u90fd\u6253\u4e0d\u51fa\u6765\u3002</p> <p>\u4fee\u6539\u4e00\u4e0b <code>keyboard.c</code>\uff0c\u5148\u5728\u6700\u5f00\u5934\u5199\u4e0b\u8fd9\u51e0\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u8bb0\u5f55 shift\u3001alt\u3001ctrl \u7684\u72b6\u6001\uff1a</p> <p>\u4ee3\u7801 14-1 shift\u3001alt\u3001ctrl \u7684\u72b6\u6001\uff08drivers/keyboard.c\uff09 <pre><code>static int code_with_E0 = 0;\nstatic int shift_l;\nstatic int shift_r;\nstatic int alt_l;\nstatic int alt_r;\nstatic int ctrl_l;\nstatic int ctrl_r;\nstatic int caps_lock;\nstatic int num_lock;\nstatic int scroll_lock;\nstatic int column;\n</code></pre></p> <p>\u7136\u540e\u662f\u73b0\u5728\u7684 <code>keyboard_read</code>\uff1a</p> <p>\u4ee3\u7801 14-2 \u5e26 <code>shift</code> \u7684\u626b\u63cf\u7801\u89e3\u6790\uff08drivers/keyboard.c\uff09 <pre><code>static void keyboard_read()\n{\n    uint8_t scancode;\n    int make;\n    uint32_t key = 0;\n    uint32_t *keyrow;\n    if (fifo_status(&amp;keyfifo) &gt; 0) {\n        scancode = get_scancode();\n        if (scancode == 0xE1) {\n            // \u7279\u6b8a\u5f00\u5934\uff0c\u6682\u4e0d\u505a\u5904\u7406\n        } else if (scancode == 0xE0) {\n            code_with_E0 = 1;\n        } else {\n            make = scancode &amp; FLAG_BREAK ? false : true;\n            keyrow = &amp;keymap[(scancode &amp; 0x7f) * MAP_COLS];\n            column = 0;\n            if (shift_l || shift_r) {\n                column = 1;\n            }\n            if (code_with_E0) {\n                column = 2;\n                code_with_E0 = 0;\n            }\n            key = keyrow[column];\n            switch (key) {\n                case SHIFT_L:\n                    shift_l = make;\n                    key = 0;\n                    break;\n                case SHIFT_R:\n                    shift_r = make;\n                    key = 0;\n                    break;\n                case CTRL_L:\n                    ctrl_l = make;\n                    key = 0;\n                    break;\n                case CTRL_R:\n                    ctrl_r = make;\n                    key = 0;\n                    break;\n                case ALT_L:\n                    alt_l = make;\n                    key = 0;\n                    break;\n                case ALT_R:\n                    alt_r = make;\n                    key = 0;\n                    break;\n                default:\n                    if (!make) key = 0;\n                    break;\n            }\n            if (key) monitor_put(key);\n        }\n    }\n}\n</code></pre></p> <p>\u5728\u5b9e\u73b0 <code>shift</code> \u7684\u540c\u65f6\uff0c\u6211\u4eec\u8fc7\u6ee4\u4e86 <code>ctrl</code> \u548c <code>alt</code>\uff0c\u5224\u65ad\u662f\u5426\u91ca\u653e\u4e5f\u6539\u4e3a\u4e86\u5224\u65ad\u662f\u5426\u6309\u4e0b\uff0c\u540c\u65f6\u4f1a\u5728\u9002\u5f53\u7684\u65f6\u5019\u5ffd\u7565 <code>key</code> \u7684\u503c\u3002</p> <p>\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u6309\u4e0b shift \u548c\u4e0d\u6309 shift \u5206\u522b\u8f93\u5165 <code>abc123</code>\uff0c\u6548\u679c\u5982\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\uff08\u56fe 14-1 \u5b9e\u73b0 shift\uff09</p> <p>\u73b0\u5728\u7684 <code>keyboard_read</code> \u5bf9\u6309\u952e\u7684\u5904\u7406\u4ec5\u9650\u4e8e\u6253\u5370\uff0c\u4e3a\u4e86\u5339\u914d\u4ee5\u540e\u66f4\u52a0\u590d\u6742\u7684\u9700\u6c42\uff0c\u6211\u4eec\u5355\u72ec\u521b\u5efa\u4e00\u4e2a <code>in_process</code> \u7528\u6765\u5904\u7406\u4e0d\u540c\u7684\u6309\u952e\u3002</p> <p>\u628a <code>if (key) monitor_put(key)</code> \u66ff\u6362\u4e3a\uff1a</p> <p>\u4ee3\u7801 14-3 \u5bf9\u6309\u952e\u8fdb\u884c\u7f16\u7801\uff08drivers/keyboard.c\uff09 <pre><code>            if (make) {\n                key |= shift_l ? FLAG_SHIFT_L : 0;\n                key |= shift_r ? FLAG_SHIFT_R : 0;\n                key |= alt_l ? FLAG_ALT_L : 0;\n                key |= alt_r ? FLAG_ALT_R : 0;\n                key |= ctrl_l ? FLAG_CTRL_L : 0;\n                key |= ctrl_r ? FLAG_CTRL_R : 0;\n                in_process(key);\n            }\n</code></pre></p> <p>\u8fd9\u91cc\u76f8\u5f53\u4e8e\u5bf9 <code>key</code> \u8fdb\u884c\u4e86\u7f16\u7801\uff0c\u540c\u65f6\u5c06\u5f53\u65f6\u6240\u6709\u7684\u6309\u952e\u72b6\u6001\u7f16\u7801\u4e86\u8fdb\u53bb\u3002</p> <p>\u7136\u540e\u662f <code>in_process</code>\uff0c\u628a\u5b83\u653e\u5728 <code>keyboard_read</code> \u4e4b\u524d\u3002</p> <p>\u4ee3\u7801 14-4 <code>in_process</code>\uff08drivers/keyboard.c\uff09 <pre><code>static void in_process(uint32_t key)\n{\n    if (!(key &amp; FLAG_EXT)) {\n        monitor_put(key &amp; 0xFF);\n    }\n}\n</code></pre></p> <p>\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u6548\u679c\u4ecd\u5e94\u5982\u56fe 14-1\u6240\u793a\u3002</p> <p>\u4e0b\u9762\u662f\u5bf9\u56de\u8f66\u3001\u9000\u683c\u548c <code>tab</code> \u884c\u4e3a\u7684\u5355\u72ec\u5904\u7406\uff0c\u6211\u4eec\u53ea\u9700\u8981\u627e\u51fa <code>ENTER</code>\u3001 <code>BACKSPACE</code> \u4ee5\u53ca <code>TAB</code>\uff0c\u6539\u4e3a\u6253\u5370 <code>\\n</code>\u3001 <code>\\b</code> \u4ee5\u53ca <code>\\t</code>\u3002</p> <p>\u4ee3\u7801 14-5 \u56de\u8f66\u3001\u9000\u683c\u4e0e <code>TAB</code>\uff08drivers/keyboard.c\uff09 <pre><code>static void in_process(uint32_t key)\n{\n    if (!(key &amp; FLAG_EXT)) {\n        monitor_put(key &amp; 0xFF);\n    } else {\n        int raw_key = key &amp; MASK_RAW;\n        switch (raw_key) {\n            case ENTER:\n                monitor_put('\\n');\n                break;\n            case BACKSPACE:\n                monitor_put('\\b');\n                break;\n            case TAB:\n                monitor_put('\\t');\n                break;\n        }\n    }\n}\n</code></pre></p> <p>\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u5f85 <code>task_c</code> \u8f93\u51fa\u540e\u8fde\u6309\u6570\u6b21\u9000\u683c\uff0c\u6548\u679c\u5982\u4e0b\uff1a</p> <p></p> <p>\uff08\u56fe 14-2 <code>BACKSPACE</code> \u7684\u5f02\u5e38\uff09</p> <p>\u6211\u4eec\u53d1\u73b0\uff0c\u5149\u6807\u867d\u7136\u6210\u529f\u540e\u79fb\uff0c\u4f46\u5b57\u7b26\u90fd\u8fd8\u5728\u3002\u8fd9\u662f\u5728 <code>monitor_put</code> \u4e2d\u5bf9 <code>\\b</code> \u7684\u5224\u65ad\u4e2d\u5e94\u5f53\u5904\u7406\u7684\uff0c\u627e\u5230 <code>monitor_put</code> \u4e2d\u7684\u7b2c\u4e00\u4e2a\u5224\u65ad\uff0c\u6211\u4eec\u6765\u505a\u4e00\u4e2a\u4e13\u9879\u4fee\u6539\uff1a</p> <p>\u4ee3\u7801 14-6 \u5bf9\u9000\u683c\u952e\u7684\u4fee\u6539\uff08kernel/monitor.c\uff09 <pre><code>    if (c == 0x08 &amp;&amp; cursor_x) // \u9000\u683c\uff0c\u4e14\u5149\u6807\u4e0d\u5728\u67d0\u884c\u5f00\u59cb\u5904\n    {\n        cursor_x--; // \u76f4\u63a5\u628a\u5149\u6807\u5411\u540e\u79fb\u4e00\u683c\n        video_memory[cursor_y * 80 + cursor_x] = 0x20 | (attributeByte &lt;&lt; 8); // \u7a7a\u683c\n    }\n</code></pre></p> <p>\u518d\u6b21\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u5f85 <code>task_c</code> \u8f93\u51fa\u4fe1\u606f\u540e\uff0c\u6309\u82e5\u5e72\u6b21\u9000\u683c\u5e76\u6309\u4e0b <code>\\n</code>\u3001<code>\\t</code>\uff0c\u6548\u679c\u5982\u4e0b\uff1a</p> <p></p> <p>\uff08\u56fe 14-3 \u6210\u529f\u5220\u9664\u5b57\u7b26\uff09</p> <p>\u7531\u6b64\u5373\u53ef\u8bc1\u660e\uff0c\u5bf9\u8fd9\u4e09\u4e2a\u952e\u7684\u5904\u7406\u53ef\u4ee5\u6682\u544a\u4e00\u6bb5\u843d\u3002\u4e58\u80dc\u8ffd\u51fb\uff0c\u6211\u4eec\u6765\u5904\u7406\u952e\u76d8\u4e0a\u6709\u6307\u793a\u706f\u7684\u4e09\u4e2a\u952e\uff1a<code>CapsLock</code>\u3001<code>NumLock</code> \u548c <code>ScrollLock</code>\uff08\u4ec0\u4e48\uff1f<code>Fn</code>\uff1f\u8fd9\u73a9\u610f\u771f\u7684\u5728 <code>PS/2</code> \u952e\u76d8\u4e0a\uff1f\uff09\u3002</p> <p>\u5bf9\u952e\u76d8\u6307\u793a\u706f\u7684\u64cd\u63a7\u9700\u8981\u501f\u52a9\u6211\u4eec\u4e4b\u524d\u9047\u5230\u7684 <code>0x60</code> \u7aef\u53e3\uff0c\u4e5f\u8981\u501f\u52a9\u952e\u76d8\u63a7\u5236\u5668\u7684\u53e6\u4e00\u4e2a\u7aef\u53e3\u2014\u2014<code>0x64</code>\u3002</p> <p>\u5982\u4f55\u8bbe\u7f6e\u952e\u76d8\u6307\u793a\u706f\u7684\u60c5\u51b5\u5462\uff1f\u975e\u5e38\u7b80\u5355\uff0c\u5927\u81f4\u5206\u4e3a\u5982\u4e0b\u51e0\u6b65\uff1a</p> <ol> <li> <p>\u8bfb\u51fa\u63a7\u5236\u5668\u7aef\u53e3 <code>0x64</code> \u5bf9\u5e94\u7684\u6570\u636e\uff0c\u89c2\u5bdf\u5176\u4ece\u4f4e\u5f80\u9ad8\u7b2c2\u4f4d\u662f\u5426\u4e3a 0\uff0c\u82e5\u4e3a 0\uff0c\u4ee3\u8868\u5f53\u524d\u53ef\u5411 <code>0x60</code> \u7aef\u53e3\u53d1\u9001\u547d\u4ee4\uff1b</p> </li> <li> <p>\u5411 <code>0x60</code> \u7aef\u53e3\u53d1\u51fa\u547d\u4ee4 <code>0xED</code>\uff0c\u610f\u4e3a\u8bbe\u7f6e\u952e\u76d8 LED \u706f\u72b6\u6001\u3002\u952e\u76d8\u63a7\u5236\u5668\u6536\u5230\u547d\u4ee4\u540e\uff0c\u4f1a\u5728 <code>0x60</code> \u7aef\u53e3\u53d1\u9001\u4e00\u4e2a <code>0xFA</code>\uff0c\u6211\u4eec\u9700\u8981\u7b49\u5f85\u8fd9\u4e2a <code>0xFA</code> \u8fd4\u56de\u3002</p> </li> <li> <p>\u5411 <code>0x60</code> \u7aef\u53e3\u53d1\u51fa\u5e0c\u671b\u8bbe\u7f6e\u7684\u952e\u76d8 LED \u706f\u72b6\u6001\uff0c\u5b83\u5e94\u88ab\u7f16\u7801\u4e3a\u4e00\u4e2a\u5b57\u8282\uff0c\u9ad85\u4f4d\u5747\u4e3a0\uff0c\u4ece\u4f4e\u5f80\u9ad8\u6570\u7b2c1\u30012\u30013\u4f4d\u5206\u522b\u4e3a <code>ScrollLock</code>\u3001<code>NumLock</code> \u548c <code>CapsLock</code>\uff0c\u5176\u4e2d\u6bcf\u4e00\u4f4d\u7684 0 \u4e3a\u7184\u706d\uff0c1 \u4e3a\u4eae\u8d77\u3002</p> </li> <li> <p>\u952e\u76d8\u8bbe\u7f6e\u5b8c LED \u706f\u72b6\u6001\u540e\uff0c\u4f1a\u518d\u6b21\u53d1\u9001\u4e00\u4e2a <code>0xFA</code> \u9700\u8981\u6211\u4eec\u8bfb\u51fa\u3002</p> </li> </ol> <p>\u597d\u4e86\uff0c\u5728\u6211\u4eec\u524d\u9762\u8bbe\u7f6e shift\u3001ctrl \u548c alt \u72b6\u6001\u7684\u65f6\u5019\u5df2\u7ecf\u589e\u52a0\u4e86\u8fd9\u4e09\u4e2a lock \u6307\u793a\u706f\u7684\u53d8\u91cf\uff0c\u6211\u4eec\u6765\u9488\u5bf9\u4e0a\u9762\u7684\u56db\u6b65\u5206\u522b\u5199\u7a0b\u5e8f\u3002</p> <p>\u9996\u5148\uff0c\u6211\u4eec\u6765\u521b\u5efa\u4e00\u4e2a\u8bbe\u7f6e LED \u706f\u72b6\u6001\u7684\u51fd\u6570\uff0c\u5b9e\u9645\u4f7f\u7528\u65f6\u53ea\u9700\u8981\u5f80 <code>caps_lock</code>\u3001<code>num_lock</code> \u548c <code>scroll_lock</code> \u4e09\u4e2a\u53d8\u91cf\u4e2d\u5199\u6307\u793a\u706f\u72b6\u6001\u5373\u53ef\uff08\u8bf7\u628a\u5b83\u4eec\u653e\u5728 <code>get_scancode</code> \u4e4b\u524d\uff09\u3002</p> <p>\u4ee3\u7801 14-7 \u8bbe\u7f6e LED \u72b6\u6001\uff08drivers/keyboard.c\uff09 <pre><code>static void kb_wait()\n{\n    uint8_t kb_stat;\n    do {\n        kb_stat = inb(KB_CMD); // KB_CMD: 0x64\n    } while (kb_stat &amp; 0x02);\n}\n\nstatic void kb_ack()\n{\n    uint8_t kb_data;\n    do {\n        kb_data = inb(KB_DATA); // KB_DATA: 0x60\n    } while (kb_data != KB_ACK); // KB_ACK: 0xFA\n}\n\nstatic void set_leds()\n{\n    uint8_t led_status = (caps_lock &lt;&lt; 2) | (num_lock &lt;&lt; 1) | scroll_lock;\n\n    kb_wait();\n    outb(KB_DATA, LED_CODE); // LED_CODE: 0xED\n    kb_ack();\n\n    kb_wait();\n    outb(KB_DATA, led_status);\n    kb_ack();\n}\n</code></pre></p> <p>\u5176\u4e2d\u7684 <code>KB_CMD</code>\u3001<code>KB_DATA</code>\u3001<code>KB_ACK</code> \u4ee5\u53ca <code>LED_CODE</code> \u5df2\u7ecf\u5b9a\u4e49\u5728 <code>keyboard.h</code> \u4e4b\u4e2d\u4e86\u3002</p> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u5bf9 <code>init_keyboard</code> \u7565\u4f5c\u4fee\u6539\uff0c\u521d\u59cb\u5316 LED \u706f\u7684\u72b6\u6001\u3002</p> <p>\u4ee3\u7801 14-8 \u65b0\u7248 <code>init_keyboard</code>\uff08drivers/keyboard.c\uff09 <pre><code>void init_keyboard()\n{\n    fifo_init(&amp;keyfifo, 32, keybuf);\n\n    shift_l = shift_r = 0;\n    alt_l = alt_r = 0;\n    ctrl_l = ctrl_r = 0;\n\n    caps_lock = 0;\n    num_lock = 1;\n    scroll_lock = 0;\n    set_leds();\n\n    register_interrupt_handler(IRQ1, keyboard_handler);\n}\n</code></pre></p> <p>\u4e4b\u6240\u4ee5\u8bbe\u7f6e <code>num_lock</code> \u4e3a 1\uff0c\u662f\u56e0\u4e3a\u5c0f\u952e\u76d8\u7684\u6570\u5b57\u529f\u80fd\u4e00\u822c\u6bd4\u65b9\u5411\u529f\u80fd\u5e38\u7528\u3002\u4e0d\u8fc7\uff0c\u8bbe\u7f6e\u4e86\u4e5f\u8fd8\u6ca1\u6709\u7528\uff0c\u6211\u4eec\u7d27\u63a5\u7740\u5bf9 <code>caps_lock</code> \u548c <code>num_lock</code> \u7684\u72b6\u6001\u4f5c\u51fa\u5224\u65ad\u3002</p> <p>\u6211\u4eec\u9996\u5148\u6dfb\u52a0\u5f53\u6309\u4e0b\u8fd9\u4e09\u4e2a\u952e\u65f6\u66f4\u6539\u72b6\u6001\u548c LED \u706f\u72b6\u6001\u7684\u5904\u7406\uff0c\u7136\u540e\u662f\u6dfb\u52a0\u4e86 CapsLock \u6309\u4e0b\u65f6\u7684\u5b9e\u9645\u529f\u80fd\u3002</p> <p>\u4ee3\u7801 14-9 LED \u706f\u72b6\u6001\u7684\u53d8\u6362\u4ee5\u53ca CapsLock \u7684\u5b9e\u9645\u529f\u80fd\uff08drivers/keyboard.c\uff09 <pre><code>static void keyboard_read()\n{\n    uint8_t scancode;\n    int make;\n    uint32_t key = 0;\n    uint32_t *keyrow;\n    if (fifo_status(&amp;keyfifo) &gt; 0) {\n        scancode = get_scancode();\n        if (scancode == 0xE1) {\n            // \u7279\u6b8a\u5f00\u5934\uff0c\u6682\u4e0d\u505a\u5904\u7406\n        } else if (scancode == 0xE0) {\n            code_with_E0 = 1;\n        } else {\n            make = scancode &amp; FLAG_BREAK ? false : true;\n            keyrow = &amp;keymap[(scancode &amp; 0x7f) * MAP_COLS];\n            column = 0;\n\n            int caps = shift_l || shift_r;\n            if (caps_lock) {\n                if ((keyrow[0] &gt;= 'a') &amp;&amp; (keyrow[0] &lt;= 'z')) caps = !caps;\n            }\n            if (caps) {\n                column = 1;\n            }\n            if (code_with_E0) {\n                column = 2;\n                code_with_E0 = 0;\n            }\n            key = keyrow[column];\n            switch (key) {\n                case SHIFT_L:\n                    shift_l = make;\n                    break;\n                case SHIFT_R:\n                    shift_r = make;\n                    break;\n                case CTRL_L:\n                    ctrl_l = make;\n                    break;\n                case CTRL_R:\n                    ctrl_r = make;\n                    break;\n                case ALT_L:\n                    alt_l = make;\n                    break;\n                case ALT_R:\n                    alt_r = make;\n                    break;\n                case CAPS_LOCK:\n                    if (make) {\n                        caps_lock = !caps_lock;\n                        set_leds();\n                    }\n                    break;\n                case NUM_LOCK:\n                    if (make) {\n                        num_lock = !num_lock;\n                        set_leds();\n                    }\n                    break;\n                case SCROLL_LOCK:\n                    if (make) {\n                        scroll_lock = !scroll_lock;\n                        set_leds();\n                    }\n                    break;\n                default:\n                    break;\n            }\n            if (make) {\n                key |= shift_l ? FLAG_SHIFT_L : 0;\n                key |= shift_r ? FLAG_SHIFT_R : 0;\n                key |= alt_l ? FLAG_ALT_L : 0;\n                key |= alt_r ? FLAG_ALT_R : 0;\n                key |= ctrl_l ? FLAG_CTRL_L : 0;\n                key |= ctrl_r ? FLAG_CTRL_R : 0;\n                in_process(key);\n            }\n        }\n    }\n}\n</code></pre></p> <p>\u8fd9\u91cc\u5b9e\u9645\u7684\u4ee3\u7801\u589e\u52a0\u7684\u4e0d\u591a\uff0c\u4e3b\u8981\u662f\u5927\u7684 <code>switch-case</code> \u589e\u52a0\u4e86\u51e0\u4e2a lock \u952e\uff0c\u4ee5\u53ca <code>code_with_E0</code> \u4e0a\u9762\u51e0\u884c\u5bf9 <code>caps_lock</code> \u72b6\u6001\u7684\u5904\u7406\u3002</p> <p>\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u7b49\u5f85 <code>task_c</code> \u8f93\u51fa\u5b8c\u6210\u540e\uff0c\u4f9d\u6b21\u6309\u4e0b\uff1a</p> <p>ENTER\u3001CapsLock\u3001a\u3001b\u3001c\u30011\u30012\u30013\u3001CapsLock\u3001a\u3001b\u3001c\u30011\u30012\u30013\u3001CapsLock\u3001Shift+A\u3001A\uff0c</p> <p>\u6548\u679c\u5982\u4e0b\uff1a</p> <p></p> <p>\uff08\u56fe 14-4 CapsLock \u7684\u5b9e\u9645\u6548\u679c\uff09</p> <p>\u6700\u540e\uff0c\u662f\u5bf9 NumLock \u7684\u5904\u7406\uff0c\u8bf7\u7528\u4e0b\u9762\u8fd9\u4e00\u957f\u4e32\u66ff\u6362\u6389 <code>keyboard_read</code> \u4e2d <code>if (make)</code> \u7684\u5206\u652f\uff1a</p> <p>\u4ee3\u7801 14-10 NumLock\uff08drivers/keyboard.c\uff09 <pre><code>            if (make) {\n                int pad = 0;\n\n                if ((key &gt;= PAD_SLASH) &amp;&amp; (key &lt;= PAD_9)) {\n                    pad = 1;\n                    switch (key) {\n                        case PAD_SLASH:\n                            key = '/';\n                            break;\n                        case PAD_STAR:\n                            key = '*';\n                            break;\n                        case PAD_MINUS:\n                            key = '-';\n                            break;\n                        case PAD_PLUS:\n                            key = '+';\n                            break;\n                        case PAD_ENTER:\n                            key = ENTER;\n                            break;\n                        default:\n                            if (num_lock &amp;&amp; (key &gt;= PAD_0) &amp;&amp; (key &lt;= PAD_9)) {\n                                key = key - PAD_0 + '0';\n                            } else if (num_lock &amp;&amp; (key == PAD_DOT)) {\n                                key = '.';\n                            } else {\n                                switch (key) {\n                                    case PAD_HOME:\n                                        key = HOME;\n                                        break;\n                                    case PAD_END:\n                                        key = END;\n                                        break;\n                                    case PAD_PAGEUP:\n                                        key = PAGEUP;\n                                        break;\n                                    case PAD_PAGEDOWN:\n                                        key = PAD_PAGEDOWN;\n                                        break;\n                                    case PAD_INS:\n                                        key = INSERT;\n                                        break;\n                                    case PAD_UP:\n                                        key = UP;\n                                        break;\n                                    case PAD_DOWN:\n                                        key = DOWN;\n                                        break;\n                                    case PAD_LEFT:\n                                        key = LEFT;\n                                        break;\n                                    case PAD_RIGHT:\n                                        key = RIGHT;\n                                        break;\n                                    case PAD_DOT:\n                                        key = DELETE;\n                                        break;\n                                    default:\n                                        break;\n                                }\n                            }\n                            break;\n                    }\n                }\n                key |= shift_l ? FLAG_SHIFT_L : 0;\n                key |= shift_r ? FLAG_SHIFT_R : 0;\n                key |= ctrl_l  ? FLAG_CTRL_L  : 0;\n                key |= ctrl_r  ? FLAG_CTRL_R  : 0;\n                key |= alt_l   ? FLAG_ALT_L   : 0;\n                key |= alt_r   ? FLAG_ALT_R   : 0;\n                key |= pad     ? FLAG_PAD     : 0;\n\n                in_process(key);\n            }\n</code></pre></p> <p>\u8fd9\u4e00\u90e8\u5206\u7684\u7b97\u6cd5\u5176\u5b9e\u4ecd\u65e7\u662f\u7b80\u5355\u7684\u679a\u4e3e\u3002\u679a\u4e3e\u6bcf\u4e00\u4e2a\u952e\uff0c\u770b\u5b83\u662f\u4e0d\u662f\u5728\u5c0f\u952e\u76d8\u4e0a\uff0c\u6709\u7684\u952e\u4e0d\u53d7 NumLock \u63a7\u5236\uff0c\u56e0\u6b64\u53ef\u4ee5\u4e0d\u7ba1\uff1b\u6709\u7684\u952e\u53d7 NumLock \u63a7\u5236\uff0c\u6240\u4ee5\u6839\u636e NumLock \u662f\u5426\u4eae\u8d77\u5224\u65ad\u5230\u5e95\u662f\u539f\u672c\u7684\u952e\u8fd8\u662f\u8981\u8f6c\u6362\u4e00\u4e0b\u3002</p> <p>\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u4f9d\u6b21\u6309\u4e0b\u5c0f\u952e\u76d8\u4e0a\u7684\uff1a</p> <p>Enter\u30017\u30018\u30019\u30014\u30015\u30016\u30011\u30012\u30013\u3001+\u3001-\u3001*\u3001/\u3001.\u3001Enter\u3001Enter\u30010\u30010\u30010\u30010\u30010\u30010\u30010\u30010\u3001Enter\u3001Enter\uff0c</p> <p>\u7136\u540e\u662f\u4e0d\u5728\u5c0f\u952e\u76d8\u4e0a\u7684\u4e0a\u4e0b\u5de6\u53f3\u65b9\u5411\u952e\uff0c\u6309\u4e0b Enter\uff0c\u518d\u6309\u4e0b\u4e0d\u5728\u5c0f\u952e\u76d8\u4e0a\u7684\u4e0a\u4e0b\u5de6\u53f3\u65b9\u5411\u952e\uff0c\u6548\u679c\u5982\u4e0b\uff1a</p> <p></p> <p>\uff08\u56fe 14-5 NumLock \u7684\u5b9e\u9645\u6548\u679c\uff09</p> <p>\u524d\u9762\u5c0f\u952e\u76d8\u7684\u6d4b\u8bd5\u90e8\u5206\u5012\u662f\u7b26\u5408\u9884\u671f\uff0c\u4f46\u662f\u4e3a\u4ec0\u4e48\u4e0a\u4e0b\u5de6\u53f3\u65b9\u5411\u952e\u4f1a\u8f93\u51fa\u4e00\u4e2a <code>8</code> \u5462\uff08\u6709\u7684\u673a\u578b\u751a\u81f3\u4f1a\u8f93\u51fa <code>8246</code>\uff09\uff1f</p> <p>\u901a\u8fc7\u56de\u5230\u7b2c 13 \u8282\u5f00\u7bc7\u7684\u72b6\u6001\u6253\u5370\u626b\u63cf\u7801\u6211\u4eec\u53d1\u73b0\uff0c\u539f\u6765\u662f qemu \u5bf9 PS/2 \u952e\u76d8\u7684\u6a21\u62df\u51fa\u4e86\u70b9\u6545\u969c\uff0c\u5c06 0xE0 \u8fd9\u4e00\u672c\u8be5\u653e\u5728\u524d\u9762\u7684\u5b57\u8282\u653e\u5728\u4e86\u540e\u9762\uff0c\u5bfc\u81f4\u6211\u4eec\u7684\u952e\u76d8\u9a71\u52a8\u5148\u63a5\u6536\u5230\u8981\u6253\u5370\u5c0f\u952e\u76d8\u7684 <code>8</code>\uff08\u6ca1\u9519\uff0c\u65b9\u5411\u952e\u548c\u5c0f\u952e\u76d8\u4e0a\u7684\u952e\u626b\u63cf\u7801\u76f8\u540c\uff0c\u53ea\u662f\u540e\u9762\u8ddf\u4e86\u4e2a 0xE0\uff09\uff0c\u7136\u540e\u63a5\u6536\u5230 0xE0\uff0c0xE0 \u5c31\u88ab\u540e\u7eed\u7684\u65b9\u5411\u952e\u6240\u5339\u914d\u4e86\uff08\u6709\u7684\u751a\u81f3\u90fd\u5339\u914d\u4e0d\u4e0a\uff09\u3002\u5bf9\u6b64\u6211\u4eec\u6709\u51e0\u4e2a\u89e3\u51b3\u65b9\u6848\uff1a\u8981\u4e48\u5e72\u8106\u6446\u70c2\u76f4\u63a5\u4e0d\u7ba1\uff0c\u8981\u4e48\u505a\u4e00\u4e2a\u8865\u4e01\u3002</p> <p>\u4f46\u662f\uff0c\u7ecf\u8fc7\u8fdb\u4e00\u6b65\u7684\u6d4b\u8bd5\uff0c\u6211\u4eec\u53d1\u73b0\u4e0d\u540c\u7248\u672c\u7684 QEMU \u6709\u4e0d\u540c\u7684\u6a21\u62df\u903b\u8f91\uff0c\u6709\u7684 QEMU \u751a\u81f3\u76f4\u63a5\u4e0d\u533a\u5206\u65b9\u5411\u952e\u548c\u5c0f\u952e\u76d8\u7684\u65b9\u5411\u952e\uff0c\u90a3\u8fd9\u4e2a\u8865\u4e01\u81ea\u7136\u6ca1\u6cd5\u6253\uff0c\u6240\u4ee5\u5c31\u6b64\u5f00\u6446\uff01</p> <p>\u6700\u540e\uff0c\u6211\u4eec\u628a <code>in_process</code> \u4e2d\u7684\u6253\u5370\u5b57\u7b26\u6539\u4e3a\u5411\u7279\u5b9a\u7684 FIFO \u4e2d\u653e\u5165\u5b57\u7b26\uff0c\u7531 <code>kernel_main</code> \u6216\u8005\u522b\u7684\u4ec0\u4e48\u5730\u65b9\u4ece\u8fd9\u91cc\u9762\u8bfb\u53d6\u3002</p> <p>\u4ee3\u7801 14-11 <code>in_process</code> \u6700\u7ec8\u7248\uff08drivers/keyboard.c\uff09 <pre><code>static void in_process(uint32_t key)\n{\n    if (!(key &amp; FLAG_EXT)) {\n        fifo_put(&amp;decoded_key, key &amp; 0xFF);\n    } else {\n        int raw_key = key &amp; MASK_RAW;\n        switch (raw_key) {\n            case ENTER:\n                fifo_put(&amp;decoded_key, '\\n');\n                break;\n            case BACKSPACE:\n                fifo_put(&amp;decoded_key, '\\b');\n                break;\n            case TAB:\n                fifo_put(&amp;decoded_key, '\\t');\n                break;\n        }\n    }\n}\n</code></pre></p> <p>\u5728\u6587\u4ef6\u5f00\u5934\u6dfb\u52a0\u4e24\u884c <code>fifo_t decoded_key;</code> \u4ee5\u53ca <code>uint32_t dkey_buf[32];</code>\uff0c\u5728 <code>init_keyboard</code> \u4e2d\u52a0\u5165\u4e00\u884c <code>fifo_init(&amp;decoded_key, 32, dkey_buf);</code>\uff0c\u6211\u4eec\u7684\u952e\u76d8\u9a71\u52a8\u5c31\u6b64\u5b8c\u7ed3\u3002</p> <p>\u6700\u65b0\u7248\u7684\u6d4b\u8bd5\u7528 <code>main.c</code> \u5b8c\u6574\u7248\u5982\u4e0b\uff1a</p> <p>\u4ee3\u7801 14-12 \u952e\u76d8\u9a71\u52a8\u6700\u7ec8\u6d4b\u8bd5\uff08kernel/main.c\uff09 <pre><code>#include \"monitor.h\"\n#include \"gdtidt.h\"\n#include \"isr.h\"\n#include \"timer.h\"\n#include \"memory.h\"\n#include \"mtask.h\"\n#include \"keyboard.h\"\n#include \"fifo.h\"\n\nextern fifo_t decoded_key;\n\ntask_t *create_kernel_task(void *entry)\n{\n    task_t *new_task;\n    new_task = task_alloc();\n    new_task-&gt;tss.esp = (uint32_t) kmalloc(64 * 1024) + 64 * 1024 - 4;\n    new_task-&gt;tss.eip = (int) entry;\n    new_task-&gt;tss.es = new_task-&gt;tss.ss = new_task-&gt;tss.ds = new_task-&gt;tss.fs = new_task-&gt;tss.gs = 2 * 8;\n    new_task-&gt;tss.cs = 1 * 8;\n    return new_task;\n}\n\nvoid kernel_main() // kernel.asm\u4f1a\u8df3\u8f6c\u5230\u8fd9\u91cc\n{\n    monitor_clear();\n    init_gdtidt();\n    init_memory();\n    init_timer(100);\n    init_keyboard();\n    asm(\"sti\");\n\n    task_t *task_a = task_init();\n\n    while (1) {\n        if (fifo_status(&amp;decoded_key) &gt; 0) {\n            monitor_put(fifo_get(&amp;decoded_key));\n        }\n    }\n}\n</code></pre></p> <p>\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u8f93\u5165 abc123\u3001enter\u30011234567\uff0c\u6548\u679c\u5982\u4e0b\uff1a</p> <p></p> <p>\uff08\u56fe 14-6 \u4e00\u7247\u7a7a\u65f7\uff09</p> <p>\u6211\u4eec\u770b\u5230\uff0c\u73b0\u5728\u7684OS\u542f\u52a8\u65f6\u5c4f\u5e55\u4e00\u7247\u7a7a\u65f7\uff0c\u5b83\u6210\u4e86\u4e00\u4e2a\u5b8c\u5b8c\u5168\u5168\u7684\u6253\u5b57\u673a\u3002\u8fd9\u4e5f\u7b97\u662f\u6211\u4eec\u4eba\u673a\u4ea4\u4e92\u7684\u521d\u6b65\u6210\u679c\u4e86\u3002</p> <p>\u952e\u76d8\u76f8\u5173\u7684\u5904\u7406\u5230\u6b64\u7ed3\u675f\uff0c\u4e0b\u4e00\u8282\uff0c\u6211\u4eec\u5f00\u59cb\u8131\u79bb\u5185\u6838\uff0c\u5411\u7528\u6237\u5c42\u8fc8\u8fdb\u3002</p>"},{"location":"os-tutorial/old/15-syscall/","title":"15 \u7cfb\u7edf\u8c03\u7528\u2014\u2014\u5e94\u7528\u7a0b\u5e8f\u4e0e\u7cfb\u7edf\u7684\u4ea4\u4e92\u4e4b\u95e8","text":"<p>\u5982\u679c\u4f60\u6ca1\u7528\u8fc7 Linux\uff0c\u53ea\u505a\u8fc7 Windows \u5f00\u53d1\uff0c\u90a3\u4e48\u6ca1\u542c\u8bf4\u8fc7\u7cfb\u7edf\u8c03\u7528\uff08\u6216\u8005\u5176\u7b80\u79f0syscall\uff09\u662f\u6bd4\u8f83\u6b63\u5e38\u7684\uff0c\u4f46\u6ca1\u542c\u8bf4\u8fc7API\u662f\u4e0d\u592a\u5408\u7406\u7684\u3002\u5728\u672c\u7bc7\u6587\u7ae0\u4e2d\uff0c\u4f60\u53ef\u4ee5\u6682\u65f6\u8ba4\u4e3a\u8fd9\u4e24\u8005\u662f\u4e00\u6837\u7684\u3002\u4ee5\u76ee\u524d b \u7ad9\u79d1\u6280\u533a\u7684\u5178\u578b\u89c6\u9891\u6765\u770b\uff0c\u6211\u611f\u89c9 winapi \u7684\u6982\u5ff5\u662f\u4e2a Windows \u7528\u6237\u5e94\u8be5\u90fd\u5df2\u7ecf\u77e5\u9053\u4e86\u5427\u2026\u2026</p> <p>\u5982\u679c\u4f60\u505a\u8fc7 32 \u4f4d\u7684 Linux \u5f00\u53d1\uff0c\u90a3\u5c31\u6bd4\u8f83\u597d\u8bf4\u4e86\uff0c\u5982\u679c\u6ca1\u6709\u505a\u8fc7\u4e5f\u65e0\u6240\u8c13\u3002</p> <p>\u9996\u5148\uff0c\u6211\u4eec\u5f97\u60f3\u4e00\u60f3\uff1a\u7a0b\u5e8f\u662f\u5982\u4f55\u8c03\u7528\u7cfb\u7edf\u7684\u529f\u80fd\u7684\u5462\uff1f\u5728 C \u8bed\u8a00\u4e2d\uff0c\u6216\u8bb8\u53ea\u662f\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\uff0c\u90a3\u4e48\u5728\u5e95\u5c42\uff0c\u5b83\u957f\u4ec0\u4e48\u6837\u5462\uff1f</p> <p>\u5728 32 \u4f4d\u7684 Linux \u4e2d\uff0c\u5b83\u7684\u5e95\u5c42\u662f\u8fd9\u6837\u7684\uff1a\u5f80 eax\u3001ebx \u8fd9\u4e9b\u5bc4\u5b58\u5668\u91cc\u586b\u597d\u53c2\u6570\uff0c\u7136\u540e\u6267\u884c <code>int 80h</code>\u3002\u8fd9\u770b\u8d77\u6765\u5f88\u597d\u7528\uff0c\u6211\u4eec\u4e5f\u6765\u6284\u4e00\u4e0b\u3002</p> <p>\u9996\u5148\uff0c\u6211\u4eec\u6765\u5728 IDT \u91cc\u521b\u5efa\u4e00\u4e2a <code>0x80</code> \u7f16\u53f7\u7684\u4e2d\u65ad\u63cf\u8ff0\u7b26\u3002</p> <p>\u4ee3\u7801 15-1 <code>0x80</code> \u53f7\u4e2d\u65ad\u63cf\u8ff0\u7b26\uff08kernel/gdtidt.c\uff09 <pre><code>    idt_set_gate(47, (uint32_t) irq15, 0x08, 0x8E);\n\n    idt_set_gate(0x80, (uint32_t) syscall_handler, 0x08, 0x8E | 0x60); // \u8fd9\u91cc\u662f\u65b0\u589e\u7684\n\n    idt_flush((uint32_t) &amp;idt_ptr);\n</code></pre></p> <p>\u4ee3\u7801 15-2 \u5f00\u5934\u58f0\u660e\uff08kernel/gdtidt.c\uff09 <pre><code>extern void gdt_flush(uint32_t);\nextern void idt_flush(uint32_t);\nextern void syscall_handler(); // \u8fd9\u91cc\u662f\u65b0\u589e\u7684\n</code></pre></p> <p>\u548c\u4e0a\u9762\u8bbe\u7f6e\u7b2c 15 \u53f7\u4e2d\u65ad\u7684\u4ee3\u7801\u76f8\u5bf9\u6bd4\uff0c\u6211\u4eec\u53d1\u73b0\u5728\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u5904\u6709\u4e9b\u5947\u602a\uff0c\u4e3a\u4ec0\u4e48\u8981 <code>| 0x60</code> \u5462\uff1f\u4e8b\u5b9e\u4e0a\uff0c<code>| 0x60</code> \u7684\u610f\u601d\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e2a\u4e2d\u65ad\u662f\u7ed9\u5e94\u7528\u7a0b\u5e8f\u7528\u7684\u3002\u53ef\u662f\u6211\u4eec\u76ee\u524d\u8fd8\u6ca1\u6709\u5e94\u7528\u7a0b\u5e8f\uff0c\u56e0\u6b64\u53ea\u80fd\u8ba9\u64cd\u4f5c\u7cfb\u7edf\u4ee3\u4e3a\u6d4b\u8bd5\u4e86\u3002</p> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u7f16\u5199 <code>syscall_handler</code>\uff1a</p> <p>\u4ee3\u7801 15-3 \u7cfb\u7edf\u8c03\u7528\u5165\u53e3\uff08kernel/interrupt.asm\uff09 <pre><code>[extern syscall_manager]\n[global syscall_handler]\nsyscall_handler:\n    sti ; CPU \u5728\u6267\u884c int \u6307\u4ee4\u65f6\u9ed8\u8ba4\u5173\u95ed\u4e2d\u65ad\uff0c\u6211\u4eec\u53ea\u662f\u6765\u7528\u4e00\u4e0b\u7cfb\u7edf\u529f\u80fd\uff0c\u6240\u4ee5\u628a\u4e2d\u65ad\u6253\u5f00\n    pushad ; \u7528\u4e8e\u8fd4\u56de\u503c\u7684 pushad\n    pushad ; \u7528\u4e8e\u7ed9 syscall_manager \u4f20\u503c\u7684 pushad\n\n    call syscall_manager\n\n    add esp, 32 ; \u628a\u7ed9syscall_manager \u4f20\u503c\u7684 pushad \u90e8\u5206\u8df3\u8fc7\n    popad ; \u628a\u5e0c\u671b\u7cfb\u7edf\u8c03\u7528\u540e\u7684\u5bc4\u5b58\u5668\u60c5\u51b5 pop \u51fa\u6765\n    iretd ; \u7531\u4e8e\u662f int \u6307\u4ee4\uff0c\u6240\u4ee5\u7528 iretd \u8fd4\u56de\n</code></pre></p> <p>\u63a5\u7740\uff0c\u5728 kernel \u76ee\u5f55\u4e0b\u521b\u5efa <code>syscall.c</code>\uff0c\u6211\u4eec\u6765\u5b9e\u73b0 <code>syscall_manager</code>\uff1a</p> <p>\u4ee3\u7801 15-4 \u7cfb\u7edf\u8c03\u7528\u5206\u53d1\uff08kernel/syscall.c\uff09 <pre><code>#include \"common.h\"\n#include \"syscall.h\"\n\nvoid syscall_manager(int edi, int esi, int ebp, int esp, int ebx, int edx, int ecx, int eax) // \u8fd9\u91cc\u7684\u53c2\u6570\u987a\u5e8f\u662fpushad\u7684\u5012\u5e8f\uff0c\u4e0d\u53ef\u66f4\u6539\n{\n    typedef int (*syscall_t)(int, int, int, int, int); // \u8fd9\u91cc\u9762\u53ea\u6709\u4e94\u4e2a\u5bc4\u5b58\u5668\u52c9\u5f3a\u53ef\u4ee5\u7b97\u6b63\u5e38\u7528\uff0c\u6240\u4ee5\u53ea\u6709\u4e94\u4e2a\u53c2\u6570\n    //(&amp;eax + 1)[7] = ((syscall_t) syscall_table[eax])(ebx, ecx, edx, edi, esi); // \u628a\u4e0b\u9762\u7684\u4ee3\u7801\u538b\u7f29\u6210\u4e0a\u9762\u4e00\u884c\u662f\u8fd9\u6837\u7684\n    syscall_t syscall_fn = (syscall_t) syscall_table[eax]; // \u4ecesyscall_table\u4e2d\u62ff\u5230\u7b2c eax \u4e2a\u51fd\u6570\n    int ret = syscall_fn(ebx, ecx, edx, edi, esi); // \u8c03\u7528\u5e76\u83b7\u53d6\u8fd4\u56de\u503c\n    // \u611f\u8c22\u7f16\u8bd1\u5668\uff0c\u5373\u4f7f\u7ed9\u591a\u4e86\u53c2\u6570\uff0c\u88ab\u8c03\u7528\u7684\u51fd\u6570\u4e5f\u4f1a\u628a\u5b83\u4eec\u5ffd\u7565\u6389\n    int *save_reg = &amp;eax + 1; // \u8fdb\u5165\u7528\u4e8e\u8fd4\u56de\u503c\u7684pushad\n    save_reg[7] = ret; // \u7b2c7\u4e2a\u5bc4\u5b58\u5668\u4e3aeax\uff0c\u51fd\u6570\u8fd4\u56de\u65f6\u9ed8\u8ba4\u5c06eax\u4f5c\u4e3a\u8fd4\u56de\u503c\n}\n</code></pre></p> <p>\u8fd9\u91cc\u7684 <code>syscall_table</code> \u5b9a\u4e49\u5728 <code>syscall.h</code> \u4e2d\uff0c\u5b83\u957f\u8fd9\u6837\uff1a</p> <p>\u4ee3\u7801 15-5 \u7cfb\u7edf\u8c03\u7528\u51fd\u6570\u8868\uff08include/syscall.h\uff09 <pre><code>#ifndef _SYSCALL_H_\n#define _SYSCALL_H_\n\ntypedef void *syscall_func_t;\n\nsyscall_func_t syscall_table[] = {\n};\n\n#endif\n</code></pre></p> <p>\u91cc\u9762\u76ee\u524d\u8fd8\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u51fd\u6570\u3002\u6211\u4eec\u4e4b\u6240\u4ee5\u91c7\u7528\u8fd9\u6837\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\u8868\u7684\u65b9\u5f0f\uff0c\u662f\u56e0\u4e3a\u8fd9\u6837\u4fbf\u4e8e\u6269\u5c55\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5199\u597d\u51fd\u6570\uff0c\u7136\u540e\u52a0\u5230\u6570\u7ec4\u91cc\u5373\u53ef\u3002</p> <p>\u90a3\u4e48\uff0c\u6211\u4eec\u73b0\u5728\u6765\u8bd5\u8bd5\u8fd9\u4e2a\u65b0\u6846\u67b6\u3002\u5728 <code>syscall.c</code> \u7684\u4e0b\u65b9\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a <code>sys_getpid</code>\uff1a</p> <p>\u4ee3\u7801 15-6 \u7cfb\u7edf\u8c03\u7528 <code>sys_getpid</code>\uff08kernel/syscall.c\uff09 <pre><code>int sys_getpid()\n{\n    return task_pid(task_now());\n}\n</code></pre></p> <p>\u6dfb\u52a0\u5230 <code>syscall_table</code>\uff1a</p> <p>\u4ee3\u7801 15-7 \u65b0\u7cfb\u7edf\u8c03\u7528\u8868\uff08include/syscall.h\uff09 <pre><code>int sys_getpid();\n\nsyscall_func_t syscall_table[] = {\n    sys_getpid,\n};\n</code></pre></p> <p>\u65b0\u5efa <code>kernel/syscall_impl.asm</code>\uff0c\u7ed9 <code>getpid</code> \u52a0\u4e2a\u5305\u88c5\uff1a</p> <p>\u4ee3\u7801 15-8 \u7cfb\u7edf\u8c03\u7528\u7684\u5305\u88c5\uff08kernel/syscall_impl.asm\uff09 <pre><code>[global getpid]\ngetpid:\n    mov eax, 0\n    int 80h\n    ret\n</code></pre></p> <p>\u5728 <code>Makefile</code> \u4e2d\uff0c\u7ed9 <code>OBJS</code> \u53d8\u91cf\u52a0\u4e0a <code>out/syscall.o out/syscall_impl.o</code>\uff0c\u7406\u8bba\u4e0a\u73b0\u5728\u5df2\u7ecf\u53ef\u4ee5\u8c03\u7528 <code>getpid</code> \u4e86\u3002</p> <p>\u6211\u4eec\u6765\u505a\u4e00\u4e2a\u5c0f\u5c0f\u7684\u6d4b\u8bd5\u3002\u5728 <code>kernel_main</code> \u4e2d\u52a0\u5165\u8fd9\u4e09\u884c\uff08\u653e\u5728 <code>task_init</code> \u8c03\u7528\u7684\u540e\u9762\uff09\uff1a</p> <p>\u4ee3\u7801 15-9 <code>getpid</code> \u6d4b\u8bd5\uff08kernel/main.c\uff09 <pre><code>    monitor_write(\"kernel_main pid: \");\n    monitor_write_dec(getpid());\n    monitor_put('\\n');\n</code></pre></p> <p>\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u6548\u679c\u5982\u4e0b\uff1a</p> <p></p> <p>\uff08\u56fe 15-1 \u6210\u529f\u4e86\u5417\uff1f\uff09</p> <p><code>getpid</code> \u8fd4\u56de\u4e860\u3002\u8fd9\u6709\u53ef\u80fd\u6709\u4e24\u4e2a\u539f\u56e0\uff0c\u662f <code>int 80h</code> \u7684\u8c03\u7528\u5931\u8d25\u4e86\uff0c\u6240\u4ee5 <code>getpid</code> \u8fd4\u56de\u7684\u662f\u8c03\u7528\u65f6\u7684\u90a3\u4e2a0\uff0c\u8fd8\u662f\u771f\u7684\u8fd4\u56de\u4e86 <code>kernel_main</code> \u5bf9\u5e94\u7684\u90a3\u4e2a\u4efb\u52a1\u7684 <code>pid</code> \u4e5f\u5c31\u662f 0 \u5462\uff1f</p> <p>\u518d\u521b\u5efa\u4e00\u4e2a\u4efb\u52a1\uff0c\u6211\u4eec\u6765\u5b9e\u5730\u9a8c\u8bc1\u4e00\u4e0b\uff1a</p> <p>\u4ee3\u7801 15-10 <code>task_b</code> \u6253\u8d62\u590d\u6d3b\u8d5b\uff08kernel/main.c\uff09 <pre><code>void task_b_main()\n{\n    monitor_write(\"task_b pid: \");\n    monitor_write_dec(getpid());\n    monitor_put('\\n');\n    task_exit(0);\n}\n\n// \u4ee5\u4e0b\u4e24\u884c\u8bed\u53e5\u6dfb\u52a0\u5728kernel_main\u4e2dtask_init\u8c03\u7528\u540e\n    task_t *task_b = create_kernel_task(task_b_main);\n    task_run(task_b);\n</code></pre></p> <p>\u518d\u6b21\u7f16\u8bd1\u8fd0\u884c\uff0c\u6548\u679c\u5982\u4e0b\uff1a</p> <p></p> <p>\uff08\u56fe 15-2 \u8d62\uff09</p> <p>\u81f3\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u521d\u6b65\u5b8c\u6210\u4e86\u7cfb\u7edf\u8c03\u7528\u7684\u6846\u67b6\u3002\u540e\u7eed\u5982\u679c\u6709\u9700\u8981\uff0c\u6211\u4eec\u518d\u5bf9\u5927\u6846\u67b6\u8fdb\u884c\u4fee\u6539\u3002\u4ee5\u540e\u53ea\u8981\u6dfb\u52a0\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528 <code>xxx</code>\uff0c\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570\u5c31\u53eb <code>sys_xxx</code>\uff0c\u8fd9\u662f\u6211\u4eec\u540e\u9762\u7684\u4e00\u4e2a\u7ea6\u5b9a\u3002</p> <p>\u73b0\u5728\u7684\u7bc7\u5e45\u7565\u5fae\u6709\u4e9b\u77ed\u4e86\uff08bushi\uff09\uff0c\u6211\u4eec\u6765\u5b9e\u73b0\u4e00\u4e2a <code>printf</code> \u5427\u3002\u6bd5\u7adf\u4ece\u5185\u5b58\u7ba1\u7406\u5f00\u59cb\uff0c\u6211\u4eec\u5c31\u5728\u5fcd\u53d7\u7740\u4ea4\u66ff\u7684 <code>monitor_write</code>\u3001<code>monitor_write_hex</code>\u3001<code>monitor_write_dec</code>\uff0c\u5982\u679c\u5230\u4e86\u4e0b\u4e00\u8282\u7684 <code>shell</code> \u6211\u4eec\u8fd8\u5728\u7528\u8fd9\u4e9b\uff0c\u90a3\u8fd9\u4e2a\u753b\u9762\u2026\u2026</p> <p>\u6240\u4ee5\uff0c\u5b9e\u73b0\u4e00\u4e2a <code>printf</code> \u52bf\u5728\u5fc5\u884c\u3002\u4e4b\u6240\u4ee5\u62d6\u5230\u73b0\u5728\uff0c\u662f\u56e0\u4e3a\u524d\u9762\u7684\u7bc7\u5e45\u90fd\u88ab\u6392\u6ee1\u4e86\u3002</p> <p>\u90a3\u4e48\uff0c\u6211\u4eec\u5f00\u59cb\u3002<code>printf</code> \u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a<code>print</code> \u548c <code>f</code>\u3002\u770b\u8d77\u6765 <code>print</code> \u7b80\u5355\u4e00\u70b9\uff0c\u6211\u4eec\u5c31\u5148\u505a <code>print</code> \u5427\u3002</p> <p>\u5728 Linux \u4e2d\uff0c\u8f93\u51fa\u7528\u7684\u51fd\u6570\u5f52\u6839\u5230\u5e95\u662f <code>write</code> \u7cfb\u7edf\u8c03\u7528\u3002\u6211\u4eec\u7167\u846b\u82a6\u753b\u74e2\uff0c\u4e5f\u5b9e\u73b0\u4e00\u4e2a <code>write</code> \u7cfb\u7edf\u8c03\u7528\u3002\u4e0d\u8fc7\u5728 Linux \u4e0a\uff0c<code>write</code> \u662f\u7528\u6765\u5199\u6587\u4ef6\u7684\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4ee3\u8868\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff08\u7b2c18\u8282\u4f1a\u8be6\u7ec6\u8bb2\u89e3\u8fd9\u662f\u4e2a\u4ec0\u4e48\u4e1c\u897f\uff09\u3002\u53ea\u8981\u4f20\u5165 1\uff0c\u90a3\u4e48 Linux \u5c31\u4f1a\u8ba4\u4e3a\u4f60\u5728\u5f80\u6807\u51c6\u8f93\u51fa\u5199\u5165\u3002\u8fd9\u4e2a\u529f\u80fd\u597d\uff0c\u6211\u4e5f\u8fd9\u4e48\u5e72\u3002</p> <p>\u90a3\u4e48\uff0c<code>sys_write</code> \u7684\u5177\u4f53\u5185\u5bb9\u5982\u4e0b\uff1a</p> <p>\u4ee3\u7801 15-11 \u53ea\u652f\u6301\u5230\u6807\u51c6\u8f93\u51fa\u7684 <code>write</code>\uff08kernel/syscall.c\uff09 <pre><code>int sys_write(int fd, const void *msg, int len)\n{\n    if (fd == 1) {\n        char *s = (char *) msg;\n        for (int i = 0; i &lt; len; i++) monitor_put(s[i]);\n        return 0;\n    }\n    return -1;\n}\n</code></pre></p> <p>\u4ee3\u7801 15-12 \u73b0\u5728\u7684 include/syscall.h <pre><code>#ifndef _SYSCALL_H_\n#define _SYSCALL_H_\n\ntypedef void *syscall_func_t;\n\nint sys_getpid();\nint sys_write(int, const void *, int);\n\nsyscall_func_t syscall_table[] = {\n    sys_getpid, sys_write,\n};\n\n#endif\n</code></pre></p> <p>\u63a5\u4e0b\u6765\u6dfb\u52a0\u5bf9\u5e94\u7684\u5305\u88c5\uff1a</p> <p>\u4ee3\u7801 15-13 <code>write</code> \u7684\u5305\u88c5\uff08kernel/syscall_impl.asm\uff09 <pre><code>[global write]\nwrite:\n    push ebx\n    mov eax, 1\n    mov ebx, [esp + 8]\n    mov ecx, [esp + 12]\n    mov edx, [esp + 16]\n    int 80h\n    pop ebx\n    ret\n</code></pre></p> <p>\u6309\u7167 C \u7f16\u8bd1\u5668\u7ea6\u5b9a\uff0c<code>ebx</code> \u4e0d\u80fd\u968f\u4fbf\u7528\uff0c\u6240\u4ee5\u8fd9\u91cc <code>push</code> \u53c8 <code>pop</code> \u4e86\u4e00\u4e0b\u3002\u90a3\u4e48\uff0c\u53c2\u6570\u7684\u4f4d\u7f6e\u4e5f\u5c31\u8981\u76f8\u5e94\u987a\u5ef6\uff0c\u4ece <code>esp + 4</code>\u3001<code>esp + 8</code>\u3001<code>esp + 12</code> \u90fd\u52a0\u4e864\u3002</p> <p>\u597d\u4e86\uff0c\u6211\u4eec\u6765\u6d4b\u8bd5\u4e00\u4e0b <code>write</code>\uff1a</p> <p>\u4ee3\u7801 15-14 <code>write</code> \u6d4b\u8bd5\uff08kernel/main.c\uff09 <pre><code>void task_b_main()\n{\n    write(1, \"task_b pid: \", strlen(\"task_b pid: \"));\n    monitor_write_dec(getpid());\n    write(1, \"\\n\", 2);\n    task_exit(0);\n}\n</code></pre></p> <p>\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u6548\u679c\u4ecd\u5e94\u5982\u56fe 15-2 \u6240\u793a\u3002\u73b0\u5728\uff0c\u6211\u4eec\u5df2\u7ecf\u6709\u4e86 <code>print</code> \u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u8be5\u5b9e\u73b0 <code>f</code> \u4e86\u3002</p> <p>\u6216\u8bb8\u6709\u4eba\u4f1a\u8bf4\uff0c\u4f60\u8fd9\u4e2a <code>write</code> \u6bd4 <code>monitor_write</code> \u9700\u8981\u7684\u53c2\u6570\u8fd8\u8981\u591a\uff0c\u6709\u4ec0\u4e48\u597d\u5904\u53ef\u8a00\u5417\uff1f\u4f60\u8bf4\u5f97\u5bf9\uff0c\u4f46\u662f <code>write</code> \u662f\u7cfb\u7edf\u8c03\u7528\uff0c\u672a\u6765\u53ef\u4ee5\u7ed9\u5e94\u7528\u7a0b\u5e8f\u7528\uff0c\u4f46\u662f <code>monitor_write</code> \u5e76\u4e0d\u884c\u3002</p> <p>\u600e\u6837\u5b9e\u73b0\u8fd9\u4e2a <code>f</code> \u5462\uff1f\u8fd9\u4e2a <code>f</code> \u80cc\u540e\u7684\u5185\u5bb9\u975e\u5e38\u5e9e\u5927\uff0c\u6211\u4eec\u4e0d\u5199\u90a3\u4e48\u591a\uff0c\u53ea\u652f\u6301 <code>%d</code>\u3001<code>%x</code>\u3001<code>%c</code> \u4ee5\u53ca <code>%s</code>\u3002\u5982\u679c\u53ea\u652f\u6301\u6253\u5370\u7684\u8bdd\uff0c\u529f\u80fd\u6709\u70b9\u5c11\uff0c\u987a\u4fbf\u518d\u652f\u6301\u4e00\u4e2a <code>sprintf</code>\u3002\u6d89\u53ca\u5230 <code>sprintf</code>\uff0c\u90a3\u5c31\u5fc5\u7136\u5b58\u5728\u8981\u628a\u6574\u6570\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u7684\u95ee\u9898\u3002</p> <p>\u8f93\u51fa\u5341\u8fdb\u5236\u548c\u5341\u516d\u8fdb\u5236\u6574\u6570\u6211\u4eec\u5df2\u6709\u5148\u4f8b\uff0c\u4f46\u662f\u90a3\u90fd\u662f\u8f93\u51fa\u5230\u5c4f\u5e55\u4e0a\u4e86\uff0c\u6211\u4eec\u603b\u4e0d\u53ef\u80fd\u4ece\u5c4f\u5e55\u91cc\u518d\u6536\u96c6\u4e00\u904d\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u597d\u5199\u4e00\u4e2a\u5355\u72ec\u7684\u51fd\u6570\u4e86\u3002</p> <p>\u67e5\u627e\u8d44\u6599\u53d1\u73b0\uff0c\u5728 Windows \u4e0b\uff0c\u5bf9\u5e94\u7684\u6574\u6570\u8f6c\u5b57\u7b26\u4e32\u51fd\u6570\u4e3a <code>itoa</code>\uff0c\u539f\u578b\u662f <code>char *itoa(int num, char *ptr, int radix)</code>\u3002\u6211\u4eec\u4e0d\u9700\u8981\u8fd9\u6837\u4e00\u4e2a\u8fd4\u56de\u503c\uff0c\u4f46\u6211\u4eec\u53c8\u9700\u8981\u5199\u5165 <code>char *</code>\u3002\u8fd9\u662f\u56e0\u4e3a <code>char *</code> \u672c\u8eab\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5728\u522b\u7684\u4f5c\u7528\u57df\u4fee\u6539 <code>char *</code> \u5c31\u9700\u8981 <code>char *</code> \u7684\u6307\u9488\uff0c\u4e5f\u5c31\u662f <code>char **</code>\u3002</p> <p>\u6700\u7ec8\uff0c\u6211\u4eec\u51b3\u5b9a\u628a <code>itoa</code> \u5199\u6210\uff1a<code>void itoa(uint32_t num, char **ptr_addr, int radix)</code>\u3002\u5b83\u7684\u5b9e\u73b0\u4e5f\u6ca1\u6709\u90a3\u4e48\u96be\uff1a</p> <p>\u4ee3\u7801 15-15 <code>itoa</code>\uff08lib/printf.c\uff09 <pre><code>#include \"common.h\"\n\nstatic void itoa(uint32_t num, char **buf_ptr_addr, int radix)\n{\n    uint32_t m = num % radix; // \u6700\u4f4e\u4f4d\n    uint32_t i = num / radix; // \u6700\u9ad8\u4f4d\n    if (i) itoa(i, buf_ptr_addr, radix); // \u5148\u628a\u9ad8\u4f4d\u5316\u4e3a\u5b57\u7b26\u4e32\n    if (m &lt; 10) { // \u5904\u7406\u6700\u4f4e\u4f4d\n        *((*buf_ptr_addr)++) = m + '0'; // 0~9\uff0c\u76f4\u63a5\u52a00\n    } else {\n        *((*buf_ptr_addr)++) = m - 10 + 'A'; // 10~15\uff0c10~15-&gt;0~5-&gt;A~F\n    }\n}\n</code></pre></p> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u601d\u8003\u4e00\u4e2a\u95ee\u9898\uff1a<code>printf</code> \u63a5\u6536\u7684\u53c2\u6570\u5e76\u6ca1\u6709\u6570\u91cf\u4e0a\u7684\u9650\u5b9a\uff0c\u5b83\u54ea\u6765\u7684\u90a3\u4e48\u5927\u80fd\u8010\u63a5\u6536\u65e0\u7a77\u65e0\u5c3d\u7684\u53c2\u6570\u5462\uff1f\u8fd9\u5c31\u7528\u5230\u4e86 C \u8bed\u8a00\u4e00\u4e2a\u4e0d\u90a3\u4e48\u9c9c\u4e3a\u4eba\u77e5\u7684\u7279\u6027\uff1a\u53ef\u53d8\u53c2\u6570\u5305\u3002</p> <p>\u8bbf\u95ee Linux \u7684 manpage \u7684\u7f51\u9875\u7248\uff1aman7\u4e2d\u6709\u5173 <code>printf</code> \u7684\u6587\u6863\uff0c\u6211\u4eec\u53d1\u73b0\uff0c<code>printf</code> \u7684\u53c2\u6570\u91cc\u5192\u51fa\u4e86\u4e00\u4e2a <code>...</code>\uff0c\u8fd9\u53c8\u662f\u4ec0\u4e48\u4e1c\u897f\u5462\uff1f\u8fd9\u5c31\u662f\u53ef\u53d8\u53c2\u6570\u5305\u7684\u8bed\u6cd5\uff0c\u4f60\u53ef\u4ee5\u5f80 <code>...</code> \u91cc\u585e\u4efb\u610f\u591a\u4e2a\u4efb\u610f\u7c7b\u578b\u7684\u4e1c\u897f\uff0c\u53ea\u8981\u5185\u5b58\u88c5\u5f97\u4e0b\u5c31\u884c\u3002</p> <p>\u90a3\u4e48\uff0c\u6211\u4eec\u600e\u4e48\u4ece\u8fd9\u5768 <code>...</code> \u4e2d\u62ff\u5230\u6211\u4f20\u5165\u7684\u4e1c\u897f\u5462\uff1f\u6211\u4eec\u53d1\u73b0\uff0c\u9664\u4e86 <code>printf</code>\u3001<code>fprintf</code>\u3001<code>dprintf</code>\u3001<code>sprintf</code> \u548c <code>snprintf</code> \u8fd9\u4e94\u4e2a\u5e26 <code>...</code> \u7684\u51fd\u6570\u4ee5\u5916\uff0c\u4e0b\u9762\u8fd8\u6709\u4e94\u4e2a\u7c7b\u4f3c\u7684\u51fd\u6570\uff0c\u53ea\u662f\u5728\u8fd9\u4e94\u4e2a\u51fd\u6570\u7684\u524d\u9762\u52a0\u4e86\u4e00\u4e2a\u5b57\u6bcd v\u3002\u5bf9\u6bd4\u4e00\u4e0b\u53c2\u6570\uff0c\u539f\u6765\u662f\u628a\u6700\u540e\u4e00\u4e2a <code>...</code> \u6362\u6210\u4e86 <code>va_list ap</code>\u3002\u4e0b\u9762\u7684\u6587\u6863\u4e5f\u660e\u786e\u58f0\u660e\uff0c\u5e26 v \u7684\u7248\u672c\u4e0e\u4e0d\u5e26 v \u7684\u7248\u672c\u529f\u80fd\u76f8\u540c\uff0c\u53ea\u662f\u4e00\u4e2a\u7528\u4e86 <code>va_list</code> \u4e00\u4e2a\u6ca1\u7528\u3002\u770b\u6765\u8fd9\u4e2a <code>va_list</code> \u6700\u7ec8\u5c31\u662f\u53ef\u53d8\u53c2\u6570\u5305\u7684\u8f7d\u4f53\u3002</p> <p>\u4e0b\u9762\u8fd8\u6709\u4e00\u4e2a\u94fe\u63a5\u8ba9\u6211\u4eec\u8f6c\u5230 stdarg(3)\uff0c\u8fd9\u56db\u4e2a\u51fd\u6570\u5e94\u8be5\u5c31\u662f\u5bf9 <code>va_list</code> \u8fdb\u884c\u64cd\u7eb5\u7684\u51fd\u6570\u4e86\u3002<code>va_start</code> \u662f\u5fc5\u987b\u8981\u8c03\u7528\u7684\uff0c<code>last</code> \u4f9d\u7167\u63cf\u8ff0\uff0c\u662f <code>va_list</code> \u4e4b\u524d\u7684\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u3002\u9700\u8981\u53d6\u53c2\u6570\uff0c\u5219\u8981\u8c03\u7528 <code>va_arg</code>\uff0c\u5982\u679c\u60f3\u8981 <code>int</code> \u53c2\u6570\uff0c\u5c31\u9700\u8981\u8c03\u7528 <code>va_arg(ap, int)</code>\uff0c\u5982\u679c\u8981 <code>char</code>\uff0c\u5c31\u662f <code>va_arg(ap, char)</code>\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u7528\u5b8c <code>va_list</code> \u4e4b\u540e\uff0c\u6211\u4eec\u9700\u8981\u8c03\u7528 <code>va_end</code>\u3002\u6700\u4e0b\u9762\u7684 <code>va_copy</code> \u6211\u4eec\u7528\u4e0d\u5230\uff0c\u5c31\u4e0d\u7528\u7ba1\u4e86\u3002</p> <p>\u90a3\u4e48\u8fd9\u56db\u4e2a\u4e1c\u897f\u662f\u600e\u4e48\u5b9e\u73b0\u7684\u5462\uff1f\u6211\u4eec\u627e\u5230\u4e86 mingw \u4e2d\u5bf9\u5e94\u7684\u5934\u6587\u4ef6\uff0c\u4f4d\u4e8e mingw\u6587\u4ef6\u5939\u4e0b/lib/gcc/mingw32/9.2.0/include/stdarg.h\uff08\u4e0d\u540c\u7248\u672cmingw\u53ef\u80fd\u53d8\u5316\uff09\uff0c\u7279\u6b64\u590d\u5236\u7c98\u8d34\u4f9b\u8bf8\u4f4d\u53c2\u8003\u3002\u8bf7\u770b VCR\uff1a</p> <p>\u4ee3\u7801 15-16 <code>va_list</code> \u6709\u5173\u51fd\u6570\u7684\u5b9e\u73b0\uff08\u65e0\u6587\u4ef6\uff09 <pre><code>#define va_start(v,l)   __builtin_va_start(v,l)\n#define va_end(v)   __builtin_va_end(v)\n#define va_arg(v,l) __builtin_va_arg(v,l)\n#if !defined(__STRICT_ANSI__) || __STDC_VERSION__ + 0 &gt;= 199900L \\\n    || __cplusplus + 0 &gt;= 201103L\n#define va_copy(d,s)    __builtin_va_copy(d,s) // C99\u4ee5\u4e0a \u6216 C++11\u4ee5\u4e0a \u6216\u6dfb\u52a0-ansi\u9009\u9879\u65f6 \u63d0\u4f9b\n#endif\n#define __va_copy(d,s)  __builtin_va_copy(d,s)\n</code></pre></p> <p>\u539f\u6765\u662f\u7f16\u8bd1\u5668\u5185\u7f6e\u7684\u5b9e\u73b0\uff0c\u90a3\u6ca1\u4e8b\u4e86\u3002\u5728 i686-elf-tools \u7684\u7c7b\u4f3c\u8def\u5f84\u4e0b\uff0c\u6211\u4eec\u4e5f\u627e\u5230\u4e86\u8fd9\u6837\u7684\u4e00\u6bb5\u4ee3\u7801\uff0c\u770b\u6765\u6211\u4eec\u7684 gcc \u4e5f\u662f\u652f\u6301\u8fd9\u51e0\u4e2a\u4e1c\u897f\u7684\u3002</p> <p>\u6709\u7f16\u8bd1\u5668\u5185\u7f6e\u5b9e\u73b0\u6211\u4eec\u5c31\u4e0d\u7ba1\u4e86\uff0c\u65b0\u5efa <code>include/stdarg.h</code>\uff0c\u6211\u4eec\u8fd9\u5c31\u5f00\u6284\uff1a</p> <p>\u4ee3\u7801 15-17 include/stdarg.h <pre><code>#ifndef _STDARG_H_\n#define _STDARG_H_\n\ntypedef char *va_list; // \u6211\u4e5f\u4e0d\u77e5\u9053va_list\u662f\u4ec0\u4e48\u7c7b\u578b\uff0c\u5148\u7ed9\u4e2achar *\u6302\u7740\uff0c\u53cd\u6b63\u7528\u4e0d\u5230\n\n#define va_start(v,l)   __builtin_va_start(v,l)\n#define va_end(v)       __builtin_va_end(v)\n#define va_arg(v,l)     __builtin_va_arg(v,l)\n#define va_copy(d,s)    __builtin_va_copy(d,s)\n\n#endif\n</code></pre></p> <p>\u597d\u4e86\uff0c\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u5904\u7406\u53ef\u53d8\u53c2\u6570\u5305\u7684\u624b\u6bb5\u4e86\uff0c\u6211\u4eec\u6765\u5199\u4e00\u4e2a <code>printf</code>\uff1a</p> <p>\u4ee3\u7801 15-18 \u4e0d\u80fd\u683c\u5f0f\u5316\u7684 <code>printf</code>\uff08lib/printf.c\uff09 <pre><code>#include \"stdarg.h\" // \u5728\u5f00\u5934\u6dfb\u52a0\uff0c\u56e0\u4e3a\u7528\u5230\u4e86va_list\u4ee5\u53ca\u64cd\u7eb5va_list\u7684\u8fd9\u4e9b\u4e1c\u897f\n\nint vsprintf(char *buf, const char *fmt, va_list ap)\n{\n    return 114514;\n}\n\nint sprintf(char *buf, const char *fmt, ...)\n{\n    va_list ap;\n    va_start(ap, fmt);\n    int ret = vsprintf(buf, fmt, ap);\n    va_end(ap);\n    return ret;\n}\n\nint vprintf(const char *fmt, va_list ap)\n{\n    char buf[1024] = {0}; // \u7406\u8bba\u4e0a\u591f\u4e86\n    int ret = vsprintf(buf, fmt, ap);\n    write(1, buf, ret);\n    return ret;\n}\n\nint printf(const char *fmt, ...)\n{\n    va_list ap;\n    va_start(ap, fmt);\n    int ret = vprintf(fmt, ap);\n    va_end(ap);\n    return ret;\n}\n</code></pre></p> <p>\u7ecf\u8fc7\u5c42\u5c42\u8e22\u76ae\u7403\uff0c\u6700\u7ec8 <code>sprintf</code>\u3001<code>vprintf</code> \u548c <code>printf</code> \u53c2\u6570\u5904\u7406\u7684\u91cd\u4efb\u90fd\u843d\u5230\u4e86 <code>vsprintf</code> \u7684\u5934\u4e0a\u3002\u7531\u4e8e\u6211\u4eec\u53ea\u652f\u6301 <code>%s</code>\u3001<code>%c</code>\u3001<code>%d</code> \u548c <code>%x</code>\uff0c\u6211\u4eec\u4e5f\u5c31\u4e0d\u7528\u591a\u9ebb\u70e6\u5730\u5904\u7406 <code>%</code> \u540e\u9762\u90a3\u4e00\u5768\uff0c\u76f4\u63a5\u7528\u4e00\u4e2a <code>switch</code> \u5373\u53ef\u3002</p> <p>\u6211\u4eec\u5148\u6765\u5217\u4e00\u4e0b\u57fa\u672c\u6846\u67b6\uff1a</p> <p>\u4ee3\u7801 15-19 <code>vsprintf</code> \u7684\u57fa\u672c\u6846\u67b6\uff08lib/printf.c\uff09 <pre><code>int vsprintf(char *buf, const char *fmt, va_list ap)\n{\n    char *buf_ptr = buf; // \u4e0d\u52a8\u539f\u6765\u7684buf\uff0c\u539f\u6765\u7684buf\u53ef\u80fd\u8fd8\u7528\u5f97\u7740\n    const char *index_ptr = fmt; // \u4e0d\u52a8\u539f\u6765\u7684fmt\uff0c\u4f46\u8fd9\u4e2a\u597d\u50cf\u771f\u7528\u4e0d\u7740\n    char index_char = *index_ptr; // fmt\u4e32\u4e2d\u7684\u5f53\u524d\u5b57\u7b26\n    int32_t arg_int; // \u53ef\u80fd\u4f1a\u51fa\u73b0\u7684int\u53c2\u6570\n    char *arg_str; // \u53ef\u80fd\u4f1a\u51fa\u73b0\u7684char *\u53c2\u6570\n    while (index_char) { // \u6ca1\u5230fmt\u7684\u7ed3\u5c3e\n        if (index_char != '%') { // \u4e0d\u662f%\n            *(buf_ptr++) = index_char; // \u76f4\u63a5\u590d\u5236\u5230buf\n            index_char = *(++index_ptr); // \u81ea\u52a8\u66f4\u65b0\u5230\u4e0b\u4e00\u4e2a\u5b57\u7b26\n            continue; // \u8df3\u8fc7\u540e\u7eed\u5bf9\u4e8e%\u7684\u5224\u65ad\n        }\n        index_char = *(++index_ptr); // \u5148\u628a%\u8df3\u8fc7\u53bb\n        switch (index_char) { // \u5bf9\u73b0\u5728\u7684index_char\u8fdb\u884c\u5224\u65ad\n            case 's':\n            case 'c':\n            case 'x':\n            case 'd':\n            default:\n                break;\n        }\n        index_char = *(++index_ptr); // \u518d\u628a%\u540e\u9762\u7684s c x d\u8df3\u8fc7\u53bb\n    }\n    return strlen(buf); // \u8fd4\u56de\u505a\u5b8c\u540ebuf\u7684\u957f\u5ea6\n}\n</code></pre></p> <p>\u57fa\u672c\u4e0a\u5c31\u662f\u8fd9\u6837\uff0c\u5bf9\u4ee3\u7801\u7684\u89e3\u91ca\u90fd\u5728\u6ce8\u91ca\u91cc\u4e86\u3002</p> <p>\u4e0b\u9762\u6211\u4eec\u7740\u91cd\u5bf9 <code>index_char</code> \u7684\u5224\u65ad\u8fdb\u884c\u8bb2\u89e3\uff0c\u5b9e\u9645\u4e0a\u4e5f\u5e76\u4e0d\u591a\u3002</p> <p>\u9996\u5148\u4ece <code>%s</code> \u548c <code>%c</code> \u5f00\u59cb\u3002\u5927\u81f4\u601d\u8def\u662f\u8fd9\u6837\u7684\uff1a\u83b7\u53d6\u5bf9\u5e94\u7684\u53c2\u6570-&gt;\u5199\u5165 <code>buf_ptr</code>\u3002</p> <p>\u4ee3\u7801 15-20 <code>%s</code>\u3001<code>%c</code>\uff08lib/printf.c\uff09 <pre><code>        switch (index_char) { // \u5bf9\u73b0\u5728\u7684index_char\u8fdb\u884c\u5224\u65ad\n            case 's':\n                arg_str = va_arg(ap, char*); // \u83b7\u53d6char *\u53c2\u6570\n                strcpy(buf_ptr, arg_str); // \u76f4\u63a5strcpy\u8fdbbuf_ptr\n                buf_ptr += strlen(arg_str); // buf_ptr\u76f4\u63a5\u8df3\u5230arg_str\u7ed3\u5c3e\uff0c\u6b63\u597d\u5728arg_str\u7ed3\u5c3e\u7684\\0\u5904\n                break;\n            case 'c':\n                *(buf_ptr++) = va_arg(ap, int); // \u628a\u83b7\u53d6\u5230\u7684char\u53c2\u6570\u76f4\u63a5\u5199\u8fdbbuf_ptr\n                break;\n            case 'x':\n            case 'd':\n            default:\n                break;\n        }\n</code></pre></p> <p>\u4e4b\u6240\u4ee5 <code>%c</code> \u90a3\u91cc\u6ca1\u6709\u7528 <code>va_arg(ap, char)</code> \u83b7\u53d6 <code>char</code> \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u662f\u56e0\u4e3a\u8fd9\u6837\u4f1a\u62a5\u8b66\u544a\uff0c\u539f\u56e0\u672a\u77e5\u3002</p> <p>\u4e0b\u9762\u7684 <code>%x</code> \u548c <code>%d</code> \u903b\u8f91\u7c7b\u4f3c\uff0c\u56e0\u4e3a\u6709 <code>itoa</code> \u5341\u5206\u7b80\u5355\u3002</p> <p>\u4ee3\u7801 15-21 <code>%x</code>\u3001<code>%d</code>\uff08lib/printf.c\uff09 <pre><code>            case 'x':\n                arg_int = va_arg(ap, int); // \u83b7\u53d6int\u53c2\u6570\n                itoa(arg_int, &amp;buf_ptr, 16); // itoa\u65e9\u5728\u8bbe\u8ba1\u65f6\u5c31\u53ef\u4ee5\u4fee\u6539buf_ptr\uff0c\u8fd9\u6837\u5c31\u76f4\u63a5\u5199\u5230buf_ptr\u91cc\u4e86\uff0c\u8fd8\u81ea\u52a8\u8df3\u5230\u6570\u672b\u5c3e\n                break;\n            case 'd':\n                arg_int = va_arg(ap, int); // \u83b7\u53d6int\u53c2\u6570\n                if (arg_int &lt; 0) { // \u7ed9\u8d1f\u6570\u524d\u9762\u52a0\u4e2a\u7b26\u53f7\n                    arg_int = -arg_int; // \u5148\u8f6c\u8d1f\u4e3a\u6b63\n                    *(buf_ptr++) = '-'; // \u7136\u540e\u52a0\u8d1f\u53f7\n                }\n                itoa(arg_int, &amp;buf_ptr, 10); // itoa\u65e9\u5728\u8bbe\u8ba1\u65f6\u5c31\u53ef\u4ee5\u4fee\u6539buf_ptr\uff0c\u8fd9\u6837\u5c31\u76f4\u63a5\u5199\u5230buf_ptr\u91cc\u4e86\uff0c\u8fd8\u81ea\u52a8\u8df3\u5230\u6570\u672b\u5c3e\n                break;\n</code></pre></p> <p>\u73b0\u5728\u6211\u4eec\u7684 <code>printf</code> \u5c31\u5df2\u7ecf\u5199\u5b8c\u4e86\uff0c\u5728 Makefile \u7684 <code>OBJS</code> \u6700\u540e\u52a0\u5165\u4e00\u4e2a <code>out/printf.o</code>\uff0c\u51c6\u5907\u8fdb\u884c\u6d4b\u8bd5\u3002</p> <p>\u4ee3\u7801 15-22 \u73b0\u5728\u7684 <code>task_b_main</code>\uff08kernel/main.c\uff09 <pre><code>void task_b_main()\n{\n    printf(\"task_b %s %d%c\", \"pid:\", getpid(), '\\n');\n    task_exit(0);\n}\n</code></pre></p> <p>\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u6548\u679c\u4ecd\u5e94\u5982\u56fe 15-2 \u6240\u793a\u3002\u81f3\u6b64\uff0c\u6211\u4eec\u7684 <code>printf</code> \u987a\u5229\u5b8c\u6210\u3002</p> <p>\u6700\u540e\uff0c\u6211\u4eec\u518d\u5f00\u53d1\u4e00\u4e2a\u5185\u6838\u4e13\u7528\u7684 <code>printk</code>\uff0c\u5b83\u76f4\u63a5\u8c03\u7528 <code>monitor_write</code>\uff0c\u7701\u7565\u4e86 <code>write</code> \u7684\u4e2d\u95f4\u6b65\u9aa4\u3002</p> <p>\u4ee3\u7801 15-23 <code>printk</code>\uff08lib/kstdio.c\uff09 <pre><code>#include \"stdio.h\"\n#include \"monitor.h\"\n\nint printk(const char *fmt, ...)\n{\n    va_list ap;\n    va_start(ap, fmt);\n    char buf[1024] = {0};\n    int ret = vsprintf(buf, fmt, ap);\n    va_end(ap);\n    monitor_write(buf);\n    return ret;\n}\n</code></pre></p> <p>\u4ee3\u7801 15-24 include/stdio.h <pre><code>#ifndef _STDIO_H_\n#define _STDIO_H_\n\n#include \"common.h\"\n#include \"stdarg.h\"\n\nint vsprintf(char *buf, const char *fmt, va_list ap);\nint sprintf(char *buf, const char *fmt, ...);\nint vprintf(const char *fmt, va_list ap);\nint printf(const char *fmt, ...);\n\nint printk(const char *fmt, ...); // for kernel use\n\n#endif\n</code></pre></p> <p>\u5728 Makefile \u7684 <code>OBJS</code> \u5904\u6dfb\u52a0 <code>out/kstdio.o</code>\uff0c\u7531\u4e8e\u6d4b\u8bd5\u4ee3\u7801\u672a\u53d8\u66f4\uff0c\u6682\u65f6\u4e0d\u9700\u8981\u7f16\u8bd1\u8fd0\u884c\u3002</p> <p>\u597d\u4e86\uff0c\u672c\u8282\u5230\u6b64\u4e3a\u6b62\u5c31\u7ed3\u675f\u4e86\uff0c\u4e0b\u4e00\u8282\u6211\u4eec\u5f00\u59cb\u505a\u66f4\u597d\u7684\u4eba\u673a\u4ea4\u4e92\u2014\u2014\u4e5f\u5c31\u662f shell\u3002</p>"},{"location":"os-tutorial/old/16-shell-d-and-i/","title":"16 shell\u7684\u8bbe\u8ba1\u4e0e\u5b9e\u73b0","text":"<p>\u548c\u524d\u9762\u51e0\u8282\u76f8\u6bd4\uff0c\u8fd9\u4e00\u8282\u5e94\u8be5\u4f1a\u8f7b\u677e\u5f88\u591a\uff0c\u56e0\u4e3a shell \u79bb\u7528\u6237\u5c42\u66f4\u8fd1\uff0c\u4e5f\u5c31\u66f4\u8d34\u5408\u65e5\u5e38\u5f00\u53d1\u65f6\u7684\u4ee3\u7801\u4e60\u60ef\uff0c\u518d\u4e5f\u4e0d\u7528\u53bb\u7ba1\u4ec0\u4e48\u786c\u4ef6\u89c4\u7a0b\u4e86\u2014\u2014\u4e0d\u8fc7\u4e5f\u5c31\u6b22\u5feb\u8fd9\u4e00\u8282\uff0c\u4e0b\u9762\u4e24\u8282\u53c8\u662f\u786c\u83dc\u4e86\u3002</p> <p>\u6211\u4eec\u5e0c\u671b\u6211\u4eec\u7684 shell \u80fd\u591f\u5f88\u65b9\u4fbf\u5730\u79fb\u690d\u6210\u7528\u6237\u7a0b\u5e8f\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u4fdd\u8bc1 shell \u4e2d\u8c03\u7528\u7684\u51fd\u6570\u6700\u7ec8\u90fd\u662f\u5e94\u7528\u7a0b\u5e8f\u80fd\u76f4\u63a5\u7528\u7684\u4e1c\u897f\uff0c\u5305\u62ec\u7cfb\u7edf\u8c03\u7528\u548c string.h \u91cc\u7684\u90a3\u4e00\u5768\u3002</p> <p>\u4f5c\u4e3a\u4e00\u4e2a shell\uff0c\u8bfb\u53d6\u952e\u76d8\u8f93\u5165\u662f\u5fc5\u8981\u7684\uff0c\u4f46\u6211\u4eec\u76ee\u524d\u8fd8\u6ca1\u6709\u8bfb\u53d6\u952e\u76d8\u8f93\u5165\u7684\u7cfb\u7edf\u8c03\u7528\u3002</p> <p>\u554a\u8fd9\u4e2a\u4e0d\u662f\u975e\u5e38\u7b80\u5355\u5417\uff0c\u952e\u76d8\u8f93\u5165\u5c31\u662f\u6807\u51c6\u8f93\u5165\uff0c\u8bfb\u6807\u51c6\u8f93\u5165\u7528 <code>scanf</code> \u4e0d\u5c31\u884c\u4e86\uff1f</p> <p>\u4f60\u8bf4\u5f97\u5bf9\uff0c\u4f46\u662f\u628a\u4e00\u4e2a <code>scanf</code> \u8bf4\u660e\u767d\u5199\u660e\u767d\u5df2\u7ecf\u62b5\u5f97\u4e0a\u6211\u81f3\u5c11\u4e00\u8282\u7684\u7bc7\u5e45\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u8fd8\u662f\u5f97\u5230 Linux \u91cc\u53bb\u60f3\u529e\u6cd5\u3002</p> <p>\u7ecf\u8fc7\u67e5\u9605\u8d44\u6599\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5f52\u6839\u7ed3\u5e95\uff0c\u5728 Linux \u4e2d\uff0c\u5f97\u5230\u952e\u76d8\u8f93\u5165\u7684\u51fd\u6570\u662f <code>read</code>\u3002\u53ea\u8981\u7ed9\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20 0\uff0c<code>read</code> \u5c31\u4f1a\u9ed8\u8ba4\u4f60\u8981\u8bfb\u952e\u76d8\u8f93\u5165\u3002\u800c\u5728 Linux \u4e2d <code>read</code> \u65f6\uff0c\u53ea\u8981\u6ca1\u6709\u56de\u8f66\uff0c<code>read</code> \u5c31\u4e0d\u4f1a\u8fd4\u56de\u3002</p> <p>\u6211\u4eec\u7684 <code>read</code> \u4e0d\u9700\u8981\u90a3\u4e48\u667a\u80fd\uff0c\u6709\u4e00\u4e2a\u952e\u8fd4\u56de\u4e00\u4e2a\u5c31\u591f\u4e86\u3002\u6765\u5230 kernel/syscall.c\uff0c\u6211\u4eec\u6765\u5199 <code>sys_read</code>\uff1a</p> <p>\u4ee3\u7801 16-1 <code>read</code> \u7cfb\u7edf\u8c03\u7528\u7684\u80cc\u540e\uff08kernel/syscall.c\uff09 <pre><code>#include \"fifo.h\" // \u52a0\u5728\u5f00\u5934\n\nextern fifo_t decoded_key; // \u52a0\u5728\u5f00\u5934\n\n// \u7701\u7565\u4e2d\u95f4\u7684 syscall_manager\u3001sys_getpid \u548c sys_write\n\nint sys_read(int fd, void *buf, int count)\n{\n    int ret = -1;\n    if (fd == 0) { // \u5982\u679c\u662f\u6807\u51c6\u8f93\u5165\n        char *buffer = (char *) buf; // \u5148\u8f6c\u6210char *\n        uint32_t bytes_read = 0; // \u8bfb\u4e86\u591a\u5c11\u4e2a\n        while (bytes_read &lt; count) { // \u6ca1\u8fbe\u5230count\u4e2a\n            while (fifo_status(&amp;decoded_key) == 0); // \u53ea\u8981\u6ca1\u6709\u65b0\u7684\u952e\u6211\u5c31\u4e0d\u8bfb\u8fdb\u6765\n            *buffer = fifo_get(&amp;decoded_key); // \u83b7\u53d6\u65b0\u7684\u952e\n            bytes_read++;\n            buffer++; // buffer\u6307\u5411\u4e0b\u4e00\u4e2a\n        }\n        ret = (bytes_read == 0 ? -1 : (int) bytes_read); // \u5982\u679c\u5565\u4e5f\u6ca1\u8bfb\u7740\u5c31-1\uff0c\u5426\u5219\u5c31\u6b63\u5e38\u8fd4\u56de\u5c31\u884c\u4e86\n        return ret;\n    }\n    return -1; // \u8fd8\u6ca1\u505a\n}\n</code></pre></p> <p>\u5728 <code>syscall_table</code> \u4e2d\u52a0\u5165 <code>sys_read</code>\uff0c\u968f\u540e\u5728 syscall_impl.asm \u4e2d\u6dfb\u52a0 <code>read</code> \u7684\u5b9e\u73b0\uff1a</p> <p>\u4ee3\u7801 16-2 <code>read</code> \u7684\u5b9e\u73b0\uff08kernel/syscall_impl.asm\uff09 <pre><code>[global read]\nread:\n    push ebx\n    mov eax, 2\n    mov ebx, [esp + 8]\n    mov ecx, [esp + 12]\n    mov edx, [esp + 16]\n    int 80h\n    pop ebx\n    ret\n</code></pre></p> <p>\u76ee\u524d\u6211\u4eec\u8f93\u51fa\u5b57\u7b26\u4e32\u9700\u8981\u4f9d\u9760 <code>printf</code>\uff0c\u4f46\u662f <code>printf(\"%s\\n\")</code> \u6211\u4eec\u8981\u9891\u7e41\u7528\u5230\uff0c\u8fd9\u53c8\u5b9e\u5728\u662f\u592a\u957f\u4e86\u3002</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u628a lib/printf.c \u6539\u540d\u4e3a lib/stdio.c\uff0c\u5e76\u5c01\u88c5\u4e86\u4e24\u4e2a\u6700\u57fa\u672c\u7684\u4e1c\u897f\uff0c<code>puts</code> \u548c <code>putchar</code>\uff1a</p> <p>\u4ee3\u7801 16-3 <code>puts</code> \u548c <code>putchar</code>\uff08lib/stdio.c\uff09 <pre><code>void puts(const char *buf)\n{\n    write(1, buf, strlen(buf));\n    write(1, \"\\n\", 1);\n}\n\nint putchar(char ch)\n{\n    printf(\"%c\", ch);\n    return ch;\n}\n</code></pre></p> <p>\u8bb0\u5f97\u540c\u65f6\u5728 Makefile \u7684 <code>OBJS</code> \u4e2d\u628a out/printf.o \u6539\u4e3a out/stdio.o\uff0c\u5e76\u81ea\u884c\u5728 <code>stdio.h</code> \u4e2d\u6dfb\u52a0 <code>puts</code> \u548c <code>putchar</code> \u7684\u58f0\u660e\u3002</p> <p>\u65b0\u5efa\u4e00\u4e2a kernel/shell.c\uff0c\u6211\u4eec\u6b63\u5f0f\u5f00\u59cb\u5199 shell\u3002\u5148\u642d\u4e00\u4e2a\u6700\u57fa\u672c\u7684\u811a\u624b\u67b6\u5427\uff1a</p> <p>\u4ee3\u7801 16-4 \u811a\u624b\u67b6\uff08kernel/shell.c\uff09 <pre><code>#include \"shell.h\" // MAX_CMD_LEN, MAX_ARG_NR\n#include \"stdio.h\"\n\nstatic char cmd_line[MAX_CMD_LEN] = {0}; // \u8f93\u5165\u547d\u4ee4\u884c\u7684\u5185\u5bb9\nstatic char *argv[MAX_ARG_NR] = {NULL}; // argv\uff0c\u5b57\u9762\u610f\u601d\n\nstatic void print_prompt() // \u8f93\u51fa\u63d0\u793a\u7b26\n{\n    printf(\"[TUTO@localhost /] $ \"); // \u8fd9\u4e00\u90e8\u5206\u5927\u5bb6\u968f\u4fbf\u6539\uff0c\u4f60\u751a\u81f3\u53ef\u4ee5\u6539\u6210&gt;&gt;&gt;\n}\n\nstatic void readline(char *buf, int cnt) // \u8f93\u5165\u4e00\u884c\u6216cnt\u4e2a\u5b57\u7b26\n{\n    char *pos = buf; // \u4e0d\u60f3\u53d8buf\n    while (read(0, pos, 1) != -1 &amp;&amp; (pos - buf) &lt; cnt) { // \u8bfb\u5b57\u7b26\u6210\u529f\u4e14\u6ca1\u5230cnt\u4e2a\n        switch (*pos) {\n            case '\\n':\n            case '\\r': // \u56de\u8f66\u6216\u6362\u884c\uff0c\u7ed3\u675f\n                *pos = 0;\n                putchar('\\n'); // read\u4e0d\u81ea\u52a8\u56de\u663e\uff0c\u9700\u8981\u624b\u52a8\u8865\u4e00\u4e2a\\n\n                return; // \u8fd4\u56de\n            case '\\b': // \u9000\u683c\n                if (buf[0] != '\\b') { // \u5982\u679c\u4e0d\u5728\u7b2c\u4e00\u4e2a\n                    --pos; // \u6307\u5411\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\n                    putchar('\\b'); // \u624b\u52a8\u8f93\u51fa\u4e00\u4e2a\u9000\u683c\n                }\n                break;\n            default:\n                putchar(*pos); // \u90fd\u4e0d\u662f\uff0c\u90a3\u5c31\u76f4\u63a5\u8f93\u51fa\u521a\u8f93\u5165\u8fdb\u6765\u7684\u4e1c\u897f\n                pos++; // \u6307\u5411\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        }\n    }\n}\n\nvoid shell()\n{\n    puts(\"TutorialOS Indev (tags/Indev:WIP, Jun 26 2024, 21:09) [GCC 32bit] on baremetal\"); // \u770b\u7740\u773c\u719f\uff1f\u8fd9\u4e00\u90e8\u5206\u662f\u4ece Python 3 \u91cc\u6a21\u4eff\u7684\n    puts(\"Type \\\"ver\\\" for more information.\\n\"); // \u793a\u4f8b\uff0c\u53ea\u6253\u7b97\u652f\u6301\u8fd9\u4e00\u4e2a\n    while (1) { // \u65e0\u9650\u5faa\u73af\n        print_prompt(); // \u8f93\u51fa\u63d0\u793a\u7b26\n        memset(cmd_line, 0, MAX_CMD_LEN);\n        readline(cmd_line, MAX_CMD_LEN); // \u8f93\u5165\u4e00\u884c\u547d\u4ee4\n        if (cmd_line[0] == 0) continue; // \u5565\u4e5f\u6ca1\u6709\uff0c\u662f\u6362\u884c\uff0c\u76f4\u63a5\u8df3\u8fc7\n    }\n    puts(\"shell: PANIC: WHILE (TRUE) LOOP ENDS! RUNNNNNNN!!!\"); // \u5230\u4e0d\u4e86\uff0c\u4e0d\u89e3\u91ca\n}\n</code></pre></p> <p>\u4ee3\u7801 16-5 include/shell.h <pre><code>#ifndef _SHELL_H_\n#define _SHELL_H_\n\n#include \"common.h\"\n\n#define MAX_CMD_LEN 100\n#define MAX_ARG_NR 30\n\nvoid shell();\n\n#endif\n</code></pre></p> <p>\u5728 Makefile \u7684 <code>OBJS</code> \u4e2d\u6dfb\u52a0 out/shell.o\uff0c\u7f16\u8bd1\u8fd0\u884c\uff0c\u81ea\u7136\u662f\u4ec0\u4e48\u90fd\u6ca1\u6709\uff0c\u56e0\u4e3a\u6211\u4eec\u6839\u672c\u5c31\u6ca1\u6709\u8fd0\u884c shell \u7684\u5165\u53e3\u3002</p> <p>\u5728 <code>kernel_main</code> \u4e2d\u521b\u5efa\u4e00\u4e2a\u65b0\u4efb\u52a1\u7528\u6765\u6267\u884c shell\uff1a</p> <p>\u4ee3\u7801 16-6 shell \u4efb\u52a1\uff08kernel/main.c\uff09 <pre><code>#include \"shell.h\" // \u6dfb\u52a0\u5728\u5f00\u5934\n\nvoid kernel_main() // kernel.asm\u4f1a\u8df3\u8f6c\u5230\u8fd9\u91cc\n{\n    monitor_clear();\n    init_gdtidt();\n    init_memory();\n    init_timer(100);\n    init_keyboard();\n    asm(\"sti\");\n\n    task_t *task_a = task_init();\n    task_t *task_b = create_kernel_task(task_b_main);\n    task_t *task_shell = create_kernel_task(shell);\n    task_run(task_b);\n    task_run(task_shell);\n    monitor_write(\"kernel_main pid: \");\n    monitor_write_dec(getpid());\n    monitor_put('\\n');\n\n    while (1) {\n        if (fifo_status(&amp;decoded_key) &gt; 0) {\n            //monitor_put(fifo_get(&amp;decoded_key));\n        }\n    }\n}\n</code></pre></p> <p>\u6211\u4eec\u6ce8\u91ca\u6389\u4e86\u6700\u540e\u7684 <code>monitor_put</code>\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u6709\u4e86 shell\uff08\u5373\u4f7f\u53ea\u662f\u4e2a\u811a\u624b\u67b6\uff09\uff0c\u4e0d\u518d\u9700\u8981\u8fd9\u4e48\u4f4e\u7ea7\u7684\u4eba\u673a\u4ea4\u4e92\u4e86\u3002</p> <p>\u73b0\u5728\u518d\u6b21\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u6548\u679c\u5982\u4e0b\uff1a</p> <p></p> <p>\uff08\u56fe 16-1 \u811a\u624b\u67b6\uff09</p> <p>\u73b0\u5728\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a shell\uff0c\u4e00\u4e2a\u8f93\u5165\u4ec0\u4e48\u90fd\u4e0d\u4f1a\u8fd4\u56de\u7684 shell\u3002</p> <p><code>task_b_main</code> \u5df2\u7ecf\u7ed3\u675f\u5176\u5386\u53f2\u4f7f\u547d\uff0c\u53ef\u4ee5\u5220\u6389\u4e86\u3002\u73b0\u5728\u7684 main.c \u5c31\u7cbe\u7b80\u6210\u4e86\u8fd9\u4e2a\u6837\u5b50\uff1a</p> <p>\u4ee3\u7801 16-7 \u5982\u4eca\u7684 kernel/main.c <pre><code>#include \"monitor.h\"\n#include \"gdtidt.h\"\n#include \"isr.h\"\n#include \"timer.h\"\n#include \"memory.h\"\n#include \"mtask.h\"\n#include \"keyboard.h\"\n#include \"shell.h\"\n\ntask_t *create_kernel_task(void *entry)\n{\n    task_t *new_task;\n    new_task = task_alloc();\n    new_task-&gt;tss.esp = (uint32_t) kmalloc(64 * 1024) + 64 * 1024 - 4;\n    new_task-&gt;tss.eip = (int) entry;\n    new_task-&gt;tss.es = new_task-&gt;tss.ss = new_task-&gt;tss.ds = new_task-&gt;tss.fs = new_task-&gt;tss.gs = 2 * 8;\n    new_task-&gt;tss.cs = 1 * 8;\n    return new_task;\n}\n\nvoid kernel_main() // kernel.asm\u4f1a\u8df3\u8f6c\u5230\u8fd9\u91cc\n{\n    monitor_clear();\n    init_gdtidt();\n    init_memory();\n    init_timer(100);\n    init_keyboard();\n    asm(\"sti\");\n\n    task_t *task_a = task_init();\n    task_t *task_shell = create_kernel_task(shell);\n    task_run(task_shell);\n\n    while (1);\n}\n</code></pre></p> <p>\u6709\u79cd\u56de\u5230\u4e86\u7b2c12\u8282\u7684\u9519\u89c9\u5462\uff1f</p> <p>\u4e0b\u9762\u6211\u4eec\u6765\u505a\u5bf9\u547d\u4ee4\u7684\u89e3\u6790\uff0c\u8fd9\u4e00\u90e8\u5206\u6bd4\u8f83\u597d\u60f3\u3002</p> <p>\u4ee3\u7801 16-8 \u547d\u4ee4\u89e3\u6790 <code>cmd_parse</code>\uff08kernel/shell.c\uff09 <pre><code>static int cmd_parse(char *cmd_str, char **argv, char token)\n{\n    int arg_idx = 0;\n    while (arg_idx &lt; MAX_ARG_NR) {\n        argv[arg_idx] = NULL;\n        arg_idx++;\n    } // \u5f00\u5c40\u5148\u628a\u4e0a\u4e00\u4e2aargv\u62b9\u6389\n    char *next = cmd_str; // \u4e0b\u4e00\u4e2a\u5b57\u7b26\n    int argc = 0; // \u8fd9\u5c31\u662f\u8981\u8fd4\u56de\u7684argc\u4e86\n    while (*next) { // \u5faa\u73af\u5230\u7ed3\u675f\u4e3a\u6b62\n        if (*next != '\"') {\n            while (*next == token) *next++; // \u591a\u4e2atoken\u5c31\u53ea\u4fdd\u7559\u7b2c\u4e00\u4e2a\uff0cwindows cmd\u5c31\u662f\u8fd9\u4e48\u5904\u7406\u7684\n            if (*next == 0) break; // \u5982\u679c\u8df3\u8fc7\u5b8ctoken\u4e4b\u540e\u7ed3\u675f\u4e86\uff0c\u90a3\u5c31\u76f4\u63a5\u9000\u51fa\n            argv[argc] = next; // \u5c06\u9996\u6307\u9488\u8d4b\u503c\u8fc7\u53bb\uff0c\u4ece\u8fd9\u91cc\u5f00\u59cb\u5c31\u662f\u5f53\u524d\u53c2\u6570\n            while (*next &amp;&amp; *next != token) next++; // \u8df3\u5230\u4e0b\u4e00\u4e2atoken\n        } else {\n            next++; // \u8df3\u8fc7\u5f15\u53f7\n            argv[argc] = next; // \u8fd9\u91cc\u5f00\u59cb\u5c31\u662f\u5f53\u524d\u53c2\u6570\n            while (*next &amp;&amp; *next != '\"') next++; // \u8df3\u5230\u5f15\u53f7\n        }\n        if (*next) { // \u5982\u679c\u8fd9\u91cc\u6709token\u5b57\u7b26\n            *next++ = 0; // \u5c06\u5f53\u524dtoken\u5b57\u7b26\u8bbe\u4e3a0\uff08\u7ed3\u675f\u7b26\uff09\uff0cnext\u540e\u79fb\u4e00\u4e2a\n        }\n        if (argc &gt; MAX_ARG_NR) return -1; // \u53c2\u6570\u592a\u591a\uff0c\u8d85\u8fc7\u4e0a\u9650\u4e86\n        argc++; // argc\u589e\u4e00\uff0c\u5982\u679c\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u7a7a\u683c\u65f6\u4e0d\u63d0\u524d\u9000\u51fa\uff0cargc\u4f1a\u9519\u8bef\u5730\u88ab\u591a\u52a01\n    }\n    return argc;\n}\n</code></pre></p> <p>\u4ee3\u7801\u7684\u8be6\u7ec6\u89e3\u91ca\u8bf7\u53c2\u89c1\u6ce8\u91ca\uff0c\u5199\u7684\u5df2\u7ecf\u5f88\u8be6\u5c3d\u4e86\u3002\u6211\u4eec\u7684 <code>cmd_parse</code> \u652f\u6301\u81ea\u5df1\u4f20\u5165\u5206\u9694\u7b26\uff0c\u987a\u4fbf\u8fd8\u652f\u6301\u4e86\u4e00\u4e0b\u5f15\u53f7\u3002</p> <p>\u4e0b\u9762\u662f\u65b0\u7248\u7684 shell \u672c\u4f53\uff1a</p> <p>\u4ee3\u7801 16-9 \u65b0\u7248 shell\uff08kernel/shell.c\uff09 <pre><code>void shell()\n{\n    puts(\"TutorialOS Indev (tags/Indev:WIP, Jun 26 2024, 21:09) [GCC 32bit] on baremetal\"); // \u770b\u7740\u773c\u719f\uff1f\u8fd9\u4e00\u90e8\u5206\u662f\u4ece Python 3 \u91cc\u6a21\u4eff\u7684\n    puts(\"Type \\\"ver\\\" for more information.\\n\"); // \u793a\u4f8b\uff0c\u53ea\u6253\u7b97\u652f\u6301\u8fd9\u4e00\u4e2a\n    while (1) { // \u65e0\u9650\u5faa\u73af\n        print_prompt(); // \u8f93\u51fa\u63d0\u793a\u7b26\n        memset(cmd_line, 0, MAX_CMD_LEN);\n        readline(cmd_line, MAX_CMD_LEN); // \u8f93\u5165\u4e00\u884c\u547d\u4ee4\n        if (cmd_line[0] == 0) continue; // \u5565\u4e5f\u6ca1\u6709\uff0c\u662f\u6362\u884c\uff0c\u76f4\u63a5\u8df3\u8fc7\n        int argc = cmd_parse(cmd_line, argv, ' '); // \u89e3\u6790\u547d\u4ee4\uff0c\u6309\u7167cmd_parse\u7684\u8981\u6c42\u4f20\u5165\uff0c\u9ed8\u8ba4\u5206\u9694\u7b26\u4e3a\u7a7a\u683c\n        for (int i = 0; i &lt; argc; i++) puts(argv[i]); // \u8f93\u51fa\u5206\u6bb5\u51fa\u6765\u7684\u6bcf\u4e00\u4e2a\u53c2\u6570\n    }\n    puts(\"shell: PANIC: WHILE (TRUE) LOOP ENDS! RUNNNNNNN!!!\"); // \u5230\u4e0d\u4e86\uff0c\u4e0d\u89e3\u91ca\n}\n</code></pre></p> <p>\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u6548\u679c\u5982\u4e0b\u56fe\uff1a </p> <p>\uff08\u56fe 16-2 \u6ca1\u90a3\u4e48\u54d1\u7684 shell\uff09</p> <p>\u73b0\u5728\uff0c\u6211\u4eec\u7684 shell \u5df2\u7ecf\u652f\u6301\u7528\u7a7a\u683c\u5206\u5272\u53c2\u6570\uff0c\u5e76\u4e14\u652f\u6301\u628a\u5f15\u53f7\u62ec\u8d77\u6765\u7684\u90e8\u5206\u5f53\u6210\u6574\u4f53\u3002\u53ea\u6709\u4e00\u4e2a\u5f15\u53f7\u6211\u6ca1\u6709\u6d4b\u8bd5\uff0c\u7406\u8bba\u4e0a\u4f1a\u4e00\u76f4\u5ef6\u4f38\u5230\u547d\u4ee4\u672b\u5c3e\u3002</p> <p>\u6700\u540e\uff0c\u662f\u547d\u4ee4\u7684\u6267\u884c\uff0c\u8fd9\u4e00\u90e8\u5206\u6211\u4eec\u5355\u5f00\u4e00\u4e2a <code>cmd_execute</code> \u6765\u505a\uff1a</p> <p>\u4ee3\u7801 16-10 \u547d\u4ee4\u6267\u884c\uff08kernel/shell.c\uff09 <pre><code>void cmd_ver(int argc, char **argv)\n{\n    puts(\"TutorialOS Indev\");\n}\n\nvoid cmd_execute(int argc, char **argv)\n{\n    if (!strcmp(\"ver\", argv[0])) {\n        cmd_ver(argc, argv);\n    } else {\n        printf(\"shell: bad command: %s\\n\", argv[0]);\n    }\n}\n</code></pre></p> <p>\u76ee\u524d\u800c\u8a00\uff0c\u6211\u4eec\u53ea\u652f\u6301\u4e00\u4e2a <code>ver</code> \u5c31\u8db3\u591f\u4e86\u3002</p> <p>\u7528 <code>cmd_execute(argc, argv); // \u6267\u884c</code> \u66ff\u6362 <code>for (int i = 0; i &lt; argc; i++) puts(argv[i]); // \u8f93\u51fa\u5206\u6bb5\u51fa\u6765\u7684\u6bcf\u4e00\u4e2a\u53c2\u6570</code>\uff0c\u7f16\u8bd1\u8fd0\u884c\uff0c\u6548\u679c\u5982\u4e0b\uff1a</p> <p></p> <p>\uff08\u56fe 16-3 ver\u547d\u4ee4\uff09</p> <p>shell \u5c31\u505a\u5230\u8fd9\u91cc\uff0c\u4e0b\u9762\u4e24\u8282\u6211\u4eec\u6765\u5403\u4e00\u76d8\u786c\u83dc\uff1a\u6587\u4ef6\u7cfb\u7edf\u3002\uff08\u60f3\u5f53\u5e74\uff0c\u6211\u88ab\u6587\u4ef6\u7cfb\u7edf\u5361\u4e86\u6574\u6574\u4e00\u5e74\u534a\uff0c\u4ee4\u4eba\u611f\u53f9\uff09</p>"},{"location":"os-tutorial/old/17-fat16-part0/","title":"17 \u5b9e\u73b0FAT16\u6587\u4ef6\u7cfb\u7edf\uff081\uff09\u2014\u2014\u57fa\u7840\u8bbe\u65bd\u5efa\u8bbe\uff1a\u786c\u76d8\u9a71\u52a8\u3001RTC","text":"<p>\u4ec0\u4e48\u662f\u6587\u4ef6\u7cfb\u7edf\u5462\uff1f\u7b80\u800c\u8a00\u4e4b\uff0c\u6587\u4ef6\u7cfb\u7edf\u5c31\u662f\u7ba1\u7406\u6587\u4ef6\u7684\u7cfb\u7edf\u3002\u5f53\u6211\u4eec\u8c08\u53ca\u5bf9\u6587\u4ef6\u7684\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u6587\u4ef6\u7cfb\u7edf\u662f\u52a8\u6001\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0e\u5b83\u4ea4\u4e92\uff1b\u5f53\u6211\u4eec\u8c08\u53ca\u6587\u4ef6\u7cfb\u7edf\u7684\u78c1\u76d8\u7ed3\u6784\u4e4b\u7c7b\u7684\u4e1c\u897f\u7684\u65f6\u5019\uff0c\u6587\u4ef6\u7cfb\u7edf\u53c8\u662f\u9759\u6001\u7684\uff0c\u5b83\u7684\u6bcf\u4e00\u4e2a\u5b57\u8282\u90fd\u6446\u5728\u90a3\u91cc\uff0c\u968f\u4f60\u53ef\u770b\u3002</p> <p>\u672c\u8282\u6211\u4eec\u5148\u4e0d\u7740\u6025\u5b9e\u73b0\u6587\u4ef6\u7cfb\u7edf\uff0c\u4ee5\u53ca\u4ecb\u7ecd\u90a3\u4e2a\u602a\u602a\u7684 FAT16 \u5230\u5e95\u662f\u4e2a\u4ec0\u4e48\u4e1c\u897f\u3002\u6211\u4eec\u5148\u6765\u5b8c\u5584\u4e00\u4e0b\u57fa\u7840\u8bbe\u65bd\u5efa\u8bbe\uff0c\u5199\u4e00\u4e0b\u786c\u76d8\u9a71\u52a8\u4ee5\u53ca RTC\uff08Real-Time Clock\uff0c\u5b9e\u65f6\u65f6\u949f\uff09\u3002</p> <p>\u5f53\u7136\uff0c\u6211\u4eec\u5148\u6311\u8f6f\u67ff\u5b50\u634f\uff0c\u4ece RTC \u5f00\u59cb\u5b9e\u73b0\u3002</p> <p>\u4e0e\u952e\u76d8\u7c7b\u4f3c\uff0cRTC \u4e5f\u662f\u5916\u90e8\u8bbe\u5907\uff0c\u9700\u8981\u4f7f\u7528 <code>in/out</code> \u6307\u4ee4\u4ece\u5bf9\u5e94\u7684\u7aef\u53e3\u6765\u8bfb\u53d6\u6570\u636e\u3002\u8fd9\u4e4b\u4e2d\uff0c\u7aef\u53e3 <code>0x70</code> \u662f\u7d22\u5f15\u5bc4\u5b58\u5668\uff0c\u7528\u6765\u544a\u8bc9 RTC \u4f60\u8981\u8bfb\u4ec0\u4e48\u6570\u636e\uff1b\u7aef\u53e3 <code>0x71</code> \u662f\u6570\u636e\u5bc4\u5b58\u5668\uff0c\u4f60\u60f3\u8bfb\u7684 RTC \u6570\u636e\u5c31\u4ece\u8fd9\u91cc\u8bfb\u51fa\u3002\u67e5\u9605\u8d44\u6599\u53ef\u77e5\uff0c\u5f53\u524d\u65f6\u523b\u7684\u4e16\u7eaa\u3001\u5e74\u3001\u6708\u3001\u65e5\u3001\u65f6\u3001\u5206\u3001\u79d2\u5206\u522b\u5bf9\u5e94\u7740\u7d22\u5f15 <code>0x32</code>\u3001<code>0x9</code>\u3001<code>0x8</code>\u3001<code>0x7</code>\u3001<code>0x4</code>\u3001<code>0x2</code> \u548c <code>0x0</code>\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4ece RTC \u8bfb\u51fa\u7684\u6570\u636e\u4f7f\u7528 8421BCD \u7f16\u7801\uff0c\u9700\u8981\u624b\u52a8\u8f6c\u6362\u4e3a\u5341\u8fdb\u5236\uff1b\u5177\u4f53\u800c\u8a00\uff0c\u662f\u5c06\u8bfb\u51fa\u7684\u6570\u636e\u7684\u9ad84\u4f4d\u5f53\u4f5c\u5341\u4f4d\uff0c\u4f4e4\u4f4d\u5f53\u4f5c\u4e2a\u4f4d\u3002\u8fd8\u6709\u4e00\u70b9\u9700\u8981\u6ce8\u610f\uff0c\u5728\u8bfb\u53d6\u5b8c\u540e\uff0c\u9700\u8981\u5411 <code>0x70</code> \u7aef\u53e3\u53d1\u9001 <code>0x80</code>\uff0c\u8868\u793a\u8bfb\u53d6\u5b8c\u6210\u3002</p> <p>\u597d\u4e86\uff0c\u6211\u4eec\u5c31\u7528\u4e0a\u9762\u4e00\u6bb5\u8bdd\u5b8c\u6574\u5730\u63cf\u8ff0\u4e86 RTC \u7684\u5b9e\u73b0\uff0c\u76f8\u5f53\u7b80\u5355\u5427\uff1f\u90a3\u4e48\uff0c\u5f00\u5de5\u3002</p> <p>\u9996\u5148\uff0c\u521b\u5efa <code>include/cmos.h</code>\uff0c\u6211\u4eec\u6765\u628a\u4e0a\u9762\u7684\u8fd9\u4e00\u5806\u5e38\u6570\u5199\u5728\u4e00\u4e2a\u5730\u65b9\uff1a</p> <p>\u4ee3\u7801 17-1 RTC \u58f0\u660e\uff08include/cmos.h\uff09 <pre><code>#ifndef _CMOS_H_\n#define _CMOS_H_\n\n#include \"common.h\"\n\n#define CMOS_INDEX 0x70\n#define CMOS_DATA  0x71\n\n#define CMOS_CUR_SEC 0x0\n#define CMOS_CUR_MIN 0x2\n#define CMOS_CUR_HOUR 0x4\n#define CMOS_CUR_DAY 0x7\n#define CMOS_CUR_MON 0x8\n#define CMOS_CUR_YEAR 0x9\n#define CMOS_CUR_CEN 0x32\n\n#define bcd2hex(n) (((n &gt;&gt; 4) * 10) + (n &amp; 0xf))\n\ntypedef struct {\n    int year, month, day, hour, min, sec;\n} current_time_t;\n\n#endif\n</code></pre></p> <p>\u4e0d\u4ec5\u5b9a\u4e49\u4e86\u8fd9\u4e9b\u5e38\u91cf\uff0c\u8fd8\u5728\u6700\u540e\u6dfb\u52a0\u4e86 <code>bcd2hex</code> \u548c\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\uff0c\u8fd9\u7eaf\u7cb9\u662f\u4e3a\u4e86\u540e\u7eed\u65b9\u4fbf\u3002</p> <p>\u7136\u540e\uff0c\u7531\u4e8e RTC \u662f\u5916\u8bbe\uff0c\u6211\u4eec\u5728 <code>drivers</code> \u76ee\u5f55\u4e0b\u6dfb\u52a0 <code>cmos.c</code>\uff0c\u6765\u5199\u771f\u6b63\u64cd\u4f5c RTC \u7684\u4ee3\u7801\uff1a</p> <p>\u4ee3\u7801 17-2 \u8bfb\u53d6 RTC\uff08drivers/cmos.c\uff09 <pre><code>#include \"cmos.h\"\n\nstatic uint8_t read_cmos(uint8_t p)\n{\n    uint8_t data;\n    outb(CMOS_INDEX, p);\n    data = inb(CMOS_DATA);\n    outb(CMOS_INDEX, 0x80);\n    return data;\n}\n\nvoid get_current_time(current_time_t *ctime)\n{\n    ctime-&gt;year = bcd2hex(read_cmos(CMOS_CUR_CEN)) * 100 + bcd2hex(read_cmos(CMOS_CUR_YEAR));\n    ctime-&gt;month = bcd2hex(read_cmos(CMOS_CUR_MON));\n    ctime-&gt;day = bcd2hex(read_cmos(CMOS_CUR_DAY));\n    ctime-&gt;hour = bcd2hex(read_cmos(CMOS_CUR_HOUR));\n    ctime-&gt;min = bcd2hex(read_cmos(CMOS_CUR_MIN));\n    ctime-&gt;sec = bcd2hex(read_cmos(CMOS_CUR_SEC));\n}\n</code></pre></p> <p>\u603b\u517120\u884c\uff0c\u6211\u4eec\u5c31\u5b9e\u73b0\u4e86\u5bf9 RTC \u7684\u8bfb\u53d6\u3002\u90a3\u4e48\u8ba9\u6211\u4eec\u8fdb\u5165 <code>kernel/main.c</code> \u6dfb\u52a0\u6d4b\u8bd5\u4ee3\u7801\u770b\u770b\u6548\u679c\uff1a</p> <p>\u4ee3\u7801 17-3 \u6d4b\u8bd5 RTC\uff08drivers/cmos.c\uff09 <pre><code>void kernel_main() // kernel.asm\u4f1a\u8df3\u8f6c\u5230\u8fd9\u91cc\n{\n    monitor_clear();\n    init_gdtidt();\n    init_memory();\n    init_timer(100);\n    init_keyboard();\n    asm(\"sti\");\n\n    task_t *task_a = task_init();\n    task_t *task_shell = create_kernel_task(shell);\n    //task_run(task_shell);\n\n    current_time_t ctime;\n    get_current_time(&amp;ctime);\n    printk(\"%d/%d/%d %d:%d:%d\", ctime.year, ctime.month, ctime.day, ctime.hour, ctime.min, ctime.sec);\n\n    while (1);\n}\n</code></pre></p> <p>\u6211\u4eec\u6ce8\u91ca\u6389\u4e86\u5f00\u59cb\u8fd0\u884c <code>task_shell</code> \u7684\u8fd9\u884c\u4ee3\u7801\uff0c\u56e0\u4e3a\u5728\u8fd9\u4e09\u8282\u91cc\u90fd\u7528\u4e0d\u4e0a\u5b83\u3002</p> <p>\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u6548\u679c\u5982\u4e0b\uff08\u8fd0\u884c\u6548\u679c\u4e0e\u8fd0\u884c\u65f6\u95f4\u6709\u5173\uff0c\u8bf7\u81ea\u884c\u4e0e\u53f3\u4e0b\u89d2\u65f6\u95f4\u5bf9\u7167\uff09\uff1a</p> <p> \uff08\u56fe 17-1 \u8c8c\u4f3c\u6210\u529f\u4e86\uff1f\uff09</p> <p> \uff08\u56fe 17-2 \u5b9e\u9645\u65f6\u95f4\uff09</p> <p>\u6211\u4eec\u89c2\u5bdf\u5230\uff0c\u8fd0\u884c\u65f6\u663e\u793a\u7684 RTC \u65f6\u95f4\u4e0e\u5b9e\u9645\u65f6\u95f4\u76f8\u5dee 8 \u5c0f\u65f6\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u7279\u6b8a\u7684\u6570\u5b57\uff0c\u56e0\u4e3a\u4e2d\u56fd\u6240\u5728\u7684\u65f6\u533a\u5c31\u662f\u4e1c\u516b\u533a\uff08UTC+8\uff09\u3002\u7136\u800c\uff0c\u5728\u6211\u6362\u7528 VMWare \u865a\u62df\u673a\u6d4b\u8bd5\u7684\u65f6\u5019\uff0c\u65f6\u949f\u53c8\u6062\u590d\u6b63\u5e38\u4e86\u3002\u770b\u6765\u8fd9\u4e00\u73b0\u8c61\u7684\u51fa\u73b0\u4e0e\u4e0d\u540c\u865a\u62df\u673a\u6a21\u62df RTC \u7684\u7b56\u7565\u6709\u5173\u3002</p> <p>\u4e3a\u4e86\u4e0e\u73b0\u5b9e\u76f8\u7b26\u5408\uff0c\u6211\u4eec\u9009\u62e9\u624b\u52a8\u8c03\u8282 RTC \u7684\u8f93\u51fa\uff0c\u8ba9\u5b83\u52a0\u4e0a 8 \u5c0f\u65f6\u3002</p> <p>\u4ee3\u7801 17-4 \u624b\u52a8\u52a0\u4e0a 8 \u5c0f\u65f6\uff08drivers/cmos.c\uff09 <pre><code>#include \"cmos.h\"\n\nstatic uint8_t read_cmos(uint8_t p)\n{\n    uint8_t data;\n    outb(CMOS_INDEX, p);\n    data = inb(CMOS_DATA);\n    outb(CMOS_INDEX, 0x80);\n    return data;\n}\n\n#ifdef NEED_UTC_8\nstatic bool is_leap_year(int year)\n{\n    if (year % 400 == 0) return true;\n    return year % 4 == 0 &amp;&amp; year % 100 != 0;\n}\n#endif\n\nvoid get_current_time(current_time_t *ctime)\n{\n    ctime-&gt;year = bcd2hex(read_cmos(CMOS_CUR_CEN)) * 100 + bcd2hex(read_cmos(CMOS_CUR_YEAR));\n    ctime-&gt;month = bcd2hex(read_cmos(CMOS_CUR_MON));\n    ctime-&gt;day = bcd2hex(read_cmos(CMOS_CUR_DAY));\n    ctime-&gt;hour = bcd2hex(read_cmos(CMOS_CUR_HOUR));\n    ctime-&gt;min = bcd2hex(read_cmos(CMOS_CUR_MIN));\n    ctime-&gt;sec = bcd2hex(read_cmos(CMOS_CUR_SEC));\n#ifdef NEED_UTC_8\n    int day_of_months[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    if (is_leap_year(ctime-&gt;year)) day_of_months[2]++;\n    // \u6821\u6b63\u65f6\u95f4\n    ctime-&gt;hour += 8;\n    if (ctime-&gt;hour &gt;= 24) ctime-&gt;hour -= 24, ctime-&gt;day++;\n    if (ctime-&gt;day &gt; day_of_months[ctime-&gt;month]) ctime-&gt;day = 1, ctime-&gt;month++;\n    if (ctime-&gt;month &gt; 12) ctime-&gt;month = 1, ctime-&gt;year++;\n#endif\n}\n</code></pre></p> <p>\u8fd9\u91cc\u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f\u5bf9\u8fb9\u754c\u60c5\u51b5\u7684\u8003\u8651\uff0c\u5982\u679c\u52a0\u4e0a 8 \u5c0f\u65f6\u540e\u521a\u597d\u8de8\u5929\u3001\u8de8\u6708\u751a\u81f3\u662f\u8de8\u5e74\uff0c\u6211\u4eec\u90fd\u9700\u8981\u505a\u76f8\u5e94\u7684\u5904\u7406\uff0c\u7531\u6b64\u5e26\u6765\u7684\u8fd8\u6709\u95f0\u5e74\u65f6 2 \u6708\u5929\u6570\u7684\u6709\u5173\u95ee\u9898\uff0c\u4f46\u603b\u4f53\u4e0a\u4e5f\u4e0d\u7b97\u590d\u6742\u3002</p> <p>\u540c\u6837\u8fd8\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e3a\u4e86\u5e94\u5bf9\u4e0d\u540c\u865a\u62df\u673a\u95f4\u7684\u4e0d\u540c\u6a21\u62df\u60c5\u51b5\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86\u5b8f\u5b9a\u4e49 <code>NEED_UTC_8</code>\uff0c\u5f53\u5b9a\u4e49\u8fd9\u4e2a\u5b8f\u65f6\u5c31\u4f1a\u81ea\u52a8\u589e\u52a0\u7ed9 RTC \u6dfb\u52a0 8 \u5c0f\u65f6\u7684\u5904\u7406\uff0c\u5426\u5219\u5c31\u662f\u4ee3\u7801 17-2 \u7684\u6837\u5b50\u3002</p> <p>\u5982\u679c\u4f60\u59cb\u7ec8\u9009\u62e9\u7528 QEMU \u8fdb\u884c\u6a21\u62df\uff0c\u8bb0\u5f97\u5728 <code>include/cmos.h</code> \u4e2d\u52a0\u5165\u4e00\u884c <code>#define NEED_UTC_8</code>\u3002</p> <p>\u5728\u624b\u52a8\u52a0\u5b8c 8 \u5c0f\u65f6\u4e4b\u540e\uff0c\u518d\u6b21\u7f16\u8bd1\u8fd0\u884c\uff0c\u6548\u679c\u5982\u4e0b\uff08\u8fd0\u884c\u6548\u679c\u4e0e\u8fd0\u884c\u65f6\u95f4\u6709\u5173\uff0c\u8bf7\u81ea\u884c\u4e0e\u53f3\u4e0b\u89d2\u65f6\u95f4\u5bf9\u7167\uff09\uff1a</p> <p> \uff08\u56fe 17-3 \u8fd9\u4e0b\u5bf9\u4e86\uff09</p> <p> \uff08\u56fe 17-4 \u5f53\u524d\u65f6\u95f4\uff09</p> <p>ok\uff0c\u90a3\u4e48 RTC \u5c31\u8fd9\u6837\u88ab\u6211\u4eec\u8f7b\u677e\u62ff\u4e0b\u3002\u7136\u540e\u662f\u4e0b\u4e00\u4e2a\u636e\u70b9\uff1a\u786c\u76d8\u9a71\u52a8\u3002</p> <p>\u786c\u76d8\uff0c\u663e\u7136\u4e5f\u662f\u5916\u90e8\u8bbe\u5907\uff0c\u5982\u679c\u8981\u771f\u6b63\u8be6\u7ec6\u5730\u53bb\u5b9e\u73b0\u786c\u76d8\uff0c\u90a3\u8db3\u591f\u5199\u51fa\u8fd9\u4e2a OS \u73b0\u5728\u7684\u4ee3\u7801\u4e09\u5206\u4e4b\u4e00\u7684\u4ee3\u7801\u91cf\u7684\u9a71\u52a8\u6765\uff08osdev\u4e0a\u7684 IDE \u9a71\u52a8\u6709 749 \u884c\uff09\u3002\u4e0d\u8fc7\uff0c\u53ea\u662f\u8bfb\u53d6\u548c\u5199\u5165\u7684\u8bdd\uff0c\u5b9e\u9645\u4e0a\u6709\u6377\u5f84\u53ef\u8d70\uff0c\u65e0\u9700\u50cf osdev \u4e0a\u4e00\u6837\u8d39\u52b2\u7ed5\u9053 PCI\uff0c\u53ea\u9700\u8981\u51e0\u4e2a\u7b80\u5355\u7684\u7aef\u53e3\u64cd\u4f5c\u5373\u53ef\u3002</p> <p>\u5373\u4f7f\u662f\u8d70\u6377\u5f84\uff0c\u786c\u76d8\u7684\u7aef\u53e3\u64cd\u4f5c\u4ecd\u7136\u591a\u4e14\u6742\uff0c\u5177\u4f53\u53ef\u89c1\u4e0b\u8868\uff08\u4ecd\u65e7\u6765\u81ea\u300aOrange'S\uff1a\u4e00\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u7684\u5b9e\u73b0\u300b\uff09\uff1a  \uff08\u56fe 17-5 \u786c\u76d8\u7aef\u53e3\u5217\u8868\uff09</p> <p>\u4ee5\u4e0a\u7684\u90e8\u5206\u5c31\u662f\u6211\u4eec\u9700\u8981\u7528\u5230\u7684\u90e8\u5206\uff0c\u5176\u4e2d\u7684 <code>Secondary</code> \u4e00\u5217\u4ee3\u8868\u7b2c\u4e8c\u5757\u786c\u76d8\uff0c\u53ef\u4ee5\u4e0d\u7ba1\uff0c\u53cd\u6b63\u5230\u6700\u540e\u53ea\u9700\u8981\u64cd\u4f5c\u7b2c\u4e00\u5757\u786c\u76d8\u3002</p> <p>\u60f3\u8981\u8bfb\u5199\u4e00\u5757\u786c\u76d8\u7684\u4e00\u4e2a\u6247\u533a\uff0c\u5927\u6982\u64cd\u4f5c\u662f\u8fd9\u6837\u7684\uff1a</p> <p>1.\u7b49\u5f85\u53ef\u80fd\u5b58\u5728\u7684\u4e0a\u4e00\u4e2a\u786c\u76d8\u64cd\u4f5c\u5b8c\u6210\u3002</p> <p>2.\u901a\u8fc7\u5411 0x1f2~0x1f6 \u7aef\u53e3\u5199\u5165\u9002\u5f53\u6570\u636e\uff0c\u544a\u77e5\u786c\u76d8\u9700\u8981\u64cd\u4f5c\u7684\u6247\u533a\u7f16\u53f7\u53ca\u4e2a\u6570\u3002</p> <p>3.\u5411 0x1f7 \u7aef\u53e3\u5199\u5165 0x20\uff08\u4ee3\u8868\u8bfb\uff09\u6216\u8005 0x30\uff08\u4ee3\u8868\u5199\uff09\u3002</p> <p>4.\u7b49\u5f85\u786c\u76d8\u64cd\u4f5c\u5b8c\u6210\u3002</p> <p>5.\u4ece 0x1f0 \u7aef\u53e3\u8bfb\u51fa\u6570\u636e\u6216\u5411 0x1f0 \u7aef\u53e3\u5199\u5165\u6570\u636e\uff0c\u4e00\u6b21\u4e24\u4e2a\u5b57\u8282\u3002</p> <p>\u770b\u4e0a\u53bb\u6bd4\u8f83\u7b80\u5355\uff0c\u4f46\u662f\u6709\u4e00\u4e9b\u5177\u4f53\u7684\u6280\u672f\u7ec6\u8282\u9700\u8981\u6ce8\u610f\uff0c\u8fd8\u662f\u76f4\u63a5\u770b\u4ee3\u7801\u5427\uff1a</p> <p>\u4ee3\u7801 17-5 \u786c\u76d8\u9a71\u52a8\uff1a\u7b49\u5f85\u4e0a\u4e00\u4e2a\u786c\u76d8\u64cd\u4f5c\u5b8c\u6210\uff0c\u6307\u5b9a\u64cd\u4f5c\u6247\u533a\uff08drivers/hd.c\uff09 <pre><code>#include \"common.h\"\n\n// \u7b49\u5f85\u78c1\u76d8\uff0c\u76f4\u5230\u5b83\u5c31\u7eea\nstatic void wait_disk_ready()\n{\n    while (1) {\n        uint8_t data = inb(0x1f7); // \u8f93\u5165\u65f6\uff0c0x1f7\u7aef\u53e3\u4e3a\u4e3b\u786c\u76d8\u72b6\u6001\u5bc4\u5b58\u5668\n        if ((data &amp; 0x88) == 0x08) { // \u7b2c7\u4f4d\uff1a\u786c\u76d8\u5fd9\uff0c\u7b2c3\u4f4d\uff1a\u786c\u76d8\u5df2\u7ecf\u51c6\u5907\u597d\n            // \u63d0\u53d6\u7b2c7\u4f4d\u548c\u7b2c3\u4f4d\uff0c\u5224\u65ad\u662f\u5426\u4e3a0x08\uff0c\u5373\u786c\u76d8\u4e0d\u5fd9\u4e14\u5df2\u51c6\u5907\u597d\n            return; // \u7b49\u5b8c\u4e86\n        }\n    }\n}\n\n// \u9009\u62e9\u8981\u64cd\u4f5c\u6247\u533a\nstatic void select_sector(int lba)\n{\n    // \u7b2c\u4e00\u6b65\uff1a\u54110x1f2\u7aef\u53e3\u6307\u5b9a\u8981\u8bfb\u53d6\u6247\u533a\u6570\n    // \u8f93\u51fa\u65f6\uff0c0x1f2\u7aef\u53e3\u4e3a\u64cd\u4f5c\u6247\u533a\u6570\n    outb(0x1f2, 1);\n    // \u7b2c\u4e8c\u6b65\uff1a\u5b58\u5165\u5199\u5165\u5730\u5740\n    // 0x1f3~0x1f5\uff1aLBA\u7684\u4f4e\u4e2d\u9ad88\u4f4d\n    // 0x1f6\uff1aREG_DEVICE\uff0cDrive | Head | LBA (24~27\u4f4d)\n    // \u5728\u5b9e\u9645\u64cd\u4f5c\u4e2d\uff0c\u53ea\u6709\u4e00\u4e2a\u786c\u76d8\uff0cDrive | Head = 0xe0\n    outb(0x1f3, lba);\n    outb(0x1f4, lba &gt;&gt; 8);\n    outb(0x1f5, lba &gt;&gt; 16);\n    outb(0x1f6, (((lba &gt;&gt; 24) &amp; 0x0f) | 0xe0));\n}\n</code></pre></p> <p>\u4ee5\u4e0a\u4e24\u4e2a\u51fd\u6570\u4fbf\u662f\u6211\u524d\u9762\u63d0\u5230\u8fc7\u7684\u201c\u5177\u4f53\u7ec6\u8282\u201d\uff0c\u6709\u5173\u8bf4\u660e\u5df2\u7ecf\u5199\u5728\u6ce8\u91ca\u4e2d\u4e86\u3002</p> <p>\u6216\u8bb8\u6709\u4eba\u8981\u95ee\uff1a</p> <p>\u90a3\u4f60\u4e3a\u4ec0\u4e48\u4e00\u6b21\u53ea\u64cd\u4f5c\u4e00\u4e2a\u6247\u533a\u5462\uff1f\u4e00\u6b21\u64cd\u4f5c\u591a\u4e2a\u6247\u533a\u4e0d\u597d\u5417\uff1f</p> <p>\u4f60\u8bf4\u5f97\u5bf9\uff0c\u4f46\u662f\uff0c\u7531\u4e8e QEMU \u7684\u95ee\u9898\uff08\u8fd9\u662f\u7b2c\u51e0\u904d\u51fa\u73b0\u4e86\uff09\uff0c\u4e00\u6b21\u64cd\u4f5c\u591a\u4e2a\u6247\u533a\u4f1a\u83ab\u540d\u5176\u5999\u5361\u4f4f\uff0c\u6240\u4ee5\u53ea\u597d\u4e00\u6b21\u64cd\u4f5c\u4e00\u4e2a\u6247\u533a\u4e86\u3002</p> <p>\u65e2\u7136\u6280\u672f\u7ec6\u8282\u5df2\u7ecf\u586b\u5145\u4e0a\uff0c\u5355\u72ec\u8bfb\u53d6\u548c\u5199\u5165\u4e00\u4e2a\u6247\u533a\u7684\u51fd\u6570\u4e5f\u5c31\u53ef\u4ee5\u5199\u4e86\uff1a</p> <p>\u4ee3\u7801 17-6 \u786c\u76d8\u9a71\u52a8\uff1a\u8bfb\u53d6\u548c\u5199\u5165\u4e00\u4e2a\u6247\u533a\uff08drivers/hd.c\uff09 <pre><code>// \u8bfb\u53d6\u4e00\u4e2a\u6247\u533a\nstatic void read_a_sector(int lba, uint32_t buffer)\n{\n    while (inb(0x1f7) &amp; 0x80); // \u7b49\u786c\u76d8\u4e0d\u5fd9\u4e86\u518d\u53d1\u9001\u547d\u4ee4\uff0c\u5177\u4f53\u610f\u4e49\u89c1wait_disk_ready\n    select_sector(lba); // \u7b2c\u4e8c\u6b65\uff1a\u8bbe\u7f6e\u8bfb\u5199\u6247\u533a\n    outb(0x1f7, 0x20); // \u7b2c\u4e09\u6b65\uff1a\u5ba3\u5e03\u8981\u8bfb\u6247\u533a\n    // 0x1f7\u5728\u88ab\u5199\u5165\u65f6\u4e3aREG_COMMAND\uff0c\u5199\u5165\u8bfb\u5199\u547d\u4ee4\n    wait_disk_ready(); // \u7b2c\u56db\u6b65\uff1a\u68c0\u6d4b\u786c\u76d8\u72b6\u6001\uff0c\u76f4\u5230\u786c\u76d8\u5c31\u7eea\n    // \u7b2c\u4e94\u6b65\uff1a\u4ece0x1f0\u8bfb\u53d6\u6570\u636e\n    // 0x1f0\u88ab\u8bfb\u5199\u65f6\u4e3aREG_DATA\uff0c\u8bfb\u51fa\u6216\u5199\u5165\u6570\u636e\n    for (int i = 0; i &lt; 256; i++) {\n        // \u6bcf\u6b21\u786c\u76d8\u4f1a\u53d1\u90012\u4e2a\u5b57\u8282\u6570\u636e\n        uint16_t data = inw(0x1f0);\n        *((uint16_t *) buffer) = data; // \u5b58\u5165buf\n        buffer += 2;\n    }\n}\n\n// \u5199\u5165\u4e00\u4e2a\u6247\u533a\n// \u5199\u5165\u4e0e\u8bfb\u53d6\u57fa\u672c\u4e00\u81f4\uff0c\u4ec5\u6709\u7684\u4e0d\u540c\u4e4b\u5904\u662f\u5199\u5165\u7684\u547d\u4ee4\u548c\u5199\u6570\u636e\u7684\u64cd\u4f5c\nstatic void write_a_sector(int lba, uint32_t buffer)\n{\n    while (inb(0x1f7) &amp; 0x80); // \u7b49\u786c\u76d8\u4e0d\u5fd9\u4e86\u518d\u53d1\u9001\u547d\u4ee4\uff0c\u5177\u4f53\u610f\u4e49\u89c1wait_disk_ready\n    select_sector(lba); // \u7b2c\u4e8c\u6b65\uff1a\u8bbe\u7f6e\u8bfb\u5199\u6247\u533a\n    outb(0x1f7, 0x30); // \u7b2c\u4e09\u6b65\uff1a\u5ba3\u5e03\u8981\u5199\u6247\u533a\n    // 0x1f7\u5728\u88ab\u5199\u5165\u65f6\u4e3aREG_COMMAND\uff0c\u5199\u5165\u8bfb\u5199\u547d\u4ee4\n    wait_disk_ready(); // \u7b2c\u56db\u6b65\uff1a\u68c0\u6d4b\u786c\u76d8\u72b6\u6001\uff0c\u76f4\u5230\u786c\u76d8\u5c31\u7eea\n    // \u7b2c\u4e94\u6b65\uff1a\u4ece0x1f0\u8bfb\u53d6\u6570\u636e\n    // 0x1f0\u88ab\u8bfb\u5199\u65f6\u4e3aREG_DATA\uff0c\u8bfb\u51fa\u6216\u5199\u5165\u6570\u636e\n    for (int i = 0; i &lt; 256; i++) {\n        // \u6bcf\u6b21\u786c\u76d8\u4f1a\u53d1\u90012\u4e2a\u5b57\u8282\u6570\u636e\n        uint16_t data = *((uint16_t *) buffer); // \u8bfb\u53d6\u6570\u636e\n        outw(0x1f0, data); // \u5199\u5165\u7aef\u53e3\n        buffer += 2;\n    }\n}\n</code></pre></p> <p>\u8fd9\u91cc\u5176\u5b9e\u6709\u610f\u5730\u5ffd\u7565\u4e86\u4e00\u4e2a\u7ec6\u8282\uff1a\u786c\u76d8\u64cd\u4f5c\u6267\u884c\u5b8c\u540e\uff0c\u4f1a\u53d1\u9001\u4e00\u4e2a\u786c\u76d8\u4e2d\u65ad\u3002\u4e0d\u8fc7\uff0c\u7531\u4e8e\u6211\u4eec\u5e76\u6ca1\u6709\u7f16\u5199\u786c\u76d8\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\uff0c\u56e0\u6b64\u5b83\u4f1a\u88ab\u6211\u4eec\u7684\u6846\u67b6\u81ea\u52a8\u5ffd\u7565\uff0c\u770b\u6765\u51e0\u8282\u4ee5\u524d\u6211\u4eec\u6253\u7684\u5730\u57fa\u8fd8\u662f\u5f88\u6709\u7528\u7684\u3002</p> <p>\u8bfb\u5199\u591a\u4e2a\u6247\u533a\u5c31\u662f\u5bf9\u8bfb\u5199\u5355\u4e2a\u6247\u533a\u7684\u7b80\u5355\u91cd\u590d\uff1a</p> <p>\u4ee3\u7801 17-7 \u786c\u76d8\u9a71\u52a8\uff1a\u8fde\u7eed\u8bfb\u5199\u591a\u4e2a\u6247\u533a\uff08drivers/hd.c\uff09 <pre><code>// \u8bfb\u53d6\u786c\u76d8\nstatic void read_disk(int lba, int sec_cnt, uint32_t buffer)\n{\n    for (int i = 0; i &lt; sec_cnt; i++) {\n        read_a_sector(lba, buffer); // \u4e00\u6b21\u8bfb\u4e00\u4e2a\u6247\u533a\n        lba++; // \u4e0b\u4e00\u4e2a\u6247\u533a\n        buffer += 512; // buffer\u4e5f\u8981\u6307\u5411\u4e0b\u4e00\u4e2a\u6247\u533a\n    }\n}\n\n// \u5199\u5165\u786c\u76d8\nstatic void write_disk(int lba, int sec_cnt, uint32_t buffer)\n{\n    for (int i = 0; i &lt; sec_cnt; i++) {\n        write_a_sector(lba, buffer); // \u4e00\u6b21\u5199\u4e00\u4e2a\u6247\u533a\n        lba++; // \u4e0b\u4e00\u4e2a\u6247\u533a\n        buffer += 512; // buffer\u4e5f\u8981\u6307\u5411\u4e0b\u4e00\u4e2a\u6247\u533a\n    }\n}\n</code></pre></p> <p>\u6700\u540e\u662f\u4e24\u4e2a\u5305\u88c5\u51fd\u6570\u4f5c\u4e3a\u516c\u5f00\u7684\u63a5\u53e3\uff0c\u4e0d\u540c\u4e4b\u5904\u4ec5\u4ec5\u662f\u7528 <code>void *</code> \u66ff\u4ee3 <code>uint32_t</code> \u4f5c\u4e3a\u7f13\u51b2\u533a\u7c7b\u578b\uff1a</p> <p>\u4ee3\u7801 17-8 \u786c\u76d8\u9a71\u52a8\uff1a\u6700\u7ec8\u66b4\u9732\u7684\u63a5\u53e3\uff08drivers/hd.c\uff09 <pre><code>// \u5305\u88c5\nvoid hd_read(int lba, int sec_cnt, void *buffer)\n{\n    read_disk(lba, sec_cnt, (uint32_t) buffer);\n}\n\nvoid hd_write(int lba, int sec_cnt, void *buffer)\n{\n    write_disk(lba, sec_cnt, (uint32_t) buffer);\n}\n</code></pre></p> <p>\u597d\uff0c\u786c\u76d8\u9a71\u52a8\u5230\u6b64\u7ed3\u675f\uff0c\u4f46\u662f\u600e\u4e48\u6d4b\u8bd5\u5462\uff1f\u663e\u7136\uff0c\u8fd9\u65f6\u5e76\u4e0d\u5b58\u5728\u4e00\u4e2a\u865a\u62df\u786c\u76d8\u3002</p> <p>\u4e3a\u4e86\u540e\u9762\u884c\u6587\u65b9\u4fbf\uff0c\u540c\u65f6\u4e5f\u662f\u4e3a\u4e86\u914d\u7f6e\u73af\u5883\u65b9\u4fbf\uff0c\u8fd9\u91cc\u5f15\u5165\u6211\u81ea\u5236\u7684\u4e00\u4e2a\u5f00\u6e90\u5de5\u5177\uff1amyfattools\uff0c\u4f7f\u7528\u5b83\u53ef\u4ee5\u65b9\u4fbf\u5730\u5bf9\u865a\u62df\u786c\u76d8\u8fdb\u884c\u64cd\u4f5c\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u521b\u5efa\u3001\u683c\u5f0f\u5316\u3001\u62f7\u8d1d\u6587\u4ef6\u8fdb\u51fa\u7b49\u7b49\uff0c\u76ee\u524d\u5df2\u7ecf\u5728 Windows 7\u3001Windows 11 \u548c iOS \u4e0a\u8fdb\u884c\u8fc7\u6d4b\u8bd5\uff08\u5b9e\u9645\u4e0a myfattools \u5c31\u662f\u5728\u8fd9\u4e09\u79cd\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u5f00\u53d1\u7684\uff09\u3002\u4e3a\u4e86\u8de8\u5e73\u53f0\u9700\u8981 \u56e0\u4e3a\u6211\u61d2\uff0c\u8bf7\u8bfb\u8005\u81ea\u884c\u4e0b\u8f7d\u8fd9\u51e0\u4e2a <code>.c</code> \u6587\u4ef6\uff0c\u7136\u540e\u7528 <code>gcc</code> \u81ea\u884c\u7f16\u8bd1\u4e3a\u4e8c\u8fdb\u5236\uff0c\u653e\u5728\u53ef\u4ee5\u968f\u65f6\u8c03\u7528\u5230\u7684\u5730\u65b9\uff08\u6bd4\u5982\u8fd9\u4e2a\u9879\u76ee\u7684\u6839\u76ee\u5f55\u5904\uff09\u4ee5\u5907\u8c03\u7528\u3002</p> <p>\uff08\u6ce8\uff1a\u7531\u4e8e\u6b64\u7a0b\u5e8f\u76ee\u524d\u540d\u4e49\u4e0a\u6b63\u5728\u91cd\u6784\uff0c\u6240\u4ee5\u8bf7\u4ee5 old \u6587\u4ef6\u5939\u4e2d\u7684\u5185\u5bb9\u4e3a\u51c6\u3002\u5f53\u7136\u5b9e\u9645\u4e0a\u91cd\u6784\u5df2\u7ecf\u505c\u6ede\u4e86\u3002\uff09</p> <p>\u672c\u6b21\u6d4b\u8bd5\u9700\u8981\u7528\u5230\u7684\u7a0b\u5e8f\u4e3a <code>ftimgcreate</code> \u548c <code>ftformat</code>\uff0c\u786e\u8ba4\u8fd9\u4e24\u4e2a\u7a0b\u5e8f\u662f\u5426\u90fd\u5df2\u5b58\u5728\u4e14\u53ef\u4f9b\u8c03\u7528\uff1a</p> <p>  \uff08\u56fe 17-6 \u7a0b\u5e8f\u5b58\u5728\u60c5\u51b5\uff09</p> <p>\u5982\u679c\u5728\u547d\u4ee4\u884c\u8f93\u5165 <code>ftimgcreate</code> \u4e0e <code>ftformat</code> \u540e\uff0c\u8f93\u51fa\u5982\u4e0a\u4e24\u56fe\u6240\u793a\uff08\u6216\u7c7b\u4f3c\uff09\uff0c\u5219\u8bf4\u660e\u8fd9\u4e24\u4e2a\u7a0b\u5e8f\u914d\u7f6e\u76f8\u5f53\u6210\u529f\uff1b\u5426\u5219\uff0c\u8bf7\u68c0\u67e5\u662f\u5426\u628a\u8fd9\u4e24\u4e2a\u7a0b\u5e8f\u653e\u5728\u4e86\u6b63\u786e\u7684\u5730\u65b9\u3002</p> <p>\u5728\u547d\u4ee4\u884c\u4e2d\u6267\u884c\u8fd9\u4e24\u6761\u547d\u4ee4\uff1a</p> <p> \uff08\u56fe 17-7 \u6267\u884c\u547d\u4ee4\uff09</p> <p>\u82e5\u65e0\u8fd4\u56de\u6d88\u606f\uff0c\u5219\u8bf4\u660e\u6210\u529f\u3002\u73b0\u5728 <code>hd.img</code> \u5c31\u662f\u4e00\u4e2a\u6709\u6570\u636e\u7684\u865a\u62df\u786c\u76d8\u4e86\u3002</p> <p>\u5728 <code>main.c</code> \u4e2d\u5c06 <code>kernel_main</code> \u4fee\u6539\u5982\u4e0b\uff1a</p> <p>\u4ee3\u7801 17-9 \u6d4b\u8bd5\u786c\u76d8\u7528 <code>kernel_main</code>\uff08kernel/main.c\uff09 <pre><code>void kernel_main() // kernel.asm\u4f1a\u8df3\u8f6c\u5230\u8fd9\u91cc\n{\n    monitor_clear();\n    init_gdtidt();\n    init_memory();\n    init_timer(100);\n    init_keyboard();\n    asm(\"sti\");\n\n    task_t *task_a = task_init();\n    task_t *task_shell = create_kernel_task(shell);\n    //task_run(task_shell);\n\n    char first_sect[512] = {0};\n    hd_read(0, 1, first_sect);\n    printk(first_sect);\n\n    while (1);\n}\n</code></pre></p> <p>\u5b9e\u9645\u4e0a\u5c31\u662f\u8bfb\u53d6\u7b2c\u4e00\u4e2a\u6247\u533a\u7684\u5185\u5bb9\u3002</p> <p>\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u6548\u679c\u5982\u56fe\uff1a  \uff08\u56fe 17-8 \u5565\u4e5f\u6ca1\u6709\uff1f\uff09</p> <p>\u4ec0\u4e48\u90fd\u6ca1\u6709\u8f93\u51fa\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u8fd8\u6ca1\u6709\u5728 QEMU \u4e0a\u6302\u8f7d\u8fd9\u4e2a\u865a\u62df\u786c\u76d8\uff0c\u4fee\u6539 <code>Makefile</code> \u4e2d\u7684 <code>run</code> \u6307\u4ee4\u5982\u4e0b\uff1a</p> <p>\u4ee3\u7801 17-10 <code>Makefile</code> \u4e2d\u7684 <code>run</code>\uff08Makefile\uff09 <pre><code>run : a.img\n    qemu-system-i386 -fda a.img -hda hd.img -boot a\n</code></pre></p> <p>\u5728\u6302\u8f7d\u786c\u76d8\u7684\u540c\u65f6\u6307\u5b9a\u4ece\u8f6f\u76d8\u542f\u52a8\uff0c\u56e0\u4e3a\u786c\u76d8\u91cc\u6839\u672c\u5565\u90fd\u6ca1\u6709\uff0c\u4ece\u786c\u76d8\u542f\u52a8\u5c31\u5e9f\u4e86\u3002</p> <p>\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u6548\u679c\u5982\u56fe\uff1a  \uff08\u56fe 17-9 \u6210\u529f\uff09  \uff08\u56fe 17-10 \u786c\u76d8\u5185\u771f\u5b9e\u6570\u636e\uff09</p> <p>\u5728\u53bb\u6389\u4e0d\u53ef\u6253\u5370\u5b57\u7b26\u540e\uff0c\u8f93\u51fa\u4e0e\u786c\u76d8\u5185\u771f\u5b9e\u6570\u636e\u4e00\u81f4\u3002\u7531\u4e8e <code>FTFORMAT</code> \u540e\u7d27\u8ddf\u7740\u5c31\u662f <code>00</code>\uff0c\u6240\u4ee5\u540e\u9762\u7684\u95ee\u53f7\u6ca1\u6709\u8f93\u51fa\u3002\u603b\u4e4b\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u6211\u4eec\u7684\u786c\u76d8\u9a71\u52a8\u5df2\u7ecf\u6b63\u5e38\u5de5\u4f5c\u4e86\u3002</p> <p>\u90a3\u4e48\uff0c\u5b9e\u73b0 FAT16 \u7684\u57fa\u5efa\u5df2\u7ecf\u57fa\u672c\u94fa\u597d\uff0c\u4e0b\u9762\u7684\u5de5\u4f5c\u5c31\u662f\u4e86\u89e3\u4ec0\u4e48\u662f FAT16\uff0c\u7136\u540e\u52a8\u624b\u5b9e\u8df5\u4e86\u3002</p>"},{"location":"os-tutorial/old/18-fat16-part1/","title":"18 \u5b9e\u73b0FAT16\u6587\u4ef6\u7cfb\u7edf\uff082\uff09\u2014\u2014\u683c\u5f0f\u5316\u3001\u6253\u5f00\u6587\u4ef6\u3001\u521b\u5efa\u6587\u4ef6","text":"<p>\u4ec0\u4e48\u662f FAT16 \u6587\u4ef6\u7cfb\u7edf\u5462\uff1f\u8fd9\u5c31\u6d89\u53ca\u5230\u4e00\u6bb5\u6bd4\u8f83\u957f\u7684\u79d1\u5b66\u5386\u53f2\uff0c\u603b\u4e4b\uff0cFAT16 \u6587\u4ef6\u7cfb\u7edf\u662f\u7531\u5fae\u8f6f\u516c\u53f8\u81ea\u4e3b\u7814\u53d1\u7684\u4e00\u6b3e\u2026\u2026\uff08\u540e\u9762\u5fd8\u4e86\uff09</p> <p>FAT16 \u6587\u4ef6\u7cfb\u7edf\u7531\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\u7ec4\u6210\uff1a\u5f15\u5bfc\u6247\u533a\u3001FAT \u8868\u3001\u6839\u76ee\u5f55\u533a\u4ee5\u53ca\u6570\u636e\u533a\u3002\u5176\u4e2d\uff0c\u5f15\u5bfc\u6247\u533a\u5c31\u662f\u5355\u72ec\u7684\u4e00\u4e2a\u6247\u533a\uff1bFAT \u8868\u5171\u4e24\u4efd\uff0c\u4e92\u4e3a\u5907\u4efd\uff0c\u5404\u5360 32 \u4e2a\u6247\u533a\uff1b\u6839\u76ee\u5f55\u533a\u5360 32 \u4e2a\u6247\u533a\uff1b\u6570\u636e\u533a\u5360\u636e\u5269\u4f59\u90e8\u5206\u3002FAT \u8868\u548c\u6570\u636e\u533a\u6211\u4eec\u653e\u5728\u4e0b\u4e00\u8282\u6765\u8bb2\uff0c\u672c\u8282\u6211\u4eec\u53ea\u5904\u7406\u5f15\u5bfc\u6247\u533a\u548c\u6839\u76ee\u5f55\u533a\u3002</p> <p>\u5f15\u5bfc\u6247\u533a\u7684\u7ed3\u6784\u548c\u524d\u9762\u7684\u56fe 2-1 \u5b8c\u5168\u4e00\u81f4\uff0c\u5728\u8fd9\u91cc\u91cd\u65b0\u653e\u4e00\u904d\uff1a</p> <p></p> <p>\uff08\u56fe 18-1 FAT12/16 \u5f15\u5bfc\u6247\u533a\u7ed3\u6784\uff09</p> <p>\u5b83\u5bf9\u5e94\u7684\u4ee3\u7801\u5982\u4ee3\u7801 18-1 \u6240\u793a\uff1a</p> <p>\u4ee3\u7801 18-1 <code>FAT16</code> \u5f15\u5bfc\u6247\u533a\u7ed3\u6784\uff08include/file.h\uff09 <pre><code>typedef struct FAT_BPB_HEADER {\n    unsigned char BS_jmpBoot[3];\n    unsigned char BS_OEMName[8];\n    unsigned short BPB_BytsPerSec;\n    unsigned char BPB_SecPerClust;\n    unsigned short BPB_RsvdSecCnt;\n    unsigned char BPB_NumFATs;\n    unsigned short BPB_RootEntCnt;\n    unsigned short BPB_TotSec16;\n    unsigned char BPB_Media;\n    unsigned short BPB_FATSz16;\n    unsigned short BPB_SecPerTrk;\n    unsigned short BPB_NumHeads;\n    unsigned int BPB_HiddSec;\n    unsigned int BPB_TotSec32;\n    unsigned char BS_DrvNum;\n    unsigned char BS_Reserved1;\n    unsigned char BS_BootSig;\n    unsigned int BS_VolID;\n    unsigned char BS_VolLab[11];\n    unsigned char BS_FileSysType[8];\n    unsigned char BS_BootCode[448];\n    unsigned short BS_BootEndSig;\n} __attribute__((packed)) bpb_hdr_t;\n</code></pre></p> <p>\u60f3\u8981\u521b\u5efa\u4e00\u4e2a FAT16 \u6587\u4ef6\u7cfb\u7edf\uff0c\u9700\u8981\u628a BPB \u7684\u5185\u5bb9\u4f9d\u7167\u4e0a\u9762\u7684\u683c\u5f0f\u586b\u5165\uff0c\u540c\u65f6\u8fd8\u8981\u521d\u59cb\u5316 FAT \u8868\u2014\u2014\u5728\u76ee\u524d\u7684\u8bed\u5883\u4e0b\uff0c\u76f8\u5f53\u4e8e\u5411\u4e24\u4e2a\u6247\u533a\u5904\u5206\u522b\u5199\u5165 4 \u4e2a\u5b57\u8282\uff0c\u5177\u4f53\u662f\u4ec0\u4e48\u540e\u9762\u518d\u8bf4\u3002</p> <p>\u6ce8\u610f\u5230\uff0cBPB \u4e2d\u6709\u6210\u5458 <code>BPB_TotSecXX</code>\uff0c\u8fd9\u5c31\u9700\u8981\u6211\u4eec\u5bf9\u786c\u76d8\u7684\u603b\u6247\u533a\u4e2a\u6570\u8fdb\u884c\u8003\u5bdf\u3002\u53ef\u4ee5\u901a\u8fc7\u5411\u786c\u76d8\u53d1\u9001 <code>IDENTIFY</code> \u547d\u4ee4\u6765\u83b7\u53d6\u786c\u76d8\u76f8\u5173\u4fe1\u606f\uff0c\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <p>1.\u7b49\u5f85\u4e0a\u4e00\u6b65\u53ef\u80fd\u5b58\u5728\u7684\u786c\u76d8\u64cd\u4f5c\u5b8c\u6210\u3002</p> <p>2.\u54110x1f6\u5bc4\u5b58\u5668\u5199\u51650x00\uff0c0x1f7\u5bc4\u5b58\u5668\u5199\u51650xec\u3002</p> <p>3.\u7b49\u5f85\u786c\u76d8\u64cd\u4f5c\u5b8c\u6210\u3002</p> <p>4.\u4ece0x1f0\u5bc4\u5b58\u5668\u8bfb\u53d6 512 \u5b57\u8282\u7684\u786c\u76d8\u4fe1\u606f\u3002</p> <p>5.\u4ece\u786c\u76d8\u4fe1\u606f\u4e2d\u6536\u96c6\u786c\u76d8\u603b\u6247\u533a\u6570\u3002</p> <p>\u8be6\u7ec6\u4ee3\u7801\u5982\u4ee3\u7801 18-2\uff1a</p> <p>\u4ee3\u7801 18-2 \u83b7\u53d6\u786c\u76d8\u6247\u533a\u6570\uff08drivers/hd.c\uff09 <pre><code>static int hd_size_cache = 0;\n\nint get_hd_sects()\n{\n    if (hd_size_cache) return hd_size_cache;\n    while (inb(0x1f7) &amp; 0x80); // \u7b49\u786c\u76d8\u4e0d\u5fd9\u4e86\u518d\u53d1\u9001\u547d\u4ee4\uff0c\u5177\u4f53\u610f\u4e49\u89c1wait_disk_ready\n    outw(0x1f6, 0x00);\n    outw(0x1f7, 0xec); // IDENTIFY \u547d\u4ee4\n    wait_disk_ready();\n    uint16_t *hdinfo = (uint16_t *) kmalloc(512);\n    char *buffer = (char *) hdinfo;\n    for (int i = 0; i &lt; 256; i++) {\n        // \u6bcf\u6b21\u786c\u76d8\u4f1a\u53d1\u90012\u4e2a\u5b57\u8282\u6570\u636e\n        uint16_t data = inw(0x1f0);\n        *((uint16_t *) buffer) = data; // \u5b58\u5165buf\n        buffer += 2;\n    }\n    int sectors = ((int) hdinfo[61] &lt;&lt; 16) + hdinfo[60];\n    kfree(hd_info);\n    return (hd_size_cache = sectors);\n}\n</code></pre></p> <p>\u7531\u4e8e\u786c\u76d8\u64cd\u4f5c\u53ef\u80fd\u6bd4\u8f83\u8017\u65f6\uff0c\u8fd9\u91cc\u5b58\u4e86\u4e00\u4e2a <code>hd_size_cache</code>\uff0c\u5728\u7b2c\u4e00\u6b21\u8c03\u7528\u540e\u5c31\u76f4\u63a5\u5f15\u7528\u8fd9\u91cc\u9762\u7684\u6570\u636e\u800c\u4e0d\u518d\u5411\u786c\u76d8\u53d1\u547d\u4ee4\u4e86\u3002\u7531\u4e8e\u7528\u5230\u4e86 <code>kmalloc</code>\uff0c\u8bb0\u5f97\u5728\u5f00\u5934\u6dfb\u52a0 <code>#include \"memory.h\"</code>\u3002</p> <p>\u90a3\u4e48\uff0c\u65b0\u5efa <code>fs</code> \u76ee\u5f55\uff0c\u5e76\u65b0\u5efa <code>fat16.c</code> \u548c <code>file.c</code>\uff0c\u7531\u4e8e\u51fa\u73b0\u4e86\u65b0\u76ee\u5f55\uff0c\u6240\u4ee5\u8d34\u4e00\u4e0b\u65b0 Makefile\uff1a</p> <p>\u4ee3\u7801 18-3 \u65b0 Makefile\uff08Makefile\uff09 <pre><code>OBJS = out/kernel.o out/common.o out/monitor.o out/main.o out/gdtidt.o out/nasmfunc.o out/isr.o out/interrupt.o \\\n     out/string.o out/timer.o out/memory.o out/mtask.o out/keyboard.o out/keymap.o out/fifo.o out/syscall.o out/syscall_impl.o \\\n     out/stdio.o out/kstdio.o out/shell.o out/hd.o out/fat16.o out/cmos.o out/file.o\n\nout/%.o : kernel/%.c\n    i686-elf-gcc -c -I include -O0 -fno-builtin -fno-stack-protector -o out/$*.o kernel/$*.c\n\nout/%.o : kernel/%.asm\n    nasm -f elf -o out/$*.o kernel/$*.asm\n\nout/%.o : lib/%.c\n    i686-elf-gcc -c -I include -O0 -fno-builtin -fno-stack-protector -o out/$*.o lib/$*.c\n\nout/%.o : lib/%.asm\n    nasm -f elf -o out/$*.o lib/$*.asm\n\nout/%.o : drivers/%.c\n    i686-elf-gcc -c -I include -O0 -fno-builtin -fno-stack-protector -o out/$*.o drivers/$*.c\n\nout/%.o : drivers/%.asm\n    nasm -f elf -o out/$*.o drivers/$*.asm\n\nout/%.o : fs/%.c\n    i686-elf-gcc -c -I include -O0 -fno-builtin -fno-stack-protector -o out/$*.o fs/$*.c\n\nout/%.o : fs/%.asm\n    nasm -f elf -o out/$*.o fs/$*.asm\n\nout/%.bin : boot/%.asm\n    nasm -I boot/include -o out/$*.bin boot/$*.asm\n\nout/kernel.bin : $(OBJS)\n    i686-elf-ld -s -Ttext 0x100000 -o out/kernel.bin $(OBJS)\n\na.img : out/boot.bin out/loader.bin out/kernel.bin\n    dd if=out/boot.bin of=a.img bs=512 count=1\n    edimg imgin:a.img copy from:out/loader.bin to:@: copy from:out/kernel.bin to:@: imgout:a.img\n\nrun : a.img\n    qemu-system-i386 -fda a.img -hda hd.img -boot a\n\nclean :\n    cmd /c del /f /s /q out\n\ndefault : clean run\n</code></pre></p> <p>\u6700\u4e0b\u9762\u6211\u6084\u6084\u8865\u4e86\u4e24\u6761\u6307\u4ee4\uff1a<code>clean</code> \u548c <code>default</code>\uff0c<code>clean</code> \u7528\u4e8e\u628a <code>out</code> \u5f53\u4e2d\u7684\u4e00\u5207\u5168\u90e8\u5220\u9664\uff0c<code>default</code> \u5219\u662f\u5148\u5220\u540e\u8dd1\u4e00\u6b65\u5230\u4f4d\u3002</p> <p>\u683c\u5f0f\u5316\u6587\u4ef6\u7cfb\u7edf\u4e5f\u662f\u76f8\u2191\u5f53\u2193\u516c\u2191\u5f0f\u2192\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u76f4\u63a5\u5728\u4e0b\u9762\u8d34\u4ee3\u7801\u4e86\uff0c\u5177\u4f53\u7ec6\u8282\u4f1a\u5728\u4ee3\u7801\u91cc\u6807\u6ce8\u51fa\u6765\u3002</p> <p>\u4ee3\u7801 18-4 \u521b\u5efa FAT16 \u6587\u4ef6\u7cfb\u7edf\uff08fs/fat16.c\uff09 <pre><code>#include \"hd.h\"\n#include \"memory.h\"\n#include \"file.h\"\n#include \"cmos.h\"\n\n// \u683c\u5f0f\u5316\u6587\u4ef6\u7cfb\u7edf\nint fat16_format_hd()\n{\n    static unsigned char default_boot_code[] = {\n        0x8c, 0xc8, 0x8e, 0xd8, 0x8e, 0xc0, 0xb8, 0x00, 0x06, 0xbb, 0x00, 0x07, 0xb9, 0x00, 0x00, 0xba,\n        0x4f, 0x18, 0xcd, 0x10, 0xb6, 0x00, 0xe8, 0x02, 0x00, 0xeb, 0xfe, 0xb8, 0x6c, 0x7c, 0x89, 0xc5,\n        0xb9, 0x2a, 0x00, 0xb8, 0x01, 0x13, 0xbb, 0x07, 0x00, 0xb2, 0x00, 0xcd, 0x10, 0xc3, 0x46, 0x41,\n        0x54, 0x41, 0x4c, 0x3a, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x62, 0x6f, 0x6f, 0x74, 0x61,\n        0x62, 0x6c, 0x65, 0x20, 0x64, 0x69, 0x73, 0x6b, 0x2e, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,\n        0x20, 0x68, 0x61, 0x6c, 0x74, 0x65, 0x64, 0x2e, 0x00, 0x00\n    }; // \u8fd9\u6bb5\u4ee3\u7801\u7684\u610f\u601d\u662f\uff1a\u8f93\u51fa\u4e00\u6bb5\u4fe1\u606f\uff0c\u662f\u7528nasm\u5199\u5b8c\u7f16\u8bd1\u7684\n    char *fat1 = (char *) kmalloc(512);\n    hd_read(FAT1_START_LBA, 1, fat1); // \u8bfb\u53d6FAT\u8868\u7b2c\u4e00\u4e2a\u6247\u533a\n    if (fat1[0] == 0xff) { // \u5982\u679c\u7b2c\u4e00\u4e2a\u5b57\u8282\u662f0xff\uff0c\u90a3\u5c31\u662f\u6709\u6587\u4ef6\u7cfb\u7edf\n        kfree(fat1);\n        return 1; // \u90a3\u5c31\u6ca1\u6709\u5fc5\u8981\u683c\u5f0f\u5316\u4e86\n    }\n    kfree(fat1);\n    int sectors = get_hd_sects(); // \u83b7\u53d6\u786c\u76d8\u6247\u533a\u5927\u5c0f\u5148\u5b58\u7740\n    bpb_hdr_t hdr; // \u6784\u9020\u4e00\u4e2a\u5f15\u5bfc\u6247\u533a\n    hdr.BS_jmpBoot[0] = 0xeb;\n    hdr.BS_jmpBoot[1] = 0x3c; // jmp\u5230default_boot_code\n    hdr.BS_jmpBoot[2] = 0x90; // nop\u51d1\u591f3\u5b57\u8282\n    strcpy(hdr.BS_OEMName, \"TUTORIAL\"); // OEM\u4e3atutorial\n    hdr.BPB_BytsPerSec = 512;\n    hdr.BPB_SecPerClust = 1;\n    hdr.BPB_RsvdSecCnt = 1;\n    hdr.BPB_NumFATs = 2; // \u603b\u5171\u4e24\u4e2aFAT\uff0c\u8fd9\u662f\u89c4\u5b9a\n    hdr.BPB_RootEntCnt = 512; // \u6839\u76ee\u5f55\u533a32\u4e2a\u6247\u533a\uff0c\u4e00\u4e2a\u76ee\u5f55\u9879\u536032\u5b57\u8282\uff0c32*512/32=512\n    if (sectors &lt; (1 &lt;&lt; 16) - 1) {\n        hdr.BPB_TotSec16 = sectors;\n        hdr.BPB_TotSec32 = 0;\n    } else {\n        hdr.BPB_TotSec16 = 0;\n        hdr.BPB_TotSec32 = sectors;\n    }\n    hdr.BPB_Media = 0xf8; // \u786c\u76d8\u7edf\u4e00\u6570\u636e\n    hdr.BPB_FATSz16 = 32; // FAT16\u662f\u8fd9\u6837\u7684\n    hdr.BPB_SecPerTrk = 63; // \u786c\u76d8\u7edf\u4e00\u6570\u636e\n    hdr.BPB_NumHeads = 16; // \u786c\u76d8\u7edf\u4e00\u6570\u636e\n    hdr.BPB_HiddSec = 0;\n    hdr.BS_DrvNum = 0x80; // \u786c\u76d8\u7edf\u4e00\u6570\u636e\n    hdr.BS_Reserved1 = 0;\n    hdr.BS_BootSig = 0x29;\n    hdr.BS_VolID = 0;\n    strcpy(hdr.BS_VolLab, \"FOOLISHABBY\"); // \u53ef\u4ee5\u968f\u4fbf\u6539\n    strcpy(hdr.BS_FileSysType, \"FAT16   \"); // \u5c3d\u91cf\u522b\u6539\n    memset(hdr.BS_BootCode, 0, 448);\n    memcpy(hdr.BS_BootCode, default_boot_code, sizeof(default_boot_code));\n    hdr.BS_BootEndSig = 0xaa55;\n    hd_write(0, 1, &amp;hdr); // \u5f15\u5bfc\u6247\u533a\u5c31\u8fd9\u6837\u4e86\n    char initial_fat[512] = {0xff, 0xf8, 0xff, 0xff, 0}; // \u786c\u76d8\u7edf\u4e00\u6570\u636e\n    hd_write(FAT1_START_LBA, 1, &amp;initial_fat); // \u5199\u5165FAT1\n    hd_write(FAT1_START_LBA + FAT1_SECTORS, 1, &amp;initial_fat); // \u5199\u5165FAT2\n    return 0;\n}\n</code></pre></p> <p>\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u51fa\u73b0\u4e86\u76f8\u5f53\u591a\u7684\u5e38\u91cf\uff0c\u5b83\u4eec\u88ab\u7edf\u4e00\u5b9a\u4e49\u5728 include/file.h \u4e2d\uff1a</p> <p>\u4ee3\u7801 18-5 FAT16 \u6587\u4ef6\u7cfb\u7edf\u76f8\u5173\u5e38\u91cf\uff08include/file.h\uff09 <pre><code>#ifndef _FILE_H_\n#define _FILE_H_\n\n#include \"common.h\"\n\ntypedef struct FILEINFO {\n    uint8_t name[8], ext[3];\n    uint8_t type, reserved[10];\n    uint16_t time, date, clustno;\n    uint32_t size;\n}  __attribute__((packed)) fileinfo_t;\n\ntypedef struct FAT_BPB_HEADER {\n    unsigned char BS_jmpBoot[3];\n    unsigned char BS_OEMName[8];\n    unsigned short BPB_BytsPerSec;\n    unsigned char BPB_SecPerClust;\n    unsigned short BPB_RsvdSecCnt;\n    unsigned char BPB_NumFATs;\n    unsigned short BPB_RootEntCnt;\n    unsigned short BPB_TotSec16;\n    unsigned char BPB_Media;\n    unsigned short BPB_FATSz16;\n    unsigned short BPB_SecPerTrk;\n    unsigned short BPB_NumHeads;\n    unsigned int BPB_HiddSec;\n    unsigned int BPB_TotSec32;\n    unsigned char BS_DrvNum;\n    unsigned char BS_Reserved1;\n    unsigned char BS_BootSig;\n    unsigned int BS_VolID;\n    unsigned char BS_VolLab[11];\n    unsigned char BS_FileSysType[8];\n    unsigned char BS_BootCode[448];\n    unsigned short BS_BootEndSig;\n} __attribute__((packed)) bpb_hdr_t;\n\n#define SECTOR_SIZE 512\n#define FAT1_SECTORS 32\n#define ROOT_DIR_SECTORS 32\n#define FAT1_START_LBA 1\n#define ROOT_DIR_START_LBA 65\n#define DATA_START_LBA 97\n#define SECTOR_CLUSTER_BALANCE (DATA_START_LBA - 2)\n#define MAX_FILE_NUM 512\n\n#endif\n</code></pre></p> <p>\u8fd9\u5176\u4e2d\u6709\u4e00\u4e9b\u5e38\u91cf\uff0c\u7559\u5f85\u4e0b\u4e00\u8282\u5904\u7406\uff0c\u5148\u653e\u7740\u4e0d\u7ba1\u3002</p> <p>\u6309\u7167\u4e0a\u9762\u7684\u65b9\u6cd5\uff0c\u5e94\u8be5\u5c31\u53ef\u4ee5\u683c\u5f0f\u5316\u51fa\u4e00\u4e2a FAT16 \u6587\u4ef6\u7cfb\u7edf\u4e86\u3002\u4e0b\u9762\u6211\u4eec\u8fdb\u884c\u6d4b\u8bd5\u3002</p> <p>\u9996\u5148\uff0c\u5728\u547d\u4ee4\u884c\u8f93\u5165 <code>ftimgcreate hd.img -t hd -size 80</code>\uff0c\u91cd\u65b0\u521b\u5efa\u865a\u62df\u786c\u76d8 <code>hd.img</code>\uff1a</p> <p></p> <p>\uff08\u56fe 18-2 \u6d4b\u8bd5\u6b65\u9aa41\uff09</p> <p>\u7136\u540e\uff0c\u8c03\u7528 <code>ftls hd.img -l</code>\uff0c\u786e\u8ba4 <code>hd.img</code> \u4e2d\u4e0d\u5b58\u5728 FAT16 \u6587\u4ef6\u7cfb\u7edf\uff1a</p> <p></p> <p>\uff08\u56fe 18-3 \u6d4b\u8bd5\u6b65\u9aa42\uff09</p> <p>\u5728 <code>main.c</code> \u4e2d\u6dfb\u52a0 <code>fat16_format_hd()</code>\uff0c\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u7b49\u5f85 10 \u79d2\u540e\uff0c\u518d\u6b21 <code>ftls hd.img -l</code>\uff0c\u786e\u8ba4\u6587\u4ef6\u7cfb\u7edf\u5df2\u7ecf\u5b58\u5728\uff1a</p> <p></p> <p>\uff08\u56fe 18-4 \u6d4b\u8bd5\u6b65\u9aa43\uff09</p> <p>\u6587\u4ef6\u7cfb\u7edf\u5df2\u7ecf\u6210\u529f\u521b\u5efa\uff0c\u8bf4\u660e\u6211\u4eec\u7684\u683c\u5f0f\u5316\u51fd\u6570\u5df2\u7ecf\u5b8c\u6210\u3002\u63a5\u4e0b\u6765\uff0c\u5c31\u53ef\u4ee5\u5f00\u59cb\u8fdb\u884c\u521b\u5efa\u6587\u4ef6\u548c\u6253\u5f00\u6587\u4ef6\u7684\u64cd\u4f5c\u4e86\u3002</p> <p>\u76ee\u524d\u800c\u8a00\uff0c\u521b\u5efa\u6587\u4ef6\u548c\u6253\u5f00\u6587\u4ef6\u90fd\u53ea\u9700\u8981\u64cd\u4f5c\u6839\u76ee\u5f55\u533a\u5373\u53ef\u5b8c\u6210\u3002\u6839\u76ee\u5f55\u533a\u4e2d\uff0c\u4e00\u4e2a\u6587\u4ef6\u5bf9\u5e94\u7684\u4fe1\u606f\u4e3a 32 \u4e2a\u5b57\u8282\uff0c\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\u6240\u793a\uff1a</p> <p>\u4ee3\u7801 18-6 \u6839\u76ee\u5f55\u533a\u4e2d\u7684\u6587\u4ef6\u4fe1\u606f\uff08include/file.h\uff09 <pre><code>typedef struct FILEINFO {\n    uint8_t name[8], ext[3]; // \u6587\u4ef6\u540d\uff0c\u6269\u5c55\u540d\n    uint8_t type, reserved[10]; // \u7c7b\u578b\uff0c\u9884\u7559\n    uint16_t time, date, clustno; // \u4fee\u6539\u65e5\u671f\uff0c\u4fee\u6539\u65f6\u95f4\uff0c\u9996\u7c07\u53f7\uff08\u4e0b\u4e00\u8282\u518d\u8bb2\uff09\n    uint32_t size; // \u6587\u4ef6\u5927\u5c0f\n}  __attribute__((packed)) fileinfo_t;\n</code></pre></p> <p>\u4e0d\u96be\u53d1\u73b0\uff0c\u5fae\u8f6f\u5728\u8bbe\u8ba1\u65f6\u663e\u7136\u8003\u8651\u5730\u4e0d\u591a\uff0c\u4e00\u4e2a\u6587\u4ef6\u6700\u591a\u53ea\u80fd\u6709 8 \u4e2a\u5b57\u7b26\u4f5c\u4e3a\u6587\u4ef6\u540d\u30013 \u4e2a\u5b57\u7b26\u4f5c\u4e3a\u6269\u5c55\u540d\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a 8.3 \u6587\u4ef6\u540d\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5fae\u8f6f\u5bf9\u6b64\u6709\u89e3\u51b3\u65b9\u6848\uff0c\u540d\u4e3a\u957f\u6587\u4ef6\u540d\uff08LFN\uff09\uff0c\u7136\u800c\u5b9e\u73b0\u4e0a\u8981\u8003\u8651\u7684\u7ec6\u8282\u592a\u591a\uff0c\u6240\u4ee5\u5e72\u8106\u4e0d\u7ba1\u3002</p> <p>\u90a3\u4e48\uff0c\u9996\u5148\u8981\u8003\u8651\u7684\u5c31\u662f\u600e\u6837\u628a\u4e00\u4e2a\u6587\u4ef6\u540d\u8f6c\u5316\u4e3a\u4e00\u4e2a\u5408\u6cd5\u7684 8.3 \u6587\u4ef6\u540d\u3002\u5728\u8f6c\u5316\u65f6\uff0c\u8981\u6c42\u6587\u4ef6\u540d\u9664\u4e86\u5927\u5c0f\u5199\u5b57\u6bcd\u3001\u6570\u5b57\u5916\uff0c\u5176\u4ed6\u5b57\u7b26\u90fd\u5c06\u88ab\u66ff\u6362\u4e3a\u4e0b\u5212\u7ebf\uff0c\u5c0f\u5199\u5b57\u6bcd\u5c06\u4f1a\u81ea\u52a8\u8f6c\u4e3a\u5927\u5199\u5b57\u6bcd\uff0c\u5e76\u4e14\u5728\u7b2c\u4e00\u4e2a\u5b57\u8282\u4e3a 0xe5 \u65f6\u8981\u81ea\u52a8\u66ff\u6362\u4e3a 0x05\u3002\u8fd9\u6837\u7684\u5de5\u4f5c\u5341\u5206\u7e41\u6742\uff0c\u6211\u4eec\u9009\u62e9\u76f4\u63a5\u4fee\u6539 <code>myfattools</code> \u4e2d\u7684 <code>lfn2sfn</code> \u51fd\u6570\uff08\u6709\u5f00\u6e90\u6284\u5c31\u662f\u597d\uff09\uff1a</p> <p>\u4ee3\u7801 18-7 \u6587\u4ef6\u540d\u8f6c 8.3\uff08fs/fat16.c\uff09 <pre><code>// \u628a\u539f\u6587\u4ef6\u540d\u6539\u7f16\u4e3aFAT16\u6240\u8981\u6c42\u76848.3\u683c\u5f0f\nint lfn2sfn(const char *lfn, char *sfn)\n{\n    int len = strlen(lfn), last_dot = -1;\n    for (int i = len - 1; i &gt;= 0; i--) { // \u4ece\u5c3e\u5230\u5934\u904d\u5386\uff0c\u5bfb\u627e\u6700\u540e\u4e00\u4e2a.\u7684\u4f4d\u7f6e\n        if (lfn[i] == '.') { // \u627e\u5230\u4e86\n            last_dot = i; // \u6700\u540e\u4e00\u4e2a.\u8d4b\u503c\u4e00\u4e0b\n            break; // \u8df3\u51fa\u5faa\u73af\n        }\n    }\n    if (last_dot == -1) last_dot = len; // \u6ca1\u6709\u6269\u5c55\u540d\uff0c\u90a3\u5c31\u5728\u6700\u540e\u865a\u7a7a\u52a0\u4e2a.\n    if (lfn[0] == '.') return -1; // \u9996\u5b57\u7b26\u662f.\uff0c\u4e0d\u652f\u6301\n    int len_name = last_dot, len_ext = len - 1 - last_dot; // \u8ba1\u7b97\u6587\u4ef6\u540d\u4e0e\u6269\u5c55\u540d\u5404\u81ea\u6709\u591a\u957f\n    if (len_name &gt; 8) return -1; // \u6587\u4ef6\u540d\u957f\u4e8e8\u4e2a\u5b57\u7b26\uff0c\u4e0d\u652f\u6301\n    if (len_ext &gt; 3) return -1; // \u6269\u5c55\u540d\u957f\u4e8e3\u4e2a\u5b57\u7b26\uff0c\u4e0d\u652f\u6301\n    // \u4e8b\u5b9e\u4e0aFAT\u5bf9\u6b64\u6709\u89e3\u51b3\u65b9\u6848\uff0c\u79f0\u4e3a\u957f\u6587\u4ef6\u540d\uff08LFN\uff09\uff0c\u4f46\u5b9e\u73b0\u8f83\u4e3a\u590d\u6742\uff0c\u6682\u65f6\u5148\u4e0d\u8ba8\u8bba\n    char *name = (char *) malloc(10); // \u591a\u5206\u914d\u70b9\u5185\u5b58\n    char *ext = NULL; // ext\u4e0d\u4e00\u5b9a\u6709\n    if (len_ext &gt; 0) ext = (char *) malloc(5); // \u6709\u6269\u5c55\u540d\uff0c\u5206\u914d\u5185\u5b58\n    memcpy(name, lfn, len_name); // \u628aname\u4ecelfn\u4e2d\u62f7\u51fa\u6765\n    if (ext) memcpy(ext, lfn + last_dot + 1, len_ext); // \u628aext\u4ecelfn\u4e2d\u62f7\u51fa\u6765\n    if (name[0] == 0xe5) name[0] = 0x05; // \u5982\u679c\u7b2c\u4e00\u4e2a\u5b57\u8282\u6070\u597d\u662f0xe5\uff08\u5df2\u5220\u9664\uff09\uff0c\u5c06\u5176\u66f4\u6362\u4e3a0x05\n    for (int i = 0; i &lt; len_name; i++) { // \u5904\u7406\u6587\u4ef6\u540d\n        if (name[i] == '.') return -1; // \u6587\u4ef6\u540d\u4e2d\u542b\u6709.\uff0c\u4e0d\u652f\u6301\n        if ((name[i] &gt;= 'a' &amp;&amp; name[i] &lt;= 'z') || (name[i] &gt;= 'A' &amp;&amp; name[i] &lt;= 'Z') || (name[i] &gt;= '0' &amp;&amp; name[i] &lt;= '9')) sfn[i] = name[i]; // \u6570\u5b57\u6216\u5b57\u6bcd\u7559\u4e3a\u539f\u6837\n        else sfn[i] = '_'; // \u5176\u4f59\u5b57\u7b26\u53d8\u4e3a\u4e0b\u5212\u7ebf\n        if (sfn[i] &gt;= 'a' &amp;&amp; sfn[i] &lt;= 'z') sfn[i] -= 0x20; // \u5c0f\u5199\u53d8\u5927\u5199\n    }\n    for (int i = len_name; i &lt; 8; i++) sfn[i] = ' '; // \u7528\u7a7a\u683c\u586b\u5145\u5269\u4f59\u90e8\u5206\n    for (int i = 0; i &lt; len_ext; i++) { // \u5904\u7406\u6269\u5c55\u540d\n        if ((ext[i] &gt;= 'a' &amp;&amp; ext[i] &lt;= 'z') || (ext[i] &gt;= 'A' &amp;&amp; name[i] &lt;= 'Z') || (ext[i] &gt;= '0' &amp;&amp; ext[i] &lt;= '9')) sfn[i + 8] = ext[i]; // \u6570\u5b57\u6216\u5b57\u6bcd\u7559\u4e3a\u539f\u6837\n        else sfn[i + 8] = '_'; // \u5176\u4f59\u5b57\u7b26\u53d8\u4e3a\u4e0b\u5212\u7ebf\n        if (sfn[i + 8] &gt;= 'a' &amp;&amp; sfn[i + 8] &lt;= 'z') sfn[i + 8] -= 0x20; // \u5c0f\u5199\u53d8\u5927\u5199\n    }\n    if (len_ext &gt; 0) {\n        for (int i = len_ext; i &lt; 3; i++) sfn[i + 8] = ' '; // \u7528\u7a7a\u683c\u586b\u5145\u5269\u4f59\u90e8\u5206\n    } else {\n        for (int i = 0; i &lt; 3; i++) sfn[i + 8] = ' '; // \u7528\u7a7a\u683c\u586b\u5145\u5269\u4f59\u90e8\u5206\n    }\n    sfn[11] = 0; // \u6587\u4ef6\u540d\u7684\u7ed3\u5c3e\u52a0\u4e00\u4e2a\\0\n    return 0; // \u6b63\u5e38\u9000\u51fa\n}\n</code></pre></p> <p>\u5177\u4f53\u7ec6\u8282\u8be6\u7ec6\u53c2\u89c1\u6ce8\u91ca\u3002</p> <p>\u5728\u6b64\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u8bfb\u53d6\u4e00\u4e0b\u6839\u76ee\u5f55\u533a\u7684\u6240\u6709\u6587\u4ef6\u7ec3\u7ec3\u624b\u3002\u5982\u679c\u4f60\u5fd8\u4e86\u6839\u76ee\u5f55\u533a\u7684\u5927\u5c0f\u548c\u8d77\u70b9\u7684\u8bdd\uff0c\u6ca1\u6709\u5173\u7cfb\uff0cfile.h \u7684\u5b8f\u5b9a\u4e49\u5df2\u7ecf\u5b9a\u4e49\u597d\u4e86\uff1a</p> <p>\u4ee3\u7801 18-8 \u8bfb\u53d6\u6839\u76ee\u5f55\u6240\u6709\u6587\u4ef6 <code>read_dir_entries</code>\uff08drivers/fat16.c\uff09 <pre><code>// \u8bfb\u53d6\u6839\u76ee\u5f55\u76ee\u5f55\u9879\nfileinfo_t *read_dir_entries(int *dir_ents)\n{\n    fileinfo_t *root_dir = (fileinfo_t *) kmalloc(ROOT_DIR_SECTORS * SECTOR_SIZE);\n    hd_read(ROOT_DIR_START_LBA, ROOT_DIR_SECTORS, root_dir); // \u5c06\u6839\u76ee\u5f55\u7684\u6240\u6709\u6247\u533a\u5168\u90e8\u8bfb\u5165\n    int i;\n    for (i = 0; i &lt; MAX_FILE_NUM; i++) {\n        if (root_dir[i].name[0] == 0) break; // \u5982\u679c\u540d\u5b57\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u662f0\uff0c\u90a3\u5c31\u8bf4\u660e\u8fd9\u91cc\u6ca1\u6709\u6587\u4ef6\n    }\n    *dir_ents = i; // \u5c06\u76ee\u5f55\u9879\u4e2a\u6570\u5199\u5230\u6307\u9488\u91cc\n    return root_dir; // \u8fd4\u56de\u6839\u76ee\u5f55\n}\n</code></pre></p> <p>\u4f7f\u7528\u7684\u65f6\u5019\uff0c\u6211\u4eec\u7684\u8c03\u7528\u65b9\u6cd5\u548c <code>scanf</code> \u5f88\u50cf\uff1a</p> <p>\u4ee3\u7801 18-9 <code>read_dir_entries</code> \u6d4b\u8bd5\uff08kernel/main.c\uff09 <pre><code>    int entries;\n    fileinfo_t *root_dir = read_dir_entries(&amp;entries); // \u7528\u8fd9\u4e24\u884c\u66ff\u6362\u6389 fat16_format_hd();\n</code></pre></p> <p>\u4f5c\u4e3a\u6d4b\u8bd5\uff0c\u6211\u4eec\u6765\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6 <code>ilovehon.kai</code>\uff08\u6ca1\u4ec0\u4e48\u522b\u7684\u610f\u601d\uff0c\u540d\u5b57\u4f60\u53ef\u4ee5\u968f\u4fbf\u6362\uff0c\u4f46\u5fc5\u987b\u9075\u5faa\u4e0a\u9762\u63d0\u5230\u7684 8.3 \u6587\u4ef6\u540d\u89c4\u5219\uff09\uff0c\u5e76\u586b\u5145 512 \u4e2a A \u548c 512 \u4e2a B\uff08\u540c\u6837\u53ea\u662f\u6d4b\u8bd5\uff0c\u5185\u5bb9\u4e5f\u53ef\u4ee5\u968f\u4fbf\u6362\uff09\uff1a</p> <p></p> <p>\uff08\u56fe 18-5 \u521b\u5efa\u6587\u4ef6\uff09</p> <p>\u7528 <code>ftcopy</code> \u547d\u4ee4\u5c06\u6587\u4ef6\u5199\u5165\u865a\u62df\u786c\u76d8 <code>hd.img</code>\uff1a</p> <p></p> <p>\uff08\u56fe 18-6 \u5199\u5165\u865a\u62df\u786c\u76d8\uff0c\u8fd9\u91cc\u7528 ftls \u786e\u8ba4\u5199\u5165\u6210\u529f\uff09</p> <p>\u6269\u5199\u4e0a\u9762\u7684\u6d4b\u8bd5\u4ee3\u7801\uff1a</p> <p>\u4ee3\u7801 18-10 \u4e00\u4e2a\u5565\u90fd\u6ca1\u6709\u7684 <code>ls</code>\uff08kernel/main.c\uff09 <pre><code>    for (int i = 0; i &lt; entries; i++) printk(\"%s\\n\", root_dir[i].name);\n    kfree(root_dir); // \u524d\u9762read\u7684\u65f6\u5019\u7528\u7684malloc\u5206\u914d\uff0c\u8fd9\u91cc\u7528free\u91ca\u653e\n</code></pre></p> <p>\u4e3a\u4ec0\u4e48\u4e0d\u9700\u8981\u518d <code>printk</code> \u4e00\u904d <code>ext</code> \u5462\uff1f\u8fd9\u662f\u56e0\u4e3a <code>name</code> \u548c <code>ext</code> \u4e4b\u95f4\u5e76\u6ca1\u6709\u4e00\u4e2a\u660e\u786e\u7684 \\0 \u4f5c\u4e3a\u5206\u754c\uff0cprintk \u5728\u8f93\u51fa <code>name</code> \u7684\u540c\u65f6\u5c31\u4f1a\u8f93\u51fa <code>ext</code>\u3002</p> <p>\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u6548\u679c\u5982\u4e0b\uff1a </p> <p>\uff08\u56fe 18-7 \u8f93\u51fa\u7684\u6587\u4ef6\u540d\uff09</p> <p>\u6ce8\u610f\u5230\uff0c\u5c06 <code>ilovehon.kai</code> \u624b\u5de5\u8f6c\u5316\u4e3a 8.3 \u6587\u4ef6\u540d\u4e5f\u4e3a <code>ILOVEHONKAI</code>\uff0c\u56e0\u6b64\u53ef\u77e5 <code>read_dir_entries</code> \u5b9e\u73b0\u6210\u529f\u3002</p> <p>\u4e0b\u9762\u5c31\u53ef\u4ee5\u6b63\u5f0f\u5f00\u59cb\u521b\u5efa\u6587\u4ef6\u7684\u64cd\u4f5c\u4e86\u3002\u60f3\u8981\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\uff0c\u548c\u683c\u5f0f\u5316\u51fa\u4e00\u4e2a\u6587\u4ef6\u7cfb\u7edf\u662f\u7c7b\u4f3c\u7684\uff0c\u53ea\u9700\u8981\u628a <code>fileinfo_t</code> \u7ed3\u6784\u4f53\u5f53\u4e2d\u7684\u5404\u4e2a\u6210\u5458\u5206\u522b\u586b\u5199\u597d\u5c31\u53ef\u4ee5\u3002</p> <p>\u76ee\u524d\u6765\u770b\uff0c\u6211\u4eec\u603b\u5171\u9700\u8981\u586b\u5165\u7684\u4e1c\u897f\u91cc\u5df2\u7ecf\u6709\u4e9b\u53ef\u4ee5\u5b8c\u6210\u6216\u5ffd\u7565\uff1a\u586b\u5165 <code>name</code> \u548c <code>ext</code> \u7684\u8fc7\u7a0b\u5df2\u7ecf\u7531 <code>lfn2sfn</code> \u5b9e\u73b0\u4e86\uff1b\u800c <code>type</code> \u53ea\u9700\u8981\u586b\u4e0a <code>0x20</code>\uff0c<code>reserved</code>\u3001<code>clustno</code> \u548c <code>size</code> \u90fd\u8bbe\u7f6e\u4e3a 0 \u5373\u53ef\u3002\u90a3\u4e48\uff0c\u5c31\u53ea\u5269\u4e0b <code>time</code> \u548c <code>date</code> \u4e86\u3002</p> <p>\u5fae\u8f6f\u5bf9 <code>time</code> \u548c <code>date</code> \u7684\u7f16\u7801\u5982\u4e0b\uff1a</p> <p><code>time</code>\uff1a\u4f4e 5 \u4f4d\u4e3a\u79d2\uff0c\u4e2d 6 \u4f4d\u4e3a\u5206\uff0c\u9ad8 5 \u4f4d\u4e3a\u65f6\uff1b</p> <p><code>date</code>\uff1a\u4f4e 5 \u4f4d\u4e3a\u65e5\uff0c\u4e2d 4 \u4f4d\u4e3a\u6708\uff0c\u9ad8 7 \u4f4d\u4e3a\u5e74\u3002\u5176\u4e2d\uff0c\u5e74\u4efd\u8981\u51cf\u53bb 1980\uff0c\u610f\u4e49\u4e0d\u660e\u3002</p> <p>\u5728\u4e0a\u4e00\u8282\u7684\u57fa\u7840\u8bbe\u65bd\u5efa\u8bbe\u90e8\u5206\uff0c\u6211\u4eec\u5df2\u7ecf\u5b8c\u6210\u4e86 RTC\uff0c\u53ef\u4ee5\u7545\u901a\u65e0\u963b\u5730\u83b7\u53d6\u76ee\u524d\u7684\u65f6\u95f4\u3002\u90a3\u4e48\uff0c\u5b9e\u73b0\u6587\u4ef6\u521b\u5efa\u7684\u57fa\u672c\u6761\u4ef6\u5df2\u7ecf\u6210\u719f\uff0c\u76f4\u63a5\u5f00\u5199\uff1a</p> <p>\u4ee3\u7801 18-11 \u521b\u5efa\u6587\u4ef6\uff08fs/fat16.c\uff09 <pre><code>// \u521b\u5efa\u6587\u4ef6\nint fat16_create_file(fileinfo_t *finfo, char *filename)\n{\n    if (filename[0] == 0xe5) filename[0] = 0x05; // \u5982\u4e0a\uff0c\u82e5\u7b2c\u4e00\u4e2a\u5b57\u8282\u4e3a 0xe5\uff0c\u9700\u8981\u66f4\u6362\u4e3a 0x05\n    char sfn[20] = {0};\n    int ret = lfn2sfn(filename, sfn); // \u5c06\u6587\u4ef6\u540d\u8f6c\u6362\u4e3a8.3\u6587\u4ef6\u540d\n    if (ret) return -1; // \u6587\u4ef6\u540d\u4e0d\u7b26\u54088.3\u89c4\u8303\uff0c\u8fd4\u56de\n    int entries;\n    fileinfo_t *root_dir = read_dir_entries(&amp;entries); // \u8bfb\u53d6\u6240\u6709\u6839\u76ee\u5f55\u9879\n    int free_slot = entries; // \u9ed8\u8ba4\u7684\u7a7a\u95f2\u4f4d\u7f6e\u662f\u6700\u540e\u4e00\u4e2a\n    for (int i = 0; i &lt; entries; i++) {\n        if (!memcmp(root_dir[i].name, sfn, 8) &amp;&amp; !memcmp(root_dir[i].ext, sfn + 8, 3)) { // \u6587\u4ef6\u540d\u548c\u6269\u5c55\u540d\u90fd\u4e00\u6837\n            kfree(root_dir); // \u5df2\u7ecf\u6709\u4e86\u5c31\u4e0d\u7528\u521b\u5efa\u4e86\n            return -1;\n        }\n        if (root_dir[i].name[0] == 0xe5) { // \u5df2\u7ecf\u5220\u9664\uff08\u6587\u4ef6\u540d\u7b2c\u4e00\u4e2a\u5b57\u8282\u662f0xe5\uff09\n            free_slot = i; // \u90a3\u5c31\u628a\u8fd9\u91cc\u5f53\u6210\u7a7a\u95f2\u4f4d\u7f6e\n            break;\n        }\n    }\n    if (free_slot == MAX_FILE_NUM) { // \u5982\u679c\u7a7a\u95f2\u4f4d\u7f6e\u5df2\u7ecf\u5230\u8fbe\u6839\u76ee\u5f55\u672b\u5c3e\n        kfree(root_dir); // \u6ca1\u5730\u65b9\u521b\u5efa\u4e5f\u5c31\u4e0d\u7528\u521b\u5efa\u4e86\n        return -1;\n    }\n    // \u5f00\u59cb\u586b\u5165fileinfo_t\u5bf9\u5e94\u7684\u9879\n    memcpy(root_dir[free_slot].name, sfn, 8); // sfn\u4e3aname\u4e0eext\u7684\u5408\u4f53\uff0c\u524d8\u4e2a\u5b57\u8282\u662fname\n    memcpy(root_dir[free_slot].ext, sfn + 8, 3); // \u540e3\u4e2a\u5b57\u8282\u662fext\n    root_dir[free_slot].type = 0x20; // \u7c7b\u578b\u4e3a0x20\uff08\u6b63\u5e38\u6587\u4ef6\uff09\n    root_dir[free_slot].clustno = 0; // \u6ca1\u6709\u5185\u5bb9\uff0c\u6240\u4ee5\u6ca1\u6709\u7c07\u53f7\uff08\u540c\u6837\u653e\u5728\u4e0b\u4e00\u8282\u8bb2\uff09\n    root_dir[free_slot].size = 0; // \u6ca1\u6709\u5185\u5bb9\uff0c\u6240\u4ee5\u5927\u5c0f\u4e3a0\n    memset(root_dir[free_slot].reserved, 0, 10); // \u5c06\u9884\u7559\u90e8\u5206\u5168\u90e8\u8bbe\u4e3a0\n    current_time_t ctime;\n    get_current_time(&amp;ctime); // \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\n    // \u6309\u7167\u524d\u6587\u6240\u8bf4\u4f9d\u6b21\u586b\u5165date\u548ctime\n    root_dir[free_slot].date = ((ctime.year - 1980) &lt;&lt; 9) | (ctime.month &lt;&lt; 5) | ctime.day;\n    root_dir[free_slot].time = (ctime.hour &lt;&lt; 11) | (ctime.min &lt;&lt; 5) | ctime.sec;\n    if (finfo) *finfo = root_dir[free_slot]; // \u521b\u5efa\u5b8c\u4e86\u4e0d\u80fd\u4e0d\u7ba1\uff0c\u4f20\u7ed9finfo\u7559\u7740\n    hd_write(ROOT_DIR_START_LBA, ROOT_DIR_SECTORS, root_dir); // \u5c06\u65b0\u7684\u6839\u76ee\u5f55\u533a\u5199\u56de\u786c\u76d8\n    kfree(root_dir); // \u6210\u529f\u5b8c\u6210\n    return 0;\n}\n</code></pre></p> <p>\u5177\u4f53\u7ec6\u8282\u90fd\u653e\u5728\u4ee3\u7801\u4e2d\u4e86\uff0c\u5bfb\u627e\u7a7a\u4f59\u4f4d\u7f6e\u548c\u5224\u65ad\u6587\u4ef6\u662f\u5426\u5b58\u5728\u7684\u4ee3\u7801\u53cd\u800c\u5360\u4e86\u5927\u591a\u6570\uff0c\u771f\u6b63\u521b\u5efa\u6587\u4ef6\u7684\u4ee3\u7801\u53ea\u6709\u6700\u540e\u7684\u90a3\u5341\u51e0\u884c\u3002</p> <p>\u6700\u540e\u662f\u6253\u5f00\u6587\u4ef6\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6839\u636e\u6587\u4ef6\u540d\u627e\u5230\u5bf9\u5e94\u7684 <code>fileinfo_t</code> \u8fd4\u56de\u5c31\u53ef\u4ee5\u4e86\u3002</p> <p>\u4ee3\u7801 18-12 \u6253\u5f00\u6587\u4ef6\uff08fs/fat16.c\uff09 <pre><code>// \u6253\u5f00\u6587\u4ef6\nint fat16_open_file(fileinfo_t *finfo, char *filename)\n{\n    char sfn[20] = {0};\n    int ret = lfn2sfn(filename, sfn); // \u5c06\u539f\u6587\u4ef6\u540d\u8f6c\u6362\u4e3a8.3\n    if (ret) return -1; // \u8f6c\u6362\u5931\u8d25\uff0c\u4e0d\u7528\u6253\u5f00\u4e86\n    int entries;\n    fileinfo_t *root_dir = read_dir_entries(&amp;entries); // \u8bfb\u53d6\u6240\u6709\u76ee\u5f55\u9879\n    int file_index = entries; // filename\u5bf9\u5e94\u6587\u4ef6\u7684\u7d22\u5f15\n    for (int i = 0; i &lt; entries; i++) {\n        if (!memcmp(root_dir[i].name, sfn, 8) &amp;&amp; !memcmp(root_dir[i].ext, sfn + 8, 3)) {\n            file_index = i; // \u627e\u5230\u4e86\n            break;\n        }\n    }\n    if (file_index &lt; entries) { // \u5982\u679c\u627e\u5230\u4e86\u2026\u2026\n        *finfo = root_dir[file_index]; // \u90a3\u4e48\u628a\u5bf9\u5e94\u7684\u6587\u4ef6\u5b58\u5230finfo\u91cc\n        kfree(root_dir);\n        return 0;\n    }\n    else {\n        finfo = NULL; // \u8fd9\u4e00\u53e5\u5b9e\u9645\u4e0a\u662f\u6ca1\u6709\u7528\u7684\n        kfree(root_dir);\n        return -1;\n    }\n}\n</code></pre></p> <p>\u6700\u540e\u5c31\u662f\u559c\u95fb\u4e50\u89c1 \uff08\u975e\u5e38\u50bb\u903c\uff09 \u7684\u6d4b\u8bd5\u73af\u8282\u3002\u6253\u5f00\u6587\u4ef6\u914d\u5408\u540e\u9762\u7684\u8bfb\u53d6\u548c\u5199\u5165\u6d4b\u8bd5\u6548\u679c\u66f4\u4f73\uff0c\u6240\u4ee5\u8fd9\u91cc\u5355\u72ec\u6d4b\u8bd5\u521b\u5efa\u6587\u4ef6\u3002</p> <p>\u5c06\u521a\u624d\u5199\u7684\u6d4b\u8bd5 <code>read_dir_entries</code> \u7684\u4ee3\u7801\u66ff\u6362\u4e3a\uff1a</p> <p>\u4ee3\u7801 18-13 \u521b\u5efa\u6587\u4ef6\u6d4b\u8bd5\uff08kernel/main.c\uff09 <pre><code>    printk(\"create status: %d\\n\", fat16_create_file(NULL, \"iloveado.fai\"));\n</code></pre></p> <p>\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u6548\u679c\u5e94\u5982\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\uff08\u56fe 18-8 \u521b\u5efa\u6587\u4ef6\u7591\u4f3c\u6210\u529f\uff09</p> <p>\u5728\u547d\u4ee4\u884c\u4e2d\u4f7f\u7528 <code>ftls</code> \u5de5\u5177\uff0c\u786e\u8ba4\u6587\u4ef6\u5df2\u7ecf\u6210\u529f\u521b\u5efa\uff1a</p> <p></p> <p>\uff08\u56fe 18-9 \u521b\u5efa\u6587\u4ef6\u6210\u529f\uff09</p> <p>\u597d\u4e86\uff0c\u90a3\u4e48\u8fd9\u4e00\u8282\u4f5c\u4e3a\u6211\u4eec\u5b9e\u73b0 FAT16 \u7684\u7b2c\u4e00\u6218\uff0c\u663e\u7136\u6548\u679c\u975e\u5e38\u6210\u529f\u3002\u4e0b\u4e00\u8282\u6211\u4eec\u6765\u5b9e\u73b0\u6587\u4ef6\u7684\u8bfb\u53d6\u3001\u5199\u5165\u548c\u5220\u9664\uff0c\u4ece\u800c\u4e3a\u540e\u7eed\u7684\u5305\u88c5\u6253\u597d\u5730\u57fa\u3002</p>"},{"location":"os-tutorial/old/19-fat16-part2/","title":"19 \u5b9e\u73b0FAT16\u6587\u4ef6\u7cfb\u7edf\uff083\uff09\u2014\u2014\u8bfb\u53d6\u6587\u4ef6\u3001\u5199\u5165\u6587\u4ef6\u3001\u5220\u9664\u6587\u4ef6","text":"<p>\u5728\u5b9e\u73b0\u6587\u4ef6\u7684\u8bfb\u53d6\u3001\u5199\u5165\u548c\u5220\u9664\u4e4b\u524d\uff0c\u9996\u5148\u8fd8\u9700\u8981\u4e86\u89e3\u4e24\u4e2a\u5728\u4e0a\u4e00\u8282\u88ab\u523b\u610f\u5ffd\u7565\u6389\u7684\u6982\u5ff5\uff1aFAT \u8868\u4ee5\u53ca\u7c07\u3002</p> <p>\u6570\u636e\u533a\u4f60\u8fdc\u770b\u5b83\u662f\u4e00\u6574\u5757\uff0c\u4f46\u662f\u8fd1\u770b\u5b83\u88ab\u5206\u5272\u6210\u4e86\u4e00\u4e2a\u4e2a\u7684\u6247\u533a\uff0c\u6bcf\u4e00\u4e2a\u6247\u533a\u90fd\u8fd8\u6709\u53e6\u4e00\u4e2a\u540d\u5b57\uff0c\u8fd9\u5c31\u662f\u7c07\u3002\u800c FAT \u8868\uff0c\u5c31\u662f\u7c07\u7684\u7d22\u5f15\uff0c\u6bcf\u4e00\u4e2a FAT \u9879\u7684\u4f4d\u7f6e\u5b9e\u9645\u4e0a\u90fd\u662f\u4e00\u4e2a\u7c07\u7684\u7f16\u53f7\uff0c\u7b80\u79f0\u7c07\u53f7\u3002\u5728 FAT16 \u6587\u4ef6\u7cfb\u7edf\u4e2d\uff0c\u4e00\u4e2a FAT \u9879\u5360\u636e 16 \u4f4d\uff0c\u8fd9\u4e5f\u662f\u8fd9\u4e2a\u6587\u4ef6\u7cfb\u7edf\u540d\u5b57\u7684\u7531\u6765\u3002</p> <p>\u6bcf\u4e00\u4e2a FAT \u9879\u6240\u5728\u7684\u4f4d\u7f6e\u90fd\u5bf9\u5e94\u7740\u4e00\u4e2a\u7c07\u53f7\uff0c\u800c\u8fd9\u4e2a FAT \u9879\u4e2d\u5b58\u653e\u7684\u6570\u636e\uff0c\u5219\u662f\u8fd9\u4e2a\u6587\u4ef6\u6570\u636e\u7684\u4e0b\u4e00\u4e2a\u7c07\u7684\u6240\u5728\u4f4d\u7f6e\u3002\u8fd9\u4e2a\u903b\u8f91\u6709\u70b9\u50cf\u94fe\u8868\uff1a\u9996\u5148\u4ece\u6587\u4ef6\u7684 <code>clustno</code> \u5c5e\u6027\u83b7\u53d6\u7b2c\u4e00\u4e2a\u7c07\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u8bfb\u53d6\u7b2c\u4e00\u4e2a\u7c07\u7684\u7c07\u53f7\u6240\u5728\u7684 FAT \u9879\u83b7\u53d6\u4e0b\u4e00\u4e2a\u7c07\u7684\u4f4d\u7f6e\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u636e\u89c4\u5b9a\uff0c\u5728 FAT16 \u6587\u4ef6\u7cfb\u7edf\u4e2d\uff0c\u82e5\u4e00\u4e2a\u7c07\u53f7\u5bf9\u5e94\u7684 FAT \u9879\u7684\u503c\u5927\u4e8e\u7b49\u4e8e <code>0xFFF8</code>\uff0c\u90a3\u4e48\u8bf4\u660e\u6587\u4ef6\u7ed3\u675f\u3002\u4e00\u822c\u800c\u8a00\uff0c\u5927\u591a\u6570\u5b9e\u73b0\u90fd\u91c7\u7528 <code>0xffff</code> \u4f5c\u4e3a\u6587\u4ef6\u7ed3\u675f\u6807\u5fd7\u3002</p> <p>\u7136\u800c\uff0c\u4e3a\u4e86\u8f6f\u4ef6\u8bc6\u522b\u7684\u9700\u8981\uff0c\u5fae\u8f6f\u5b98\u65b9\u76f4\u63a5\u628a\u524d\u4e24\u4e2a FAT \u9879\u780d\u4e86\uff0c\u5e76\u89c4\u5b9a\uff1a\u6570\u636e\u533a\u7684\u7b2c\u4e00\u4e2a\u7c07\u7684\u7c07\u53f7\u4e3a 2\uff0c\u5f80\u540e\u4f9d\u6b21\u7c7b\u63a8\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5728\u8bfb\u5199\u7c07\u5185\u5bb9\u7684\u65f6\u5019\u8fd8\u9700\u8981\u624b\u52a8\u51cf 2\uff0c\u624d\u80fd\u8bfb\u5230\u6b63\u786e\u7684\u6247\u533a\u3002</p> <p>\u90a3\u4e48\uff0c\u6211\u4eec\u6765\u5199\u4e00\u4e2a\u8bfb\u5199 FAT \u9879\u7684\u51fd\u6570\u3002\u867d\u8bf4\u6ca1\u6709\u7c7b\uff0c\u505a\u4e0d\u5230\u6a21\u62df\u6570\u7ec4\u64cd\u4f5c\uff0c\u4f46\u662f\u80fd\u63a5\u8fd1\u8fd8\u662f\u63a5\u8fd1\u4e00\u4e0b\uff1a</p> <p>\u4ee3\u7801 19-1 \u8bfb\u5199 FAT \u9879\uff08fs/fat16.c\uff09 <pre><code>// \u83b7\u53d6\u7b2cn\u4e2aFAT\u9879\nstatic uint16_t get_nth_fat(uint16_t n)\n{\n    uint8_t *fat = (uint8_t *) kmalloc(512); // \u5206\u914d\u4e34\u65f6FAT\u5185\u5b58\n    uint32_t fat_start = FAT1_START_LBA; // \u9ed8\u8ba4\u4eceFAT1\u4e2d\u8bfb\u53d6FAT\n    uint32_t fat_offset = n * 2; // FAT\u9879\u5728FAT\u8868\u5185\u7684\u504f\u79fb\uff0cFAT16\u4e00\u4e2aFAT\u662f16\u4f4d\uff0c\u53732\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u4e582\n    uint32_t fat_sect = fat_start + (fat_offset / 512); // \u8be5FAT\u9879\u5bf9\u5e94\u7684\u6247\u533a\u7f16\u53f7\n    uint32_t sect_offset = fat_offset % 512; // \u8be5FAT\u9879\u5728\u6247\u533a\u5185\u7684\u504f\u79fb\n    hd_read(fat_sect, 1, fat); // \u8bfb\u53d6\u5bf9\u5e94\u7684\u4e00\u4e2a\u6247\u533a\u5230FAT\u5185\uff08\u7531\u4e8e*2\uff0cFAT\u9879\u5fc5\u7136\u4e0d\u8de8\u6247\u533a\uff09\n    uint16_t table_val = *(uint16_t *) &amp;fat[sect_offset]; // \u4eceFAT\u8868\u4e2d\u627e\u5230\u5bf9\u5e94\u7684FAT\u9879\n    kfree(fat); // \u4e34\u65f6FAT\u8868\u5c31\u7528\u4e0d\u4e0a\u4e86\n    return table_val; // \u8fd4\u56de\u5bf9\u5e94\u7684FAT\u9879\n}\n\n// \u8bbe\u7f6e\u7b2cn\u4e2aFAT\u9879\nstatic void set_nth_fat(uint16_t n, uint16_t val)\n{\n    int fat_start = FAT1_START_LBA; // FAT1\u8d77\u59cb\u6247\u533a\n    int second_fat_start = FAT1_START_LBA + FAT1_SECTORS; // FAT2\u8d77\u59cb\u6247\u533a\n    uint8_t *fat = (uint8_t *) kmalloc(512); // \u4e34\u65f6FAT\u8868\n    uint32_t fat_offset = n * 2; // FAT\u9879\u5728FAT\u8868\u5185\u7684\u504f\u79fb\n    uint32_t fat_sect = fat_start + (fat_offset / 512); // FAT\u9879\u5728FAT1\u4e2d\u5bf9\u5e94\u7684\u6247\u533a\u53f7\n    uint32_t second_fat_sect = second_fat_start + (fat_offset / 512); // FAT\u9879\u5728FAT2\u4e2d\u5bf9\u5e94\u7684\u6247\u533a\u53f7\n    uint32_t sect_offset = fat_offset % 512; // FAT\u9879\u5728\u6247\u533a\u5185\u7684\u504f\u79fb\n    hd_read(fat_sect, 1, fat); // \u8bfb\u5165\u5230\u4e34\u65f6FAT\u8868\n    *(uint16_t *) &amp;fat[sect_offset] = val; // \u76f4\u63a5\u8bbe\u7f6e\u5bf9\u5e94\u7684FAT\u9879\u5373\u53ef\uff0cFAT16\u6ca1\u6709\u90a3\u4e48\u591a\u5f2f\u5f2f\u7ed5\n    hd_write(fat_sect, 1, fat); // \u5199\u5165FAT1\n    hd_write(second_fat_sect, 1, fat); // \u5199\u5165FAT2\n    kfree(fat); // \u91ca\u653e\u4e34\u65f6FAT\u8868\n}\n</code></pre></p> <p>\u5177\u4f53\u7ec6\u8282\u4ecd\u65e7\u5199\u5728\u4e86\u6ce8\u91ca\u91cc\u3002\u5177\u4f53\u800c\u8a00\uff0c\u4e3a\u4e86\u8282\u7701\u786c\u76d8 IO \u7684\u65f6\u95f4\uff08\u867d\u7136\u8bfb\u53d6\u6839\u76ee\u5f55\u7591\u4f3c\u4e5f\u662f 32 \u4e2a\u6247\u533a\uff09\uff0c\u6240\u4ee5\u5728\u8bfb\u53d6 FAT \u9879\u65f6\uff0c\u53ea\u8bfb\u53d6\u8981\u8bfb\u7684 FAT \u9879\u6240\u5728\u7684\u90a3\u4e2a\u6247\u533a\u3002\u7531\u4e8e\u4e00\u4e2a FAT \u9879\u5360\u4e24\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u7b2c <code>n</code> \u4e2a FAT \u9879\u5c31\u4f4d\u4e8e\u5230 FAT \u8868\u5f00\u59cb\u7684\u7b2c <code>2n</code> \u4e2a\u5b57\u8282\uff0c\u968f\u540e\u5c31\u53ef\u4ee5\u8ba1\u7b97\u6247\u533a\u6570\u548c\u6247\u533a\u5185\u7684\u504f\u79fb\u91cf\u4e86\u3002</p> <p>\u63a5\u4e0b\u6765\u5c31\u662f\u7ed9\u51fa\u7c07\u53f7\uff0c\u8bfb\u5199\u5bf9\u5e94\u7684\u7c07\u7684\u51fd\u6570\u4e86\uff1a</p> <p>\u4ee3\u7801 19-2 \u8bfb\u5199\u4e00\u4e2a\u7c07\uff08fs/fat16.c\uff09 <pre><code>// \u8bfb\u53d6\u7b2cn\u4e2aclust\nstatic void read_nth_clust(uint16_t n, void *clust)\n{\n    hd_read(n + SECTOR_CLUSTER_BALANCE, 1, clust);\n}\n\n// \u5199\u5165\u7b2cn\u4e2aclust\nstatic void write_nth_clust(uint16_t n, const void *clust)\n{\n    hd_write(n + SECTOR_CLUSTER_BALANCE, 1, (void *) clust);\n}\n</code></pre></p> <p>\u5176\u4e2d <code>SECTOR_CLUSTER_BALANCE</code> \u5b9a\u4e49\u4e8e <code>include/file.h</code>\uff0c\u5176\u503c\u4e3a <code>DATA_START_LBA - 2</code>\u3002\u5177\u4f53\u539f\u56e0\uff0c\u662f\u56e0\u4e3a\u7c07\u53f7\u8981\u51cf\u53bb 2 \u624d\u662f\u6570\u636e\u533a\u4e2d\u7684\u6247\u533a\u7f16\u53f7\uff0c\u6240\u4ee5\u5728\u628a\u7c07\u53f7\u52a0\u4e0a\u6570\u636e\u533a\u4ee5\u627e\u5230\u5bf9\u5e94\u6247\u533a\u7684\u540c\u65f6\uff0c\u8fd8\u8981\u518d\u51cf\u53bb 2 \u4ee5\u627e\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\u3002</p> <p>\u6709\u4e86\u8bfb\u53d6 FAT \u9879\u548c\u8bfb\u53d6\u4e00\u4e2a\u7c07\u7684\u624b\u6bb5\uff0c\u5b9e\u73b0\u8bfb\u53d6\u6587\u4ef6\u51e0\u4e4e\u662f\u6c34\u5230\u6e20\u6210\u7684\uff0c\u5176\u5177\u4f53\u64cd\u4f5c\u5982\u4e0b\uff1a</p> <p>1.\u6839\u636e\u6253\u5f00\u7684 fileinfo_t \u627e\u5230\u7b2c\u4e00\u4e2a\u7c07\u53f7\u3002 2.\u8bfb\u53d6\u7b2c\u4e00\u4e2a\u7c07\u5230\u7f13\u51b2\u533a\u3002 3.\u8bfb\u53d6\u8be5\u7c07\u53f7\u5bf9\u5e94\u7684 FAT \u9879\uff0c\u627e\u5230\u8be5\u6587\u4ef6\u4e0b\u4e00\u4e2a\u7c07\u7684\u7c07\u53f7\u3002 4.\u82e5\u8be5 FAT \u9879\u5927\u4e8e\u7b49\u4e8e <code>0xfff8</code>\uff0c\u5219\u6587\u4ef6\u7ed3\u675f\uff0c\u7ec8\u6b62\u5faa\u73af\u3002 5.\u5047\u88c5\u4e0b\u4e00\u4e2a\u7c07\u662f\u7b2c\u4e00\u4e2a\u7c07\uff0c\u91cd\u590d 2~5\u3002</p> <p>\u5c06\u4e0a\u9762\u7684\u601d\u8def\u5316\u4e3a\u4ee3\u7801\uff0c\u5c31\u5f97\u5230\u4e86\uff1a</p> <p>\u4ee3\u7801 19-3 \u8bfb\u53d6\u6587\u4ef6\uff08fs/fat16.c\uff09 <pre><code>// \u8bfb\u53d6\u6587\u4ef6\uff0c\u5f53\u7136\u8981\u6709\u7d20\u8d28\u5730\u4e00\u6b21\u8bfb\u6574\u4e2a\u6587\u4ef6\u5566\nint fat16_read_file(fileinfo_t *finfo, void *buf)\n{\n    uint16_t clustno = finfo-&gt;clustno; // finfo\u4e2d\u8bb0\u5f55\u7684\u7b2c\u4e00\u4e2a\u7c07\u53f7\n    char *clust = (char *) kmalloc(512); // \u5355\u72ec\u7ed9\u7c07\u5206\u914d\u4e00\u4e2a\u7f13\u51b2\u533a\uff0c\u76f4\u63a5\u5f80buf\u91cc\u5199\u4e5f\u884c\n    do {\n        read_nth_clust(clustno, clust); // \u5c06\u8be5\u7c07\u53f7\u5bf9\u5e94\u7684\u7c07\u8bfb\u53d6\u8fdb\u6765\n        memcpy(buf, clust, 512); // \u62f7\u8d1d\u5165buf\n        buf += 512; // buf\u540e\u63a8\u4e00\u4e2a\u6247\u533a\n        clustno = get_nth_fat(clustno); // \u83b7\u53d6\u4e0b\u4e00\u4e2a\u7c07\u53f7\n        if (clustno &gt;= 0xFFF8) break; // \u6587\u4ef6\u7ed3\u675f\uff0c\u9000\u51fa\u5faa\u73af\n    } while (1);\n    kfree(clust); // \u8bfb\u5b8c\u4e86\uff0c\u91ca\u653e\u4e34\u65f6\u7f13\u51b2\u533a\n    return 0; // \u8fd4\u56de\n}\n</code></pre></p> <p>\u5982\u4f60\u6240\u89c1\uff0c\u8fd9\u4e2a\u8bfb\u53d6\u6587\u4ef6\u7684\u51fd\u6570\u975e\u5e38\u4e4b\u77ed\uff0c\u751a\u81f3\u6bd4\u524d\u9762\u7684\u521b\u5efa\u548c\u6253\u5f00\u8fd8\u77ed\uff0c\u53ea\u6709 15 \u884c\uff0c\u548c\u8bfb\u5199 FAT \u7684\u5355\u4e2a\u51fd\u6570\u5dee\u4e0d\u591a\u957f\u3002\u8fd9\u5c31\u662f FAT16 \u7684\u7b80\u5355\u4e4b\u5904\u3002</p> <p>\u4f5c\u4e3a\u6d4b\u8bd5\uff0c\u4e0a\u4e00\u8282\u6211\u4eec\u5199\u5165\u4e86\u6587\u4ef6 <code>ilovehon.kai</code>\uff0c\u73b0\u5728\u662f\u65f6\u5019\u540c\u65f6\u5bf9\u6253\u5f00\u6587\u4ef6\u548c\u8bfb\u53d6\u6587\u4ef6\u8fdb\u884c\u4e00\u6b21\u6d4b\u8bd5\u4e86\u3002\u66ff\u6362\u6389\u4e0a\u4e00\u8282\u7684\u521b\u5efa\u6587\u4ef6\u6d4b\u8bd5\u4ee3\u7801\uff0c\u7f16\u5199\u6d4b\u8bd5\u4ee3\u7801\u5982\u4e0b\uff1a</p> <p>\u4ee3\u7801 19-4 \u8bfb\u53d6\u6d4b\u8bd5\uff08fs/fat16.c\uff09 <pre><code>    fileinfo_t finfo;\n    int status = fat16_open_file(&amp;finfo, \"ilovehon.kai\"); // \u6253\u5f00\u6587\u4ef6 ilovehon.kai\n    printk(\"open status: %d\\n\", status);\n    if (status == -1) while (1); // \u82e5\u6253\u5f00\u5931\u8d25\u5c31\u4e0d\u7528\u8bfb\u4e86\n    char *buf = (char *) kmalloc(finfo.size + 5);\n    status = fat16_read_file(&amp;finfo, buf);\n    printk(\"read status: %d\\nfile content: %s\\n\", status, buf);\n    kfree(buf);\n</code></pre></p> <p></p> <p>\uff08\u56fe 19-1 \u8bfb\u53d6\u6210\u529f\uff0c\u8fd9\u91cc\u663e\u793a\u7684\u5e94\u5f53\u662f\u4e0a\u4e00\u8282\u586b\u5145\u7684\u6d4b\u8bd5\u5185\u5bb9\uff09</p> <p>\u4e00\u523b\u4e5f\u6ca1\u6709\u4e3a\u8bfb\u53d6\u6587\u4ef6\u7684\u8fc5\u901f\u7ed3\u675f\u800c\u54c0\u60bc\uff0c\u7acb\u523b\u8d76\u5230\u6218\u573a\u7684\u662f\u2014\u2014\u5220\u9664\u6587\u4ef6\uff01</p> <p>\u60f3\u8981\u5220\u9664\u4e00\u4e2a\u6587\u4ef6\uff0c\u5e76\u4e0d\u9700\u8981\u628a\u6587\u4ef6\u7684\u6240\u6709\u5185\u5bb9\u90fd\u968f\u673a 01 \u5566\u3001\u8bbe\u6210 0 \u6216 1 \u5566\u8fd9\u4e9b\uff0c\u975e\u5e38\u7b80\u5355\uff0c\u4f60\u53ea\u9700\u8981\u8ba9\u8fd9\u4e2a\u6587\u4ef6\u65e0\u6cd5\u88ab\u627e\u5230\u5c31\u53ef\u4ee5\u4e86\u3002</p> <p>\u8fd9\u91cc\u603b\u7b97\u53ef\u4ee5\u586b\u4e0a\u524d\u9762\u6316\u7684\u4e00\u4e2a\u5751\u4e86\uff1a</p> <p>\u5e76\u4e14\u5728\u7b2c\u4e00\u4e2a\u5b57\u8282\u4e3a 0xe5 \u65f6\u8981\u81ea\u52a8\u66ff\u6362\u4e3a 0x05</p> <p>\u8fd9\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f\u6b63\u662f\u56e0\u4e3a\u5728 FAT \u6587\u4ef6\u7cfb\u7edf\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u5b57\u8282\u4e3a 0xe5 \u7684\u6587\u4ef6\u88ab\u89c6\u4e3a\u201c\u5df2\u7ecf\u5220\u9664\u201d\uff0c\u6240\u4ee5\u624d\u8981\u7279\u610f\u548c\u8c10\u4e00\u4e0b\u3002</p> <p>\u90a3\u4e48\uff0c\u65e2\u7136\u8fd9\u6837\u5c31\u76f8\u5f53\u4e8e\u5728\u6839\u76ee\u5f55\u533a\u91cc\u6d88\u5931\u4e86\uff0c\u6570\u636e\u533a\u7684\u7c07\u53c8\u53ef\u4ee5\u8d56\u7740\uff0c\u4e00\u4e2a\u6587\u4ef6\u6240\u5269\u7684\u8d44\u6e90\u5c31\u53ea\u6709 FAT \u9879\u4e86\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5728\u5220\u9664\u4e00\u4e2a\u6587\u4ef6\u65f6\uff0c\u5b83\u6240\u5728\u7684 FAT \u9879\u4e5f\u8981\u5168\u90e8\u8bbe\u7f6e\u4e3a 0\u3002</p> <p>\u53ea\u8981\u6ce8\u610f\u8fd9\u4e24\u70b9\uff0c\u90a3\u4e48\u5b9e\u73b0\u5220\u9664\u6587\u4ef6\u4e5f\u5c31\u76f8\u5f53\u7b80\u5355\uff1a</p> <p>\u4ee3\u7801 19-5 \u5220\u9664\u6587\u4ef6\uff08fs/fat16.c\uff09 <pre><code>// \u5220\u9664\u6587\u4ef6\nint fat16_delete_file(char *filename) // \u4ec0\u4e48\uff1f\u4e3a\u4ec0\u4e48\u4e0d\u4f20finfo\uff1f\u5220\u9664\u4e00\u4e2a\u5df2\u7ecf\u6253\u5f00\u7684\u6587\u4ef6\uff0c\u542c\u4e0a\u53bb\u5f88\u522b\u626d\u4e0d\u662f\u5417\uff08\u867d\u7136\u5728Linux\u4e0b\u8fd9\u5f88\u6b63\u5e38\uff09\n{\n    char sfn[20] = {0};\n    int ret = lfn2sfn(filename, sfn); // \u5c06\u6587\u4ef6\u540d\u8f6c\u6362\u4e3a8.3\u6587\u4ef6\u540d\n    if (ret) return -1;\n    int entries;\n    fileinfo_t *root_dir = read_dir_entries(&amp;entries); // \u8bfb\u53d6\u6839\u76ee\u5f55\n    int file_ind = -1;\n    for (int i = 0; i &lt; entries; i++) {\n        if (!memcmp(root_dir[i].name, sfn, 8) &amp;&amp; !memcmp(root_dir[i].ext, sfn + 8, 3)) {\n            file_ind = i; // \u627e\u5230\u5bf9\u5e94\u6587\u4ef6\u4e86\n            break;\n        }\n    }\n    if (file_ind == -1) { // \u6ca1\u6709\u627e\u5230\n        kfree(root_dir); // \u4e0d\u7528\u5220\u4e86\n        return -1;\n    }\n    root_dir[file_ind].name[0] = 0xe5; // \u6807\u8bb0\u4e3a\u5df2\u5220\u9664\n    hd_write(ROOT_DIR_START_LBA, ROOT_DIR_SECTORS, root_dir); // \u66f4\u65b0\u6839\u76ee\u5f55\u533a\u6570\u636e\n    kfree(root_dir); // \u91ca\u653e\u4e34\u65f6\u7f13\u51b2\u533a\n    if (root_dir[file_ind].clustno == 0) {\n        return 0; // \u5185\u5bb9\u7a7a\u7a7a\uff0c\u90a3\u5c31\u5230\u8fd9\u91cc\u5c31\u53ef\u4ee5\u4e86\n    }\n    unsigned short clustno = root_dir[file_ind].clustno, next_clustno; // \u5f00\u59cb\u6e05\u7406\u6587\u4ef6\u6240\u5360\u6709\u7684\u7c07\n    while (1) {\n        next_clustno = get_nth_fat(clustno); // \u627e\u5230\u8fd9\u4e2a\u6587\u4ef6\u4e0b\u4e00\u4e2a\u7c07\u7684\u7c07\u53f7\n        set_nth_fat(clustno, 0); // \u628a\u4e0b\u4e00\u4e2a\u7c07\u7684\u7c07\u53f7\u8bbe\u4e3a0\uff0c\u8fd9\u6837\u5c31\u627e\u4e0d\u5230\u4e0b\u4e00\u4e2a\u7c07\u4e86\n        if (next_clustno &gt;= 0xfff8) break; // \u5df2\u7ecf\u5220\u5b8c\u4e86\uff0c\u76f4\u63a5\u8fd4\u56de\n        clustno = next_clustno; // \u4e0b\u4e00\u4e2a\u7c07\u8bbe\u4e3a\u5f53\u524d\u7c07\n    }\n    return 0; // \u5220\u9664\u5b8c\u6210\n}\n</code></pre></p> <p>\u540c\u6837\uff0c\u5177\u4f53\u7ec6\u8282\u53c2\u89c1\u6ce8\u91ca\u3002</p> <p>\u4e0b\u9762\u662f\u6d4b\u8bd5\u73af\u8282\u3002\u6211\u4eec\u5728\u4e0a\u4e00\u8282\u6d4b\u8bd5\u521b\u5efa\u6587\u4ef6\u65f6\u521b\u5efa\u4e86\u4e00\u4e2a <code>iloveado.fai</code> \u6587\u4ef6\uff0c\u73b0\u5728\u6211\u4eec\u6765\u5220\u9664\u5b83\u3002</p> <p>\u4ee3\u7801 19-6 \u5220\u9664\u6587\u4ef6\u6d4b\u8bd5\uff08kernel/main.c\uff09 <pre><code>    fileinfo_t finfo;\n    int status = fat16_delete_file(\"iloveado.fai\");\n    printk(\"delete status: %d\\n\", status);\n</code></pre></p> <p>\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u6548\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\uff08\u56fe 19-2 \u5220\u9664\u6587\u4ef6\u7591\u4f3c\u6210\u529f\uff09</p> <p>\u5728\u547d\u4ee4\u884c\u4e2d\u8c03\u7528 <code>ftls</code>\uff0c\u786e\u8ba4\u5220\u9664\u6210\u529f\uff1a</p> <p></p> <p>\uff08\u56fe 19-3 \u5220\u9664\u6210\u529f\uff09</p> <p>\u73b0\u5728\uff0c\u672c\u8282\u6700\u7b80\u5355\u7684\u4e24\u4e2a\u64cd\u4f5c\u2014\u2014\u8bfb\u53d6\u548c\u5220\u9664\uff0c\u5df2\u7ecf\u5b8c\u6210\uff0c\u6211\u4eec\u6765\u8fdb\u653b\u6700\u540e\u4e00\u4e2a\u636e\u70b9\u2014\u2014\u5199\u5165\u3002\u53ea\u8981\u5199\u5165\u6587\u4ef6\u5b8c\u6210\uff0c\u540e\u9762\u5c31\u90fd\u662f\u8f6f\u4ef6\u4e0a\u7684\u4e8b\u4e86\u3002</p> <p>\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u5728\u5199\u5165\u6587\u4ef6\u65f6\uff0c\u53ea\u652f\u6301\u5c06\u6574\u4e2a\u6587\u4ef6\u5168\u90e8\u8986\u76d6\u3002\u76f8\u4fe1\u4e00\u4e9b\u5f00\u53d1\u7ecf\u9a8c\u6bd4\u8f83\u4e30\u5bcc\u7684\u8bfb\u8005\u5df2\u7ecf\u8981\u8bf4\u4e86\uff1a</p> <p>\u53ef\u662f\u6211\u7528\u8fc7 fseek/lseek\uff0c\u53ef\u4ee5\u5728\u4efb\u610f\u4f4d\u7f6e\u8fdb\u884c\u5199\u5165\u5440\u3002</p> <p>\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u8fd9\u4e9b\u4e1c\u897f\u6211\u4eec\u53ef\u4ee5\u7528\u7eaf\u8f6f\u4ef6\u6765\u5b9e\u73b0\uff0c\u5c31\u4e0d\u9ebb\u70e6 FAT16 \u7684\u5e95\u5c42\u5b9e\u73b0\u4e86\u3002</p> <p>\u5b9e\u73b0\u5199\u5165\u6587\u4ef6\u4e3b\u8981\u7684\u95ee\u9898\u5728\u4e8e\u8981\u5904\u7406\u7684\u95ee\u9898\u592a\u591a\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a</p> <ol> <li>\u5982\u679c\u662f\u7b2c\u4e00\u6b21\u5199\u5165\u7684\u8bdd\uff0c\u9700\u8981\u5206\u914d\u4e00\u4e2a\u9996\u7c07\u53f7\u3002</li> <li>\u53ef\u80fd\u4f1a\u51fa\u73b0\u7c07\u6df7\u4e71\u7684\u60c5\u51b5\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u9700\u8981\u518d\u91cd\u65b0\u627e\u4e00\u4e2a\u65b0\u7c07\u3002</li> <li>\u5982\u679c\u5199\u5165\u7684\u90e8\u5206\u8d85\u51fa\u539f\u6709\u7684\uff0c\u8fd8\u662f\u8981\u5206\u914d\u65b0\u7c07\u3002</li> <li>\u5982\u679c\u5199\u5165\u7684\u90e8\u5206\u5c11\u4e8e\u539f\u6709\u7684\uff0c\u9700\u8981\u628a\u539f\u6765\u7684\u7c07\u53f7\u91ca\u653e\u3002</li> <li>\u9700\u8981\u91cd\u65b0\u5199\u5165\u5f53\u524d\u65e5\u671f/\u65f6\u95f4\uff0c\u4ee5\u53ca\u5927\u5c0f\u7b49\u3002</li> </ol> <p>\u5bf9\u4e8e\u4e0a\u9762\u7684\u51e0\u4e2a\u4e1c\u897f\uff0c\u6211\u4eec\u6765\u5206\u6b65\u89e3\u51b3\u3002\u8fd9\u4e00\u90e8\u5206\u4ee3\u7801\u7684\u6ce8\u91ca\u975e\u5e38\u91cd\u8981\uff0c\u8bf7\u8ba4\u771f\u9605\u8bfb\uff08\uff1f\uff09</p> <p>\u9996\u5148\uff0c\u9488\u5bf9\u7b2c\u4e00\u6b21\u5199\u5165\u9700\u8981\u5206\u914d\u9996\u7c07\u53f7\u7684\u95ee\u9898\uff0c\u6211\u4eec\u6dfb\u52a0\u4e86\u4e00\u4e2a\u5224\u65ad\uff1a</p> <p>\u4ee3\u7801 19-7 \u5199\u5165\u6587\u4ef6\uff081\uff09\u2014\u2014\u4e3a\u7b2c\u4e00\u6b21\u5199\u5165\u7684\u7a7a\u6587\u4ef6\u5206\u914d\u7c07\u53f7\uff08fs/fat16.c\uff09 <pre><code>// \u5199\u5165\u6587\u4ef6\uff0c\u4e3a\u7b80\u5355\u8d77\u89c1\u76f8\u5f53\u4e8e\u8986\u76d6\u4e86\nint fat16_write_file(fileinfo_t *finfo, const void *buf, uint32_t size)\n{\n    uint16_t clustno = finfo-&gt;clustno, next_clustno; // \u4ece\u5df2\u6709\u9996\u7c07\u53f7\u5f00\u59cb\n    if (finfo-&gt;size == 0 &amp;&amp; finfo-&gt;clustno == 0) { // \u6ca1\u6709\u9996\u7c07\u53f7\n        clustno = 2; // \u4ece\u7b2c2\u4e2a\u7c07\u5f00\u59cb\u5206\u914d\n        while (1) {\n            if (get_nth_fat(clustno) == 0) { // \u5f53\u524d\u7c07\u7a7a\u95f2\n                finfo-&gt;clustno = clustno; // \u5206\u914d\n                break; // \u5df2\u627e\u5230\u7a7a\u95f2\u7c07\u53f7\n            }\n            clustno++; // \u7ee7\u7eed\u5bfb\u627e\u4e0b\u4e00\u4e2a\u7c07\n        }\n    }\n    finfo-&gt;size = size; // \u66f4\u65b0\u5927\u5c0f\n</code></pre></p> <p>\u518d\u7136\u540e\uff0c\u662f\u5199\u5165\u7684\u4e3b\u4f53\u90e8\u5206\uff0c\u8fd9\u91cc\u8981\u5904\u7406\u7684\u95ee\u9898\u6bd4\u8f83\u590d\u6742\u3002</p> <p>\u4ee3\u7801 19-8 \u5199\u5165\u6587\u4ef6\uff082\uff09\u2014\u2014\u5199\u5165\u6587\u4ef6\u4e3b\u4f53\uff08fs/fat16.c\uff09 <pre><code>    int write_sects = (size + 511) / 512; // \u786e\u8ba4\u8981\u5199\u5165\u7684\u6247\u533a\u603b\u6570\uff0c\u8fd9\u91cc\u5411\u4e0a\u820d\u5165\n    while (write_sects) { // \u53ea\u8981\u8fd8\u8981\u5199\n        write_nth_clust(clustno, buf); // \u5c06\u5f53\u524dbuf\u7684512\u5b57\u8282\u5199\u5165\u5bf9\u5e94\u7c07\u4e2d\n        write_sects--; // \u8981\u5199\u5165\u6247\u533a\u603b\u6570-1\n        buf += 512; // buf\u540e\u79fb\u4e00\u4e2a\u6247\u533a\n        next_clustno = get_nth_fat(clustno); // \u5bfb\u627e\u4e0b\u4e00\u4e2a\u7c07\n        if (next_clustno == 0 || next_clustno &gt;= 0xfff8) {\n            // \u5f53\u524d\u7c07\u4e0d\u53ef\u7528\n            next_clustno = clustno + 1; // \u4ece\u4e0b\u4e00\u4e2a\u7c07\u5f00\u59cb\n            while (1) {\n                if (get_nth_fat(next_clustno) == 0) { // \u8fd9\u4e2a\u7c07\u662f\u53ef\u7528\u7684\n                    set_nth_fat(clustno, next_clustno); // \u5c06\u8fd9\u4e2a\u7c07\u5f53\u6210\u4e0b\u4e00\u4e2a\u7c07\u94fe\u63a5\u4e0a\u53bb\n                    break;\n                } else next_clustno++; // \u5426\u5219\uff0c\u53ea\u597d\u7ee7\u7eed\u4e86\n            }\n        }\n        clustno = next_clustno; // \u5c06\u4e0b\u4e00\u4e2a\u7c07\u770b\u505a\u5f53\u524d\u7c07\n    }\n</code></pre></p> <p>\u6700\u540e\uff0c\u662f\u6536\u5c3e\u7684\u90e8\u5206\u3002</p> <p>\u4ee3\u7801 19-9 \u5199\u5165\u6587\u4ef6\uff083\uff09\u2014\u2014\u626b\u5c3e\uff08fs/fat16.c\uff09 <pre><code>    // \u6700\u540e\u4fee\u6539\u4e00\u4e0b\u6587\u4ef6\u5c5e\u6027\n    current_time_t ctime;\n    get_current_time(&amp;ctime); // \u83b7\u53d6\u5f53\u524d\u65e5\u671f\n    // \u66f4\u65b0\u65e5\u671f\u548c\u65f6\u95f4\n    finfo-&gt;date = ((ctime.year - 1980) &lt;&lt; 9) | (ctime.month &lt;&lt; 5) | ctime.day;\n    finfo-&gt;time = (ctime.hour &lt;&lt; 11) | (ctime.min &lt;&lt; 5) | ctime.sec;\n    int entries;\n    fileinfo_t *root_dir = read_dir_entries(&amp;entries);\n    for (int i = 0; i &lt; entries; i++) {\n        if (!memcmp(root_dir[i].name, finfo-&gt;name, 8) &amp;&amp; !memcmp(root_dir[i].ext, finfo-&gt;ext, 3)) {\n            root_dir[i] = *finfo; // \u627e\u5230\u5bf9\u5e94\u7684\u6587\u4ef6\uff0c\u5199\u8fdb\u6839\u76ee\u5f55\n            break;\n        }\n    }\n    hd_write(ROOT_DIR_START_LBA, ROOT_DIR_SECTORS, root_dir); // \u540c\u6b65\u5230\u786c\u76d8\n    kfree(root_dir);\n    return 0;\n}\n</code></pre></p> <p>\u6bd4\u8f83\u5177\u4f53\u7684\u8bb2\u89e3\u90fd\u5df2\u7ecf\u5199\u5728\u6ce8\u91ca\u5f53\u4e2d\u3002</p> <p>\u597d\u4e86\uff0c\u6700\u540e\u8fd8\u662f\u6d4b\u8bd5\u73af\u8282\u3002</p> <p>\u4ee3\u7801 19-10 \u5199\u5165\u6d4b\u8bd5\uff08kernel/main.c\uff09 <pre><code>    fileinfo_t finfo;\n    int status = fat16_create_file(&amp;finfo, \"iloveado.fai\");\n    printk(\"create status: %d\\n\", status);\n    char *buf = (char *) kmalloc(512);\n    strcpy(buf, \"I love A Dance Of Fire and Ice!\");\n    status = fat16_write_file(&amp;finfo, buf, strlen(buf));\n    printk(\"write status: %d\\n\", status);\n</code></pre></p> <p>\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u6548\u679c\u5982\u4e0b\uff1a</p> <p></p> <p>\uff08\u56fe 19-4 \u5199\u5165\u6587\u4ef6\u7591\u4f3c\u6210\u529f\uff09</p> <p>\u66f4\u6362\u4e0a\u9762\u7684\u6d4b\u8bd5\u4ee3\u7801\u4e3a\uff1a</p> <p>\u4ee3\u7801 19-11 \u5199\u5165\u6d4b\u8bd5II\uff08kernel/main.c\uff09 <pre><code>    fileinfo_t finfo;\n    int status = fat16_open_file(&amp;finfo, \"iloveado.fai\");\n    printk(\"open status: %d\\n\", status);\n    char *buf = (char *) kmalloc(512);\n    status = fat16_read_file(&amp;finfo, buf);\n    printk(\"read status: %d\\nfile content: %s\\n\", status, buf);\n</code></pre></p> <p>\u518d\u6b21\u7f16\u8bd1\u8fd0\u884c\uff0c\u6548\u679c\u5982\u4e0b\uff1a</p> <p></p> <p>\uff08\u56fe 19-5 \u5199\u5165\u6587\u4ef6\u6210\u529f\uff09</p> <p>\u81f3\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u5f7b\u5e95\u5b8c\u6210\u4e86 FAT16 \u7684\u5e95\u5c42\u5b9e\u73b0\uff0c\u4e0b\u4e00\u7ae0\uff0c\u6211\u4eec\u6765\u5f7b\u5e95\u5b8c\u6210\u6587\u4ef6\u7cfb\u7edf\u7684\u5236\u4f5c\uff0c\u5b9e\u73b0\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u7684\u4e00\u5957\u7cfb\u7edf\u8c03\u7528\u3002</p>"},{"location":"os-tutorial/old/20-fat16-part3/","title":"20 \u5b9e\u73b0FAT16\u6587\u4ef6\u7cfb\u7edf\uff084\uff09\u2014\u2014\u4e0a\u5c42\u5305\u88c5","text":"<p>\u672c\u8282\u662f\u5b9e\u73b0 FAT16 \u7684\u6700\u540e\u4e00\u4e2a\u5c0f\u8282\uff0c\u6211\u4eec\u5c06\u5b9e\u73b0\u4e00\u5957\u53ef\u4f9b\u7528\u6237\u4f7f\u7528\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u5305\u62ec <code>open</code>\u3001<code>read</code>\u3001<code>write</code>\u3001<code>unlink</code> \u4ee5\u53ca <code>lseek</code>\u3002\u6709\u4e86\u8fd9\u4e94\u4e2a\u51fd\u6570\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4efb\u610f\u5730\u8fdb\u884c\u6587\u4ef6\u8bfb\u5199\u4ee5\u53ca\u5bf9\u6587\u4ef6\u8fdb\u884c\u5220\u9664\u548c\u521b\u5efa\u3002</p> <p>\u672c\u8282\u4ee3\u7801\u6781\u5927\u7a0b\u5ea6\u4e0a\u53c2\u7167\u4e86\u300a\u64cd\u4f5c\u7cfb\u7edf\u771f\u8c61\u8fd8\u539f\u300b\u4ee5\u53ca PlantOS \u7684\u4ee3\u7801\uff0c\u56e0\u6b64\u5728\u7ec6\u8282\u4e0a\u53ef\u80fd\u6709\u6240\u6b20\u7f3a\uff0c\u8bf7\u89c1\u8c05\u3002</p> <p>\u9996\u5148\uff0c\u5982\u540c\u591a\u4efb\u52a1\u4e00\u6837\uff0c\u76f4\u63a5\u628a <code>fileinfo_t</code> \u5f53\u4f5c\u4e00\u4e2a\u6587\u4ef6\u7684\u5e95\u5c42\u62bd\u8c61\u662f\u76f8\u5f53\u4e0d\u5408\u9002\u7684\uff1a\u7531\u4e8e <code>fileinfo_t</code> \u4e0e\u786c\u4ef6\u5f3a\u76f8\u5173\uff0c\u6240\u4ee5\u540e\u671f\u5c06\u96be\u4ee5\u6269\u5c55\u3002</p> <p>\u6240\u4ee5\uff0c\u6700\u7ec8\uff0c\u7ecf\u8fc7\u5305\u88c5\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a <code>file_t</code> \u7ed3\u6784\u4f53\uff0c\u7528\u4e8e\u8868\u793a\u4e00\u4e2a\u62bd\u8c61\u7684\u6587\u4ef6\u7684\u6982\u5ff5\u3002</p> <p>\u4ee3\u7801 20-1 \u6587\u4ef6\u7684\u5e95\u5c42\u62bd\u8c61\uff08include/file.h\uff09 <pre><code>typedef enum FILE_TYPE {\n    FT_USABLE,\n    FT_REGULAR,\n    FT_UNKNOWN\n} file_type_t;\n\ntypedef enum oflags {\n    O_RDONLY,\n    O_WRONLY,\n    O_RDWR,\n    O_CREAT = 4\n} oflags_t;\n\ntypedef struct FILE_STRUCT {\n    void *handle;\n    void *buffer;\n    int pos;\n    int size;\n    int open_cnt;\n    file_type_t type;\n    oflags_t flags;\n} file_t;\n</code></pre></p> <p>\u7531\u4e8e\u5b8c\u5168\u4e0d\u6253\u7b97\u5b9e\u73b0\u76ee\u5f55\uff0c\u6240\u4ee5\u5728 <code>file_type_t</code> \u91cc\uff0c\u53ea\u6709 <code>FT_REGULAR</code> \u4e00\u79cd\u6b63\u5e38\u503c\uff0c\u5269\u4e0b\u4e24\u4e2a\u4e00\u4e2a\u7528\u4e8e\u5224\u65ad\u6587\u4ef6\u662f\u5426\u5df2\u88ab\u5360\u7528\uff0c\u53e6\u4e00\u4e2a\u5219\u6ca1\u4ec0\u4e48\u7528\u3002</p> <p>\u81f3\u4e8e <code>O_RDONLY</code> \u8fd9\u4e9b\uff0c\u5219\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5224\u65ad\u8bfb\u5199\u7684\u5c0f\u673a\u5236\uff0c\u8fd9\u6837\u53ef\u4ee5\u521b\u5efa\u53ea\u8bfb\u4ee5\u53ca\u53ea\u5199\u7684\u6587\u4ef6\uff0c\u867d\u7136\u8fd9\u6ca1\u4ec0\u4e48\u7528\u5427\u3002</p> <p>\u518d\u5f80\u4e0b\u7684 <code>file_t</code> \u53ef\u4ee5\u8bf4\u662f\u5341\u5206\u7075\u6d3b\uff0c\u6211\u4eec\u751a\u81f3\u6ca1\u6709\u9650\u5236 <code>handle</code> \u5fc5\u987b\u662f <code>fileinfo_t</code>\uff0c\u4f60\u5f80\u91cc\u9762\u585e\u4ec0\u4e48\u725b\u9b3c\u86c7\u795e\u90fd\u884c\uff0c\u53ea\u8981\u4f60\u80fd\u5728\u540e\u9762\u7684 <code>read</code> \u8fd9\u4e9b\u5730\u65b9\u5706\u56de\u6765\u3002</p> <p>\u8fd9\u4e2a <code>buffer</code> \u5177\u4f53\u7684\u7528\u5904\u5230\u540e\u9762 <code>read</code> \u548c <code>write</code> \u65f6\u518d\u8bb2\u3002</p> <p>\u4e0b\u9762\u7684 <code>pos</code> \u5219\u662f\u4ee3\u8868\u6587\u4ef6\u7684\u8bfb\u5199\u4f4d\u7f6e\uff0c<code>lseek</code> \u79fb\u52a8\u7684\u5c31\u662f\u5b83\u3002</p> <p>\u6700\u540e\u7684 <code>open_cnt</code> \u6682\u65f6\u6ca1\u7528\uff0c\u5927\u6982\u5230\u4e86\u4e0b\u4e00\u8282\u6216\u8005\u6700\u540e\u4e00\u8282\u624d\u4f1a\u6709\u7528\u3002</p> <p>\u4e0b\u9762\u662f\u4e00\u4e9b\u5c0f\u5c0f\u7684\u6539\u52a8\uff1a\u5b9e\u9645\u4e0a\uff0c\u6253\u5f00\u6587\u4ef6\u7684\u64cd\u4f5c\u662f\u7531\u4efb\u52a1\u6267\u884c\u7684\uff0c\u6240\u4ee5\u81f3\u5c11\u5728\u4efb\u52a1\u7684\u5c42\u9762\uff0c\u5e94\u8be5\u5bf9\u6587\u4ef6\u7ed9\u4e88\u4e00\u4e9b\u652f\u6301\u3002</p> <p>\u4ee3\u7801 20-2 \u65b0\u7248 <code>task_t</code> \u7ed3\u6784\u4f53\uff08include/mtask.h\uff09 <pre><code>#define MAX_FILE_OPEN_PER_TASK 32\n\ntypedef struct TASK {\n    uint32_t sel;\n    int32_t flags;\n    exit_retval_t my_retval;\n    int fd_table[MAX_FILE_OPEN_PER_TASK]; // here\n    tss32_t tss;\n} task_t;\n</code></pre></p> <p>\u4e0e Linux 0.01 \u4e0d\u540c\u7684\u662f\uff0c\u8fd9\u91cc\u5e76\u672a\u76f4\u63a5\u5b58\u50a8 <code>file_t</code>\uff0c\u800c\u662f\u5b58\u50a8\u4e86\u4e00\u4e2a <code>int</code>\uff0c\u5b83\u4ee3\u8868\u5bf9\u5e94\u7684 <code>file_t</code> \u5728\u4e00\u4e2a\u6587\u4ef6\u8868\u4e2d\u7684\u7d22\u5f15\u3002\u8fd9\u4e48\u505a\u7684\u76ee\u7684\u662f\u8282\u7701\u7a7a\u95f4\uff0c\u4ee5\u53ca\u53ef\u80fd\u5e26\u6765\u7684\u66f4\u9ad8\u6c28\u919b\u6027\u2014\u2014\u6bd5\u7adf\u7406\u8bba\u4e0a\u53ef\u4ee5\u987a\u7740 <code>malloc</code>\uff08\u867d\u7136\u8fd8\u6ca1\u5b9e\u73b0\uff09\u627e\u5230 <code>task_t</code> \u6765\u7ed9\u6587\u4ef6\u4e00\u9505\u7aef\u4e86\uff08\u786e\u4fe1\uff09\u3002</p> <p>\u8fd9\u4e2a\u6570\u7ec4\u9700\u8981\u5728 <code>task_alloc</code> \u65f6\u8fdb\u884c\u521d\u59cb\u5316\uff1a</p> <p>\u4ee3\u7801 20-3 \u521d\u59cb\u5316\u4efb\u52a1\u4e2d\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u8868\uff08kernel/mtask.c\uff09 <pre><code>            task-&gt;fd_table[0] = 0; // \u6807\u51c6\u8f93\u5165\uff0c\u5360\u4f4d\n            task-&gt;fd_table[1] = 1; // \u6807\u51c6\u8f93\u51fa\uff0c\u5360\u4f4d\n            task-&gt;fd_table[2] = 2; // \u6807\u51c6\u9519\u8bef\uff0c\u5360\u4f4d\n            for (int i = 3; i &lt; MAX_FILE_OPEN_PER_TASK; i++) {\n                task-&gt;fd_table[i] = -1; // \u5176\u4f59\u6587\u4ef6\u5747\u53ef\u7528\n            }\n</code></pre></p> <p>\u7136\u540e\uff0c\u5728 <code>fs/file.c</code> \u4e2d\uff0c\u6211\u4eec\u6765\u6dfb\u52a0\u8fd9\u4e2a\u6587\u4ef6\u8868\uff1a</p> <p>\u4ee3\u7801 20-4 \u521b\u5efa\u6587\u4ef6\u8868\uff08fs/file.c\uff09 <pre><code>#include \"file.h\"\n#include \"mtask.h\"\n#include \"memory.h\"\n\nstatic file_t file_table[MAX_FILE_NUM];\n</code></pre></p> <p>\u7136\u540e\u6211\u4eec\u9700\u8981\u63d0\u4f9b\u4e00\u4e2a/\u4e00\u7ec4\u628a <code>fileinfo_t</code> \u8f6c\u6362\u4e3a <code>file_t</code> \u5e76\u5b89\u88c5\u5230\u5f53\u524d\u4efb\u52a1\u5f53\u4e2d\u7684\u51fd\u6570\uff0c\u8fd9\u7531\u4e0b\u9762\u7684 <code>install_to_global</code> \u548c <code>install_to_local</code> \u5b9e\u73b0\uff1a</p> <p>\u4ee3\u7801 20-5 \u5c06 <code>fileinfo_t</code> \u5b89\u88c5\u5230\u4efb\u52a1\uff08fs/file.c\uff09 <pre><code>static int install_to_global(fileinfo_t finfo)\n{\n    int i = MAX_FILE_NUM;\n    for (i = 0; i &lt; MAX_FILE_NUM; i++) {\n        if (file_table[i].type == FT_USABLE) break; // \u5f53\u524d\u6587\u4ef6\u7a7a\u95f2\uff0c\u5219\u5360\u7528\n    }\n    if (i == MAX_FILE_NUM) return -1; // \u6ca1\u6709\u6587\u4ef6\u7a7a\u95f2\uff0c\u5219\u9000\u51fa\n    fileinfo_t *safer_finfo = (fileinfo_t *) kmalloc(sizeof(fileinfo_t)); // \u5206\u914d\u4e00\u4e2afinfo\u6307\u9488\uff0c\u51c6\u5907\u6302\u5230handle\u4e0a\n    if (!safer_finfo) return -1;\n    *safer_finfo = finfo; // \u88c5\u5165\n    file_table[i].handle = safer_finfo; // \u8fd9\u5c31\u662f\u5176\u5185\u90e8\u7684handle\n    file_table[i].type = FT_REGULAR; // \u7c7b\u578b\u4e3a\u6b63\u5e38\u6587\u4ef6\n    file_table[i].pos = 0; // \u7531\u4e8e\u521a\u521a\u6ce8\u518c\uff0cpos\u8bbe\u4e3a0\n    return i; // \u8fd4\u56de\u5176\u5728\u6587\u4ef6\u8868\u5185\u7684\u7d22\u5f15\n}\n\nstatic int install_to_local(int global_fd)\n{\n    task_t *task = task_now(); // \u83b7\u53d6\u5f53\u524d\u4efb\u52a1\n    int i;\n    for (i = 3; i &lt; MAX_FILE_OPEN_PER_TASK; i++) { // fd 0 1 2\u5206\u522b\u4ee3\u8868\u6807\u51c6\u8f93\u5165 \u6807\u51c6\u8f93\u51fa \u6807\u51c6\u9519\u8bef\uff0c\u6240\u4ee5\u4ece3\u5f00\u59cb\u627e\u8d77\n        if (task-&gt;fd_table[i] == -1) break; // \u8fd9\u91cc\u8fd8\u7a7a\u7740\uff0c\u76f4\u63a5\u7528\n    }\n    if (i == MAX_FILE_OPEN_PER_TASK) return -1; // \u5230\u8fbe\u4efb\u52a1\u53ef\u6253\u5f00\u7684\u6587\u4ef6\u4e0a\u9650\uff0c\u8fd4\u56de-1\n    task-&gt;fd_table[i] = global_fd; // \u5c06\u6587\u4ef6\u8868\u7d22\u5f15\u5b89\u88c5\u5230\u4efb\u52a1\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u8868\n    return i; // \u8fd4\u56de\u7d22\u5f15\uff0c\u8fd9\u5c31\u662f\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e86\n}\n</code></pre></p> <p>\u6709\u4e86\u8fd9\u4e24\u4e2a\u51fd\u6570\uff0c\u5b9e\u73b0\u6253\u5f00\u6587\u4ef6\u548c\u521b\u5efa\u6587\u4ef6\u5c31\u7545\u901a\u65e0\u963b\u4e86\u3002\u5728 Linux \u7cfb\u7edf\u4e2d\uff0c\u8fd9\u4e24\u4e2a\u529f\u80fd\u88ab\u6574\u5408\u8fdb <code>open</code> \u8fd9\u4e00\u4e2a\u51fd\u6570\u4e2d\uff0c\u8fd9\u662f\u4e00\u4e2a\u6211\u4e5f\u8bf4\u4e0d\u4e0a\u597d\u4e0d\u597d\u7684\u8bbe\u8ba1\uff0c\u603b\u4e4b\u6211\u51b3\u5b9a\u6a21\u4eff\u3002</p> <p>\u4ee3\u7801 20-6 <code>open</code>\uff1a\u6253\u5f00\u6587\u4ef6\u3001\u521b\u5efa\u6587\u4ef6\uff08fs/file.c\uff09 <pre><code>int sys_open(char *filename, uint32_t flags)\n{\n    fileinfo_t finfo; // \u51c6\u5907\u63a5\u6536\u6253\u5f00\u7684\u6587\u4ef6\n    if (flags &amp; O_CREAT) { // flags\u4e2d\u542b\u6709O_CREAT\uff0c\u5219\u9700\u8981\u521b\u5efa\u6587\u4ef6\n        int status = fat16_create_file(&amp;finfo, filename); // \u8c03\u7528\u521b\u5efa\u6587\u4ef6\u7684\u51fd\u6570\n        if (status == -1) return status; // \u521b\u5efa\u5931\u8d25\u5219\u76f4\u63a5\u4e0d\u7ba1\n    } else {\n        int status = fat16_open_file(&amp;finfo, filename); // \u8c03\u7528\u6253\u5f00\u6587\u4ef6\u7684\u51fd\u6570\n        if (status == -1) return status; // \u6253\u5f00\u5931\u8d25\u5219\u76f4\u63a5\u4e0d\u7ba1\n    }\n    int global_fd = install_to_global(finfo); // \u5148\u5b89\u88c5\u5230\u5168\u5c40\u6587\u4ef6\u8868\n    file_table[global_fd].open_cnt++; // open\u4e2a\u6570+1\uff0c\u6ca1\u4ec0\u4e48\u7528\n    file_table[global_fd].size = finfo.size; // \u8bbe\u7f6e\u6587\u4ef6\u5927\u5c0f\n    file_table[global_fd].flags = flags | (~O_CREAT); // flags\u4e2d\u5254\u9664O_CREAT\n    file_table[global_fd].buffer = kmalloc(finfo.size + 5); // \u5206\u914d\u4e00\u4e2a\u7f13\u51b2\u533a\n    if (finfo.size) { // \u5982\u679c\u6709\u5185\u5bb9\n        int status = fat16_read_file(&amp;finfo, file_table[global_fd].buffer); // \u5219\u76f4\u63a5\u8bfb\u5230\u7f13\u51b2\u533a\u91cc\u6765\n        if (status == -1) { // \u5982\u679c\u8bfb\u4e0d\u8fdb\u7f13\u51b2\u533a\uff0c\u90a3\u5c31\u53ea\u597d\u8fd9\u6837\u4e86\n            kfree(file_table[global_fd].handle); // \u91ca\u653e\u5360\u6709\u7684\u8d44\u6e90\n            kfree(file_table[global_fd].buffer);\n            return status;\n        }\n    }\n    return install_to_local(global_fd); // \u6700\u540e\u5b89\u88c5\u5230\u4efb\u52a1\u91cc\n}\n</code></pre></p> <p>\u8fd9\u4e2a\u7f13\u51b2\u533a\u5f88\u5feb\u5c31\u4f1a\u5728\u4e0b\u9762\u7684 <code>read</code> \u548c <code>write</code> \u4e2d\u7528\u5230\uff0c\u7531\u4e8e\u8fd9\u4e24\u8005\u64cd\u4f5c\u903b\u8f91\u8f83\u4e3a\u7c7b\u4f3c\uff0c\u5408\u5e76\u5230\u540c\u4e00\u4e2a\u4ee3\u7801\u5757\u91cc\u6765\uff1a</p> <p>\u4ee3\u7801 20-7 <code>read</code>\u3001<code>write</code>\uff1a\u8bfb\u5199\u6587\u4ef6\uff08fs/fat16.c\uff09 <pre><code>int sys_write(int fd, const void *msg, int len)\n{\n    if (fd &lt;= 0) return -1; // \u662f\u65e0\u6548fd\uff0c\u8fd4\u56de\n    if (fd == 1 || fd == 2) { // \u5f80\u6807\u51c6\u8f93\u51fa\u6216\u6807\u51c6\u9519\u8bef\u4e2d\u8f93\u51fa\n        char *s = (char *) msg; // \u8f6c\u6362\u4e3achar *\n        for (int i = 0; i &lt; len; i++) monitor_put(s[i]); // \u76f4\u63a5\u7528monitor_put\u9010\u5b57\u7b26\u8f93\u51fa\n        return len; // \u4e00\u5207\u6b63\u5e38\n    }\n    task_t *task = task_now(); // \u83b7\u53d6\u5f53\u524d\u4efb\u52a1\n    int global_fd = task-&gt;fd_table[fd]; // \u83b7\u53d6\u6587\u4ef6\u8868\u4e2d\u7d22\u5f15\n    file_t *cfile = &amp;file_table[global_fd]; // \u83b7\u53d6\u6587\u4ef6\u8868\u4e2d\u7684\u6587\u4ef6\u6307\u9488\n    if (cfile-&gt;flags == O_RDONLY) return -1; // \u53ea\u8bfb\uff0c\u4e0d\u53ef\u5199\uff0c\u8fd4\u56de\n    for (int i = 0; i &lt; len; i++) { // \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b57\u8282\n        if (cfile-&gt;pos &gt;= cfile-&gt;size) { // \u5982\u679c\u8d85\u51fa\u4e86\u539f\u672c\u7684\u8303\u56f4\n            cfile-&gt;size++; // \u5927\u5c0f+1\n            void *new_buffer = krealloc(cfile-&gt;buffer, cfile-&gt;size); // \u4f7f\u7528krealloc\u6269\u5bb9\uff0c\u589e\u957f\u7f13\u51b2\u533a\u5927\u5c0f\n            if (new_buffer) cfile-&gt;buffer = new_buffer; // \u5982\u679c\u7f13\u51b2\u533a\u5206\u914d\u6210\u529f\uff0c\u90a3\u4e48\u8fd9\u91cc\u5c31\u662f\u65b0\u7684\u7f13\u51b2\u533a\n        }\n        char *buf = (char *) cfile-&gt;buffer; // \u6587\u4ef6\u7684\u7f13\u51b2\u533a\uff0c\u76f8\u5f53\u4e8e\u6587\u4ef6\u7684\u5f53\u524d\u5185\u5bb9\u4e86\n        char *content = (char *) msg; // \u8981\u5199\u5165\u7684\u5185\u5bb9\n        buf[cfile-&gt;pos] = content[i]; // \u5411\u8bfb\u5199\u6307\u9488\u5904\u5199\u5165\u5f53\u524d\u5185\u5bb9\n        cfile-&gt;pos++; // \u6587\u4ef6\u6307\u9488\u540e\u79fb\n    }\n    int status = fat16_write_file(cfile-&gt;handle, cfile-&gt;buffer, cfile-&gt;size); // \u5199\u5165\u5b8c\u6bd5\uff0c\u7acb\u523b\u66f4\u65b0\u5230\u786c\u76d8\n    if (status == -1) return status; // \u5199\u5165\u5931\u8d25\uff0c\u8fd4\u56de\n    return len; // \u5426\u5219\uff0c\u8fd4\u56de\u5b9e\u9645\u5199\u5165\u7684\u957f\u5ea6len\n}\n\nint sys_read(int fd, void *buf, int count)\n{\n    int ret = -1;\n    if (fd &lt; 0 || fd == 1 || fd == 2) return ret; // \u4ece\u6807\u51c6\u8f93\u5165/\u6807\u51c6\u9519\u8bef\u4e2d\u8bfb\u6216\u662ffd\u975e\u6cd5\u90fd\u662f\u4e0d\u5141\u8bb8\u7684\n    if (fd == 0) { // \u5982\u679c\u662f\u6807\u51c6\u8f93\u5165\n        char *buffer = (char *) buf; // \u5148\u8f6c\u6210char *\n        uint32_t bytes_read = 0; // \u8bfb\u4e86\u591a\u5c11\u4e2a\n        while (bytes_read &lt; count) { // \u6ca1\u8fbe\u5230count\u4e2a\n            while (fifo_status(&amp;decoded_key) == 0); // \u53ea\u8981\u6ca1\u6709\u65b0\u7684\u952e\u6211\u5c31\u4e0d\u8bfb\u8fdb\u6765\n            *buffer = fifo_get(&amp;decoded_key); // \u83b7\u53d6\u65b0\u7684\u952e\n            bytes_read++;\n            buffer++; // buffer\u6307\u5411\u4e0b\u4e00\u4e2a\n        }\n        ret = (bytes_read == 0 ? -1 : (int) bytes_read); // \u5982\u679c\u5565\u4e5f\u6ca1\u8bfb\u7740\u5c31-1\uff0c\u5426\u5219\u5c31\u6b63\u5e38\u8fd4\u56de\u5c31\u884c\u4e86\n        return ret;\n    }\n    task_t *task = task_now(); // \u83b7\u53d6\u5f53\u524d\u4efb\u52a1\n    int global_fd = task-&gt;fd_table[fd]; // \u83b7\u53d6fd\u5bf9\u5e94\u7684\u6587\u4ef6\u8868\u7d22\u5f15\n    file_t *cfile = &amp;file_table[global_fd]; // \u83b7\u53d6\u6587\u4ef6\u8868\u4e2d\u5bf9\u5e94\u6587\u4ef6\n    if (cfile-&gt;flags == O_WRONLY) return -1; // \u53ea\u5199\uff0c\u4e0d\u53ef\u8bfb\uff0c\u8fd4\u56de-1\n    ret = 0; // \u8bb0\u5f55\u5230\u5e95\u8bfb\u4e86\u591a\u5c11\u4e2a\u5b57\u8282\n    for (int i = 0; i &lt; count; i++) {\n        if (cfile-&gt;pos &gt;= cfile-&gt;size) break; // \u5982\u679c\u5df2\u7ecf\u5230\u8fbe\u672b\u5c3e\uff0c\u8fd4\u56de\n        char *filebuf = (char *) cfile-&gt;buffer; // \u6587\u4ef6\u7f13\u51b2\u533a\n        char *retbuf = (char *) buf; // \u63a5\u6536\u7f13\u51b2\u533a\n        retbuf[i] = filebuf[cfile-&gt;pos]; // \u9010\u5b57\u8282\u62f7\u8d1d\u5185\u5bb9\n        cfile-&gt;pos++; // \u8bfb\u5199\u6307\u9488\u540e\u79fb\n        ret++; // \u8bfb\u53d6\u5b57\u8282\u6570+1\n    }\n    return ret; // \u8fd4\u56de\u8bfb\u53d6\u5b57\u8282\u6570\n}\n</code></pre></p> <p>\u8fd9\u91cc\u4ece <code>sys_write</code> \u7684\u5b9e\u73b0\u4e2d\u5c31\u53ef\u4ee5\u77e5\u9053 <code>buffer</code> \u7684\u4f5c\u7528\u4e86\uff1a\u5728\u524d\u9762\u8bfb\u5199\u6587\u4ef6\u65f6\uff0c\u6211\u4eec\u53ea\u5b9e\u73b0\u4e86\u8986\u76d6\u6574\u4e2a\u6587\u4ef6\uff0c\u60f3\u8981\u5bf9\u6587\u4ef6\u7684\u7279\u5b9a\u4f4d\u7f6e\u8fdb\u884c\u4fee\u6539\uff0c\u53ea\u80fd\u5168\u90e8\u8bfb\u8fdb\u6765\uff0c\u5728\u8f6f\u4ef6\u5c42\u9762\u4fee\u6539\u540e\u518d\u5168\u90e8\u5199\u56de\u53bb\u3002\u800c\u4e14\uff0c\u8fd9\u6837\u7684\u5b9e\u73b0\u8fd8\u53ef\u4ee5\u52a0\u5feb <code>sys_read</code> \u7684\u901f\u5ea6\uff0c\u4e5f\u7b97\u662f\u4e00\u79cd\u5947\u5999\u7684\u4f18\u5316\u5427\u3002</p> <p>\u540c\u65f6\uff0c\u6539\u5b8c\u8fd9\u91cc\u4ee5\u540e\uff0c\u539f\u5148 <code>kernel/syscall.c</code> \u4e2d\u7684 <code>sys_read</code> \u548c <code>sys_write</code> \u5c31\u53ef\u4ee5\u5220\u9664\u4e86\u3002</p> <p>\u6269\u5bb9\u7528\u7684 <code>krealloc</code> \u5199\u5728\u4e86 <code>kernel/memory.c</code> \u4e2d\uff1a</p> <p>\u4ee3\u7801 20-8 <code>krealloc</code>\uff08kernel/memory.c\uff09 <pre><code>void *krealloc(void *buffer, int size)\n{\n    void *res = NULL;\n    if (!buffer) return kmalloc(size); // buffer\u4e3aNULL\uff0c\u5219realloc\u76f8\u5f53\u4e8emalloc\n    if (!size) { // size\u4e3aNULL\uff0c\u5219realloc\u76f8\u5f53\u4e8efree\n        kfree(buffer);\n        return NULL;\n    }\n    // \u5426\u5219\u5b9e\u73b0\u6269\u5bb9\n    res = kmalloc(size); // \u5206\u914d\u65b0\u7684\u7f13\u51b2\u533a\n    memcpy(res, buffer, size); // \u5c06\u539f\u7f13\u51b2\u533a\u5185\u5bb9\u590d\u5236\u8fc7\u53bb\n    kfree(buffer); // \u91ca\u653e\u539f\u7f13\u51b2\u533a\n    return res; // \u8fd4\u56de\u65b0\u7f13\u51b2\u533a\n}\n</code></pre></p> <p>\u63a5\u4e0b\u6765\u662f\u5173\u95ed\u6587\u4ef6\u7528\u7684 <code>sys_close</code>\uff0c\u57fa\u672c\u4e0a\u5c31\u662f\u5bf9\u6587\u4ef6\u4f7f\u7528\u8d44\u6e90\u7684\u91ca\u653e\u3002</p> <p>\u4ee3\u7801 20-9 <code>close</code>\uff1a\u5173\u95ed\u6587\u4ef6\uff08fs/file.c\uff09 <pre><code>int sys_close(int fd)\n{\n    int ret = -1; // \u8fd4\u56de\u503c\n    if (fd &gt; 2) { // \u7684\u786e\u662f\u88ab\u6253\u5f00\u7684\u6587\u4ef6\n        task_t *task = task_now(); // \u83b7\u53d6\u5f53\u524d\u4efb\u52a1\n        uint32_t global_fd = task-&gt;fd_table[fd]; // \u83b7\u53d6\u5bf9\u5e94\u6587\u4ef6\u8868\u7d22\u5f15\n        task-&gt;fd_table[fd] = -1; // \u91ca\u653e\u6587\u4ef6\u63cf\u8ff0\u7b26\n        file_t *cfile = &amp;file_table[global_fd]; // \u83b7\u53d6\u5bf9\u5e94\u6587\u4ef6\n        kfree(cfile-&gt;buffer); // \u91ca\u653e\u7f13\u51b2\u533a\n        kfree(cfile-&gt;handle); // install_to_global\u4e2d\u4f7f\u7528kmalloc\u5206\u914dfileinfo\u6307\u9488\n        cfile-&gt;type = FT_USABLE; // \u8bbe\u7f6etype\u4e3a\u53ef\u7528\n        return 0; // \u5173\u95ed\u5b8c\u6210\n    }\n    return ret; // \u5426\u5219\u8fd4\u56de-1\n}\n</code></pre></p> <p>\u79fb\u52a8\u8bfb\u5199\u6307\u9488\u7528\u7684 <code>sys_lseek</code> \u7eaf\u5c5e\u8f6f\u4ef6\u64cd\u4f5c\uff0c<code>sys_unlink</code> \u5219\u53ea\u662f <code>fat16_delete_file</code> \u5957\u76ae\uff0c\u8fd9\u91cc\u4e00\u5e76\u653e\u4e0a\u6765\u3002</p> <p>\u4ee3\u7801 20-10 <code>lseek</code>\u3001<code>unlink</code>\uff1a\u6700\u540e\u4e00\u4e2a\u90e8\u5206\uff08fs/file.c\uff09 <pre><code>int sys_lseek(int fd, int offset, uint8_t whence)\n{\n    if (fd &lt; 3) return -1; // \u4e0d\u662f\u88ab\u6253\u5f00\u7684\u6587\u4ef6\uff0c\u8fd4\u56de\n    if (whence &lt; 1 || whence &gt; 3) return -1; // whence\u53ea\u80fd\u4e3a123\uff0c\u5206\u522b\u5bf9\u5e94SET\u3001CUR\u3001END\uff0c\u8fd4\u56de\n    task_t *task = task_now(); // \u83b7\u53d6\u5f53\u524d\u4efb\u52a1\n    file_t *cfile = &amp;file_table[task-&gt;fd_table[fd]]; // \u83b7\u53d6fd\u5bf9\u5e94\u7684\u6587\u4ef6\n    fileinfo_t *fhandle = (fileinfo_t *) cfile-&gt;handle; // \u6587\u4ef6\u5b9e\u9645\u4e0a\u5bf9\u5e94\u7684fileinfo\n    int size = fhandle-&gt;size; // \u83b7\u53d6\u5927\u5c0f\uff0c\u603b\u5f52\u662f\u6709\u7528\u7684\n    int new_pos = 0; // \u65b0\u7684\u6587\u4ef6\u4f4d\u7f6e\n    switch (whence) {\n        case SEEK_SET: // SEEK_SET\u5c31\u662f\u7eaf\u8bbe\u7f6e\n            new_pos = offset; // \u76f4\u63a5\u8bbe\u7f6e\n            break;\n        case SEEK_CUR: // \u4ece\u5f53\u524d\u4f4d\u7f6e\u7b97\u8d77\u79fb\u52a8offset\u4f4d\u7f6e\n            new_pos = cfile-&gt;pos + offset; // \u7528\u5f53\u524dpos\u52a0\u4e0aoffset\n            break;\n        case SEEK_END: // \u4ece\u7ed3\u675f\u4f4d\u7f6e\u7b97\u8d77\u79fb\u52a8offset\u4f4d\u7f6e\n            new_pos = size + offset; // \u7528\u5927\u5c0f\u52a0\u4e0aoffset\n            break;\n    }\n    if (new_pos &lt; 0 || new_pos &gt; size - 1) return -1; // \u5982\u679c\u65b0\u7684\u4f4d\u7f6e\u8d85\u51fa\u6587\u4ef6\uff0c\u8fd4\u56de-1\n    cfile-&gt;pos = new_pos; // \u8bbe\u7f6e\u65b0\u4f4d\u7f6e\n    return new_pos; // \u8fd4\u56de\u65b0\u4f4d\u7f6e\n}\n\nint sys_unlink(const char *filename)\n{\n    return fat16_delete_file((char *) filename); // \u76f4\u63a5\u5957\u76ae\uff0c\u4e0d\u591a\u8bf4\n}\n</code></pre></p> <p>\u597d\uff0c\u90a3\u4e48\u5230\u6b64\u4e3a\u6b62\uff0c\u5386\u65f6\u56db\u8282\uff0c\u6211\u4eec\u7684 FAT16 \u6587\u4ef6\u7cfb\u7edf\u5b9e\u73b0\u7684\u5f81\u7a0b\u5230\u6b64\u7ed3\u675f\uff01\u9f13\u638c\uff01</p> <p>\u6216\u8bb8\u6709\u4eba\u4f1a\u89c9\u5f97\uff1a\u8fd9\u770b\u4e0a\u53bb\u4e5f\u4e0d\u96be\u561b\u2026\u2026\u90a3\u4e0d\u59a8\u81ea\u5df1\u67e5\u8be2\u8d44\u6599\u5199\u4e00\u4e2a\u8bd5\u8bd5\u54e6\uff08</p> <p>\u518d\u5f80\u4e0b\u51e0\u8282\uff0c\u6211\u4eec\u6765\u5b9e\u73b0\u5e94\u7528\u7a0b\u5e8f\u7684\u6267\u884c\uff0c\u5f7b\u5e95\u7ed3\u675f\u8fd9\u4e2a\u7834\u70c2\u4e0d\u582a\u7684\u64cd\u4f5c\u7cfb\u7edf\u6559\u7a0b\u3002</p>"},{"location":"os-tutorial/old/21-fat16-part4/","title":"21 FAT16 \u6587\u4ef6\u7cfb\u7edf\u5b9e\u6218\u2014\u2014\u629b\u5f03\u8f6f\u76d8\uff0c\u4ece\u786c\u76d8\u542f\u52a8","text":"<p>\u672c\u6765\u662f\u60f3\u5199\u5e94\u7528\u7a0b\u5e8f\u7684\uff0c\u4f46\u662f\u5427\uff0c\u8fd9\u4e2a\u95ee\u9898\u5427\uff0c\u5b83\u8fd9\u4e2a\u8fd9\u4e2a\uff0c\u7565\u5fae\u6709\u4e00\u4e9b\u96be\u5ea6\uff0c\u77e5\u9053\u5427\uff0c\u6240\u4ee5\u8bf4\u5148\u6311\u6bd4\u8f83\u7b80\u5355\u7684\u5199\u3002</p> <p>\u672c\u8282\u6211\u4eec\u8981\u91cd\u6e29\u7b2c 1-6 \u8282\u7684\u6050\u60e7\uff0c\u7528\u4e00\u8282\u7684\u65f6\u95f4\u901f\u901a\u4e00\u4e2a\u5728\u786c\u76d8\u4e0a\u7684\u5f15\u5bfc\u52a0\u8f7d\u5668\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u629b\u6389\u73b0\u5728\u8fd9\u4e2a\u4e0d\u4f26\u4e0d\u7c7b\u7684\u8f6f\u76d8\u542f\u52a8\uff0c\u786c\u76d8\u653e\u6570\u636e\u7684\u6846\u67b6\u4e86\u3002</p> <p>\u5f15\u5bfc\u6247\u533a\u6bd4\u8f83\u597d\u6539\uff0c\u5148\u4ece\u5f15\u5bfc\u6247\u533a\u5f00\u59cb\u5427\u3002\u548c\u8f6f\u76d8\u7248\u7684\u5f15\u5bfc\u6247\u533a\u76f8\u6bd4\uff0c\u4e3b\u8981\u8981\u4fee\u6539\u7684\u90e8\u5206\u6709\u4ee5\u4e0b\u51e0\u70b9\uff1a</p> <ul> <li><code>ReadSector</code> \u8981\u4ece\u8bfb\u53d6\u8f6f\u76d8\u6539\u6210\u8bfb\u53d6\u786c\u76d8\u3002</li> </ul> <ul> <li>\u786c\u76d8\u4f7f\u7528 FAT16 \u6587\u4ef6\u7cfb\u7edf\uff0c\u6240\u4ee5 <code>GetFATEntry</code> \u9700\u8981\u540c\u6b65\u4fee\u6539\u3002</li> </ul> <ul> <li>\u8fd8\u662f\u56e0\u4e3a FAT16 \u6587\u4ef6\u7cfb\u7edf\uff0c\u4e3b\u5faa\u73af\u4e2d\u5224\u65ad\u6587\u4ef6\u662f\u5426\u7ed3\u675f\u7684\u6761\u4ef6\u4e5f\u8981\u7565\u4f5c\u4fee\u6539\u3002</li> </ul> <p>\u5176\u4f59\u7684\u90e8\u5206\u5747\u53ef\u4fdd\u6301\u4e0d\u53d8\u3002</p> <p>\u6211\u4eec\u5148\u8fdb\u5165\u9879\u76ee\u6839\u76ee\u5f55\uff0c\u7136\u540e\u65b0\u5efa <code>boot.asm</code> \u548c <code>loader.asm</code>\uff0c<code>loader.asm</code> \u6211\u4eec\u4ecd\u65e7\u9009\u62e9\u4f7f\u7528\u7b2c 3-4 \u8282\u4f7f\u7528\u7684\u767d\u677f Loader\uff1a</p> <p>\u4ee3\u7801 21-1 \u767d\u677f Loader\uff08loader.asm\uff09 <pre><code>    org 0100h\n\n    mov ax, 0B800h\n    mov gs, ax ; \u5c06gs\u8bbe\u7f6e\u4e3a0xB800\uff0c\u5373\u6587\u672c\u6a21\u5f0f\u4e0b\u7684\u663e\u5b58\u5730\u5740\n    mov ah, 0Fh ; \u663e\u793a\u5c5e\u6027\uff0c\u6b64\u5904\u6307\u767d\u8272\n    mov al, 'L' ; \u5f85\u663e\u793a\u7684\u5b57\u7b26\n    mov [gs:((80 * 0 + 39) * 2)], ax ; \u76f4\u63a5\u5199\u5165\u663e\u5b58\n\n    jmp $ ; \u5361\u6b7b\u5728\u6b64\u5904\n</code></pre></p> <p>\u5c06\u767d\u677f Loader \u7528 <code>ftcopy</code> \u547d\u4ee4\u5199\u5165\u786c\u76d8\uff1a</p> <p></p> <p>\uff08\u56fe 21-1 \u5177\u4f53\u547d\u4ee4\uff09</p> <p>\u5728 <code>boot.asm</code> \u4e2d\u7c98\u8d34\u539f\u5148\u8f6f\u76d8\u7248\u7684 <code>boot.asm</code> \u7684\u6240\u6709\u5185\u5bb9\uff0c\u5e76\u5c06 <code>load.inc</code> \u548c <code>pm.inc</code> \u4e00\u5e76\u590d\u5236\u5230\u6839\u76ee\u5f55\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5f00\u59cb\u4fee\u6539\u4e86\u3002</p> <p>\u9996\u5148\u6765\u4fee\u6539 <code>boot.asm</code> \u4e2d\u83b7\u53d6 FAT \u9879\u7684\u90e8\u5206\uff1a</p> <p>\u4ee3\u7801 21-2 \u786c\u76d8\u7248 <code>GetFATEntry</code>\uff08boot.asm\uff09 <pre><code>GetFATEntry: ; \u8fd4\u56de\u7b2cax\u4e2a\u7c07\u7684\u503c\n    push es\n    push bx\n    push ax ; \u90fd\u4f1a\u7528\u5230\uff0cpush\u4e00\u4e0b\n    mov ax, BaseOfLoader\n    sub ax, 0100h\n    mov es, ax\n    pop ax\n    mov bx, 2\n    mul bx ; \u6bcf\u4e00\u4e2aFAT\u9879\u662f\u4e24\u5b57\u8282\uff0c\u7ed9ax\u4e582\u5c31\u662f\u504f\u79fb\nLABEL_GET_FAT_ENTRY:\n    ; \u5c06ax\u53d8\u4e3a\u6247\u533a\u53f7\n    xor dx, dx\n    mov bx, [BPB_BytsPerSec]\n    div bx ; dx = ax % 512, ax /= 512\n    push dx ; \u4fdd\u5b58dx\u7684\u503c\n    mov bx, 0 ; es:bx\u5df2\u6307\u5b9a\n    add ax, SectorNoOfFAT1 ; \u5bf9\u5e94\u6247\u533a\u53f7\n    mov cl, 1 ; \u4e00\u6b21\u8bfb\u4e00\u4e2a\u6247\u533a\u5373\u53ef\n    call ReadSector ; \u76f4\u63a5\u8bfb\u5165\n    ; bx \u5230 bx + 512 \u5904\u4e3a\u8bfb\u8fdb\u6247\u533a\n    pop dx\n    add bx, dx ; \u52a0\u4e0a\u504f\u79fb\n    mov ax, [es:bx] ; \u8bfb\u53d6\uff0c\u90a3\u4e48\u8fd9\u91cc\u5c31\u662f\u4e86\nLABEL_GET_FAT_ENTRY_OK: ; \u80dc\u5229\u6267\u884c\n    pop bx\n    pop es ; \u6062\u590d\u5806\u6808\n    ret\n</code></pre></p> <p>\u4fee\u6539\u7684\u90e8\u5206\u4e3b\u8981\u6709\uff1a\u4e581.5\u7684\u90e8\u5206\u53d8\u6210\u4e86\u4e582\uff1b\u8bfb\u53d6\u7684\u6247\u533a\u6570\u7531\u4e24\u4e2a\u964d\u5230\u4e00\u4e2a\uff1b\u5220\u6389\u4e86 FAT12 \u65f6\u671f\u5bf9 FAT \u89e3\u538b\u7f29\u7684\u5904\u7406\u3002</p> <p>\u8bfb\u53d6\u6247\u533a\u7684\u90e8\u5206\u5219\u76f4\u63a5\u4eff\u7740\u56db\u8282\u524d\u7684\u90a3\u4e2a\u786c\u76d8\u9a71\u52a8\u5199\u5c31\u884c\u4e86\uff1a</p> <p>\u4ee3\u7801 21-3 \u786c\u76d8\u7248 <code>ReadSector</code>\uff08boot.asm\uff09 <pre><code>ReadSector: ; \u8bfb\u786c\u76d8\u6247\u533a\n; \u4ece\u7b2ceax\u53f7\u6247\u533a\u5f00\u59cb\uff0c\u8bfb\u53d6cl\u4e2a\u6247\u533a\u81f3es:bx\n    push esi\n    push di\n    push es\n    push bx\n    mov esi, eax\n    mov di, cx ; \u5907\u4efdax,cx\n\n; \u8bfb\u786c\u76d8 \u7b2c\u4e00\u6b65\uff1a\u8bbe\u7f6e\u8981\u8bfb\u53d6\u6247\u533a\u6570\n    mov dx, 0x1f2\n    mov al, cl\n    out dx, al\n\n    mov eax, esi ; \u6062\u590dax\n\n; \u7b2c\u4e8c\u6b65\uff1a\u5199\u5165\u6247\u533a\u53f7\n    mov dx, 0x1f3\n    out dx, al ; LBA 7~0\u4f4d\uff0c\u5199\u51650x1f3\n\n    mov cl, 8\n    shr eax, cl ; LBA 15~8\u4f4d\uff0c\u5199\u51650x1f4\n    mov dx, 0x1f4\n    out dx, al\n\n    shr eax, cl\n    mov dx, 0x1f5\n    out dx, al ; LBA 23~16\u4f4d\uff0c\u5199\u51650x1f5\n\n    shr eax, cl\n    and al, 0x0f ; LBA 27~24\u4f4d\n    or al, 0xe0 ; \u8868\u793a\u5f53\u524d\u786c\u76d8\n    mov dx, 0x1f6 ; \u5199\u51650x1f6\n    out dx, al\n\n; \u7b2c\u4e09\u6b65\uff1a0x1f7\u5199\u51650x20\uff0c\u8868\u793a\u8bfb\n    mov dx, 0x1f7 \n    mov al, 0x20\n    out dx, al\n\n; \u7b2c\u56db\u6b65\uff1a\u68c0\u6d4b\u786c\u76d8\u72b6\u6001\n.not_ready:\n    nop\n    in al, dx ; \u8bfb\u5165\u786c\u76d8\u72b6\u6001\n    and al, 0x88 ; \u5206\u79bb\u7b2c4\u4f4d\uff0c\u7b2c7\u4f4d\n    cmp al, 0x08 ; \u786c\u76d8\u4e0d\u5fd9\u4e14\u5df2\u51c6\u5907\u597d\n    jnz .not_ready ; \u4e0d\u6ee1\u8db3\uff0c\u7ee7\u7eed\u7b49\u5f85\n\n; \u7b2c\u4e94\u6b65\uff1a\u5c06\u6570\u636e\u4ece0x1f0\u7aef\u53e3\u8bfb\u51fa\n    mov ax, di ; di\u4e3a\u8981\u8bfb\u6247\u533a\u6570\uff0c\u5171\u9700\u8bfbdi * 512 / 2\u6b21\n    mov dx, 256\n    mul dx\n    mov cx, ax\n\n    mov dx, 0x1f0\n.go_on_read:\n    in ax, dx\n    mov [es:bx], ax\n    add bx, 2\n    loop .go_on_read\n; \u7ed3\u675f\n    pop bx\n    pop es\n    pop di\n    pop esi\n    ret\n</code></pre></p> <p>\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\uff0c<code>ReadSector</code> \u8c03\u7528\u524d\u540e\u4f1a\u4fee\u6539 <code>bx</code>\u3001<code>di</code> \u548c <code>esi</code>\uff0c\u5982\u679c\u81ea\u5df1\u5199\u7684\u8bdd\u8981\u6ce8\u610f\u5907\u4efd\u3002</p> <p>\u7531\u4e8e\u6362\u4e86 FAT16\uff0cboot.asm \u5f00\u5934\u7684 <code>%include \"fat12hdr.inc\"</code> \u4e5f\u8981\u540c\u6b65\u66f4\u6362\u4e3a <code>%include \"fat16hdr.inc\"</code>\uff0c\u8fd9\u91cc\u9762\u7684\u5185\u5bb9\u5bf9\u7167\u7740\u683c\u5f0f\u5316\u51fd\u6570\u548c <code>file.h</code> \u5f88\u5bb9\u6613\u5199\u51fa\uff1a</p> <p>\u4ee3\u7801 21-4 FAT16 \u76f8\u5173\u5e38\u91cf\uff08fat16hdr.inc\uff09 <pre><code>    BS_OEMName     db 'tutorial'    ; \u56fa\u5b9a\u76848\u4e2a\u5b57\u8282\n    BPB_BytsPerSec dw 512           ; \u6bcf\u6247\u533a\u56fa\u5b9a512\u4e2a\u5b57\u8282\n    BPB_SecPerClus db 1             ; \u6bcf\u7c07\u56fa\u5b9a1\u4e2a\u6247\u533a\n    BPB_RsvdSecCnt dw 1             ; MBR\u56fa\u5b9a\u5360\u75281\u4e2a\u6247\u533a\n    BPB_NumFATs    db 2             ; \u6211\u4eec\u5b9e\u73b0\u7684FAT16\u6587\u4ef6\u7cfb\u7edf\u67092\u4e2aFAT\u8868\n    BPB_RootEntCnt dw 512           ; \u6839\u76ee\u5f55\u533a32\u4e2a\u6247\u533a\uff0c\u4e00\u4e2a\u76ee\u5f55\u987932\u5b57\u8282\uff0c\u5171\u8ba132*512/32=512\u4e2a\u76ee\u5f55\u9879\n    BPB_TotSec16   dw 0             ; 80MB\u786c\u76d8\u7684\u5927\u5c0f\u8fc7\u5927\uff0c\u4e0d\u8db3\u4ee5\u653e\u5230TotSec16\n    BPB_Media      db 0xF8          ; \u4ecb\u8d28\u63cf\u8ff0\u7b26\uff0c\u786c\u76d8\u4e3a0xF8\n    BPB_FATSz16    dw 32            ; \u4e00\u4e2aFAT\u8868\u6240\u5360\u7684\u6247\u533a\u6570\uff0cFAT16 \u6587\u4ef6\u7cfb\u7edf\u56fa\u5b9a\u4e3a32\u4e2a\u6247\u533a\n    BPB_SecPerTrk  dw 63            ; \u6bcf\u78c1\u9053\u6247\u533a\u6570\uff0c80MB\u786c\u76d8\u4e3a63\n    BPB_NumHeads   dw 16            ; \u78c1\u5934\u6570\uff0cbximage \u7684\u8f93\u51fa\u544a\u8bc9\u6211\u4eec\u662f16\u4e2a\n    BPB_HiddSec    dd 0             ; \u9690\u85cf\u6247\u533a\u6570\uff0c\u6ca1\u6709\n    BPB_TotSec32   dd 41943040      ; \u82e5\u4e4b\u524d\u7684 BPB_TotSec16 \u5904\u6ca1\u6709\u8bb0\u5f55\u6247\u533a\u6570\uff0c\u5219\u7531\u6b64\u8bb0\u5f55\uff0c\u5982\u679c\u8bb0\u5f55\u4e86\uff0c\u8fd9\u91cc\u76f4\u63a5\u7f6e0\u5373\u53ef\n    BS_DrvNum      db 0x80          ; int 13h \u8c03\u7528\u65f6\u6240\u8bfb\u53d6\u7684\u9a71\u52a8\u5668\u53f7\uff0c\u7531\u4e8e\u6302\u8f7d\u7684\u662f\u786c\u76d8\u6240\u4ee50x80 \n    BS_Reserved1   db 0             ; \u672a\u4f7f\u7528\uff0c\u9884\u7559\n    BS_BootSig     db 29h           ; \u6269\u5c55\u5f15\u5bfc\u6807\u8bb0\n    BS_VolID       dd 0             ; \u5377\u5e8f\u5217\u53f7\uff0c\u7531\u4e8e\u53ea\u6302\u8f7d\u4e00\u4e2a\u76d8\u6240\u4ee5\u4e3a0\n    BS_VolLab      db 'OS-tutorial' ; \u5377\u6807\uff0c11\u4e2a\u5b57\u8282\n    BS_FileSysType db 'FAT16   '    ; \u7531\u4e8e\u662f FAT16 \u6587\u4ef6\u7cfb\u7edf\uff0c\u6240\u4ee5\u5199\u5165 FAT16 \u540e\u8865\u9f508\u4e2a\u5b57\u8282\n\nFATSz                   equ 32      ; BPB_FATSz16\nRootDirSectors          equ 32      ; \u6839\u76ee\u5f55\u5927\u5c0f\nSectorNoOfRootDirectory equ 65      ; \u6839\u76ee\u5f55\u8d77\u59cb\u6247\u533a\nSectorNoOfFAT1          equ 1       ; \u7b2c\u4e00\u4e2aFAT\u8868\u7684\u5f00\u59cb\u6247\u533a\nDeltaSectorNo           equ 63      ; \u7531\u4e8e\u7b2c\u4e00\u4e2a\u7c07\u4e0d\u7528\uff0c\u6240\u4ee5RootDirSectors\u8981-2\u518d\u52a0\u4e0a\u6839\u76ee\u5f55\u533a\u9996\u6247\u533a\u548c\u504f\u79fb\u624d\u80fd\u5f97\u5230\u771f\u6b63\u7684\u5730\u5740\uff0c\u6545\u628aRootDirSectors-2\u5c01\u88c5\u6210\u4e00\u4e2a\u5e38\u91cf\n</code></pre></p> <p>\u6700\u540e\u4e00\u5904\u4fee\u6539\u662f\u5728\u4e3b\u5faa\u73af\u7684 <code>LABEL_GOON_LOADING_FILE</code> \u9644\u8fd1\uff1a</p> <p>\u4ee3\u7801 21-5 \u786c\u76d8\u7248\u4e3b\u5faa\u73af\uff08boot.asm\uff09 <pre><code>    cmp ax, 0FFFFh ; \u8fd9\u91cc\uff01\u539f\u672c\u662f0FFF\uff0c\u4f46FAT16\u7684\u6587\u4ef6\u7ed3\u675f\u65f6FFFF\uff0c\u6240\u4ee5\u8fd9\u91cc\u8981\u4fee\u6539\n    jz LABEL_FILE_LOADED ; \u82e5\u6b64\u9879=0FFFF\uff0c\u4ee3\u8868\u6587\u4ef6\u7ed3\u675f\uff0c\u76f4\u63a5\u8df3\u5165Loader\n    push ax ; \u91cd\u65b0\u5b58\u50a8FAT\u53f7\uff0c\u4f46\u6b64\u65f6\u7684FAT\u53f7\u5df2\u7ecf\u662f\u4e0b\u4e00\u4e2aFAT\u4e86\n</code></pre></p> <p>\u81f3\u6b64\uff0c\u786c\u76d8\u7248\u5f15\u5bfc\u6247\u533a\u4fee\u6539\u5b8c\u6210\uff0c\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a</p> <p>\u4ee3\u7801 21-6 \u786c\u76d8\u5f15\u5bfc\u6247\u533a-\u5b8c\u6574\u7248\uff08boot.asm\uff09 <pre><code>    org 07c00h ; \u544a\u8bc9\u7f16\u8bd1\u5668\u7a0b\u5e8f\u5c06\u88c5\u8f7d\u81f30x7c00\u5904\n\nBaseOfStack             equ 07c00h ; \u6808\u7684\u57fa\u5740\n\n    jmp short LABEL_START\n    nop ; BS_JMPBoot \u7531\u4e8e\u8981\u4e09\u4e2a\u5b57\u8282\u800cjmp\u5230LABEL_START\u53ea\u6709\u4e24\u4e2a\u5b57\u8282 \u6240\u4ee5\u52a0\u4e00\u4e2anop\n\n%include \"fat16hdr.inc\" ; \u6ca1\u9519\u5b83\u4f1adb\u4e00\u904d\n%include \"load.inc\" ; \u4ee3\u66ff\u4e4b\u524d\u7684\u5e38\u91cf\n\nLABEL_START:\n    mov ax, cs\n    mov ds, ax\n    mov es, ax ; \u5c06ds es\u8bbe\u7f6e\u4e3acs\u7684\u503c\uff08\u56e0\u4e3a\u6b64\u65f6\u5b57\u7b26\u4e32\u548c\u53d8\u91cf\u7b49\u5b58\u5728\u4ee3\u7801\u6bb5\u5185\uff09\n    mov ss, ax ; \u5c06\u5806\u6808\u6bb5\u4e5f\u521d\u59cb\u5316\u81f3cs\n    mov sp, BaseOfStack ; \u8bbe\u7f6e\u6808\u9876\n\n    mov ax, 0600h ; AH=06h\uff1a\u5411\u4e0a\u6eda\u5c4f\uff0cAL=00h\uff1a\u6e05\u7a7a\u7a97\u53e3\n    mov bx, 0700h ; \u7a7a\u767d\u533a\u57df\u7f3a\u7701\u5c5e\u6027\n    mov cx, 0 ; \u5de6\u4e0a\uff1a(0, 0)\n    mov dx, 0184fh ; \u53f3\u4e0b\uff1a(80, 25)\n    int 10h ; \u6267\u884c\n\n    mov dh, 0\n    call DispStr ; Booting\n\n    xor ah, ah ; \u590d\u4f4d\n    xor dl, dl\n    int 13h ; \u6267\u884c\u8f6f\u9a71\u590d\u4f4d\n\n    mov word [wSectorNo], SectorNoOfRootDirectory ; \u5f00\u59cb\u67e5\u627e\uff0c\u5c06\u5f53\u524d\u8bfb\u5230\u7684\u6247\u533a\u6570\u8bb0\u4e3a\u6839\u76ee\u5f55\u533a\u7684\u5f00\u59cb\u6247\u533a\uff0819\uff09\nLABEL_SEARCH_IN_ROOT_DIR_BEGIN:\n    cmp word [wRootDirSizeForLoop], 0 ; \u5c06\u5269\u4f59\u7684\u6839\u76ee\u5f55\u533a\u6247\u533a\u6570\u4e0e0\u6bd4\u8f83\n    jz LABEL_NO_LOADERBIN ; \u76f8\u7b49\uff0c\u4e0d\u5b58\u5728Loader\uff0c\u8fdb\u884c\u5584\u540e\n    dec word [wRootDirSizeForLoop] ; \u51cf\u53bb\u4e00\u4e2a\u6247\u533a\n    mov ax, BaseOfLoader\n    mov es, ax\n    mov bx, OffsetOfLoader ; \u5c06es:bx\u8bbe\u7f6e\u4e3aBaseOfLoader:OffsetOfLoader\uff0c\u6682\u4e14\u4f7f\u7528Loader\u6240\u5360\u7684\u5185\u5b58\u7a7a\u95f4\u5b58\u653e\u6839\u76ee\u5f55\u533a\n    mov ax, [wSectorNo] ; \u8d77\u59cb\u6247\u533a\uff1a\u5f53\u524d\u8bfb\u5230\u7684\u6247\u533a\u6570\uff08\u5e9f\u8bdd\uff09\n    mov cl, 1 ; \u8bfb\u53d6\u4e00\u4e2a\u6247\u533a\n    call ReadSector ; \u8bfb\u5165\n\n    mov si, LoaderFileName ; \u4e3a\u6bd4\u5bf9\u505a\u51c6\u5907\uff0c\u6b64\u5904\u662f\u5c06ds:si\u8bbe\u4e3aLoader\u6587\u4ef6\u540d\n    mov di, OffsetOfLoader ; \u4e3a\u6bd4\u5bf9\u505a\u51c6\u5907\uff0c\u6b64\u5904\u662f\u5c06es:di\u8bbe\u4e3aLoader\u504f\u79fb\u91cf\uff08\u5373\u6839\u76ee\u5f55\u533a\u4e2d\u7684\u9996\u4e2a\u6587\u4ef6\u5757\uff09\n    cld ; FLAGS.DF=0\uff0c\u5373\u6267\u884clodsb/lodsw/lodsd\u540e\uff0csi\u81ea\u52a8\u589e\u52a0\n    mov dx, 10h ; \u517116\u4e2a\u6587\u4ef6\u5757\uff08\u4ee3\u8868\u4e00\u4e2a\u6247\u533a\uff0c\u56e0\u4e3a\u4e00\u4e2a\u6587\u4ef6\u575732\u5b57\u8282\uff0c16\u4e2a\u6587\u4ef6\u5757\u6b63\u597d\u4e00\u4e2a\u6247\u533a\uff09\nLABEL_SEARCH_FOR_LOADERBIN:\n    cmp dx, 0 ; \u5c06dx\u4e0e0\u6bd4\u8f83\n    jz LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR ; \u7ee7\u7eed\u524d\u8fdb\u4e00\u4e2a\u6247\u533a\n    dec dx ; \u5426\u5219\u5c06dx\u51cf1\n    mov cx, 11 ; \u6587\u4ef6\u540d\u517111\u5b57\u8282\nLABEL_CMP_FILENAME: ; \u6bd4\u5bf9\u6587\u4ef6\u540d\n    cmp cx, 0 ; \u5c06cx\u4e0e0\u6bd4\u8f83\n    jz LABEL_FILENAME_FOUND ; \u82e5\u76f8\u7b49\uff0c\u8bf4\u660e\u6587\u4ef6\u540d\u5b8c\u5168\u4e00\u81f4\uff0c\u8868\u793a\u627e\u5230\uff0c\u8fdb\u884c\u627e\u5230\u540e\u7684\u5904\u7406\n    dec cx ; cx\u51cf1\uff0c\u8868\u793a\u8bfb\u53d61\u4e2a\u5b57\u7b26\n    lodsb ; \u5c06ds:si\u7684\u5185\u5bb9\u7f6e\u5165al\uff0csi\u52a01\n    cmp al, byte [es:di] ; \u6b64\u5b57\u7b26\u4e0eLOADER  BIN\u4e2d\u7684\u5f53\u524d\u5b57\u7b26\u76f8\u7b49\u5417\uff1f\n    jz LABEL_GO_ON ; \u4e0b\u4e00\u4e2a\u6587\u4ef6\u540d\u5b57\u7b26\n    jmp LABEL_DIFFERENT ; \u4e0b\u4e00\u4e2a\u6587\u4ef6\u5757\nLABEL_GO_ON:\n    inc di ; di\u52a01\uff0c\u5373\u4e0b\u4e00\u4e2a\u5b57\u7b26\n    jmp LABEL_CMP_FILENAME ; \u7ee7\u7eed\u6bd4\u8f83\n\nLABEL_DIFFERENT:\n    and di, 0FFE0h ; \u6307\u5411\u8be5\u6587\u4ef6\u5757\u5f00\u5934\n    add di, 20h ; \u8df3\u8fc732\u5b57\u8282\uff0c\u5373\u6307\u5411\u4e0b\u4e00\u4e2a\u6587\u4ef6\u5757\u5f00\u5934\n    mov si, LoaderFileName ; \u91cd\u7f6eds:si\n    jmp LABEL_SEARCH_FOR_LOADERBIN ; \u7531\u4e8e\u8981\u91cd\u65b0\u8bbe\u7f6e\u4e00\u4e9b\u4e1c\u897f\uff0c\u6240\u4ee5\u56de\u5230\u67e5\u627eLoader\u5faa\u73af\u7684\u5f00\u5934\n\nLABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR:\n    add word [wSectorNo], 1 ; \u4e0b\u4e00\u4e2a\u6247\u533a\n    jmp LABEL_SEARCH_IN_ROOT_DIR_BEGIN ; \u91cd\u65b0\u6267\u884c\u4e3b\u5faa\u73af\n\nLABEL_NO_LOADERBIN: ; \u82e5\u627e\u4e0d\u5230loader.bin\u5219\u5230\u8fd9\u91cc\n    mov dh, 2\n    call DispStr; \u663e\u793aNo LOADER\n    jmp $\n\nLABEL_FILENAME_FOUND:\n    mov ax, RootDirSectors ; \u5c06ax\u7f6e\u4e3a\u6839\u76ee\u5f55\u9996\u6247\u533a\uff0819\uff09\n    and di, 0FFE0h ; \u5c06di\u8bbe\u7f6e\u5230\u6b64\u6587\u4ef6\u5757\u5f00\u5934\n    add di, 01Ah ; \u6b64\u65f6\u7684di\u6307\u5411Loader\u7684FAT\u53f7\n    mov cx, word [es:di] ; \u83b7\u5f97\u8be5\u6247\u533a\u7684FAT\u53f7\n    push cx ; \u5c06FAT\u53f7\u6682\u5b58\n    add cx, ax ; +\u6839\u76ee\u5f55\u9996\u6247\u533a\n    add cx, DeltaSectorNo ; \u83b7\u5f97\u771f\u6b63\u7684\u5730\u5740\n    mov ax, BaseOfLoader\n    mov es, ax\n    mov bx, OffsetOfLoader ; es:bx\uff1a\u8bfb\u53d6\u6247\u533a\u7684\u7f13\u51b2\u533a\u5730\u5740\n    mov ax, cx ; ax\uff1a\u8d77\u59cb\u6247\u533a\u53f7\n\nLABEL_GOON_LOADING_FILE: ; \u52a0\u8f7d\u6587\u4ef6\n    push ax\n    push bx\n    mov ah, 0Eh ; AH=0Eh\uff1a\u663e\u793a\u5355\u4e2a\u5b57\u7b26\n    mov al, '.' ; AL\uff1a\u5b57\u7b26\u5185\u5bb9\n    mov bl, 0Fh ; BL\uff1a\u663e\u793a\u5c5e\u6027\n; \u8fd8\u6709BH\uff1a\u9875\u7801\uff0c\u6b64\u5904\u4e0d\u7ba1\n    int 10h ; \u663e\u793a\u6b64\u5b57\u7b26\n    pop bx\n    pop ax ; \u4e0a\u9762\u51e0\u884c\u7684\u6574\u4f53\u4f5c\u7528\uff1a\u5728\u5c4f\u5e55\u4e0a\u6253\u5370\u4e00\u4e2a\u70b9\n\n    mov cl, 1\n    call ReadSector ; \u8bfb\u53d6Loader\u7b2c\u4e00\u4e2a\u6247\u533a\n    pop ax ; \u52a0\u8f7dFAT\u53f7\n    call GetFATEntry ; \u52a0\u8f7dFAT\u9879\n    cmp ax, 0FFFFh\n    jz LABEL_FILE_LOADED ; \u82e5\u6b64\u9879=0FFF\uff0c\u4ee3\u8868\u6587\u4ef6\u7ed3\u675f\uff0c\u76f4\u63a5\u8df3\u5165Loader\n    push ax ; \u91cd\u65b0\u5b58\u50a8FAT\u53f7\uff0c\u4f46\u6b64\u65f6\u7684FAT\u53f7\u5df2\u7ecf\u662f\u4e0b\u4e00\u4e2aFAT\u4e86\n    mov dx, RootDirSectors\n    add ax, dx ; +\u6839\u76ee\u5f55\u9996\u6247\u533a\n    add ax, DeltaSectorNo ; \u83b7\u53d6\u771f\u5b9e\u5730\u5740\n    add bx, [BPB_BytsPerSec] ; \u5c06bx\u6307\u5411\u4e0b\u4e00\u4e2a\u6247\u533a\u5f00\u5934\n    jmp LABEL_GOON_LOADING_FILE ; \u52a0\u8f7d\u4e0b\u4e00\u4e2a\u6247\u533a\n\nLABEL_FILE_LOADED:\n    mov dh, 1 ; \u6253\u5370\u7b2c 1 \u6761\u6d88\u606f\uff08Ready.\uff09\n    call DispStr\n    jmp BaseOfLoader:OffsetOfLoader ; \u8df3\u5165Loader\uff01\n\nwRootDirSizeForLoop dw RootDirSectors ; \u67e5\u627eloader\u7684\u5faa\u73af\u4e2d\u5c06\u4f1a\u7528\u5230\nwSectorNo           dw 0              ; \u7528\u4e8e\u4fdd\u5b58\u5f53\u524d\u6247\u533a\u6570\nbOdd                db 0              ; \u8fd9\u4e2a\u5176\u5b9e\u662f\u4e0b\u4e00\u8282\u7684\u4e1c\u897f\uff0c\u4e0d\u8fc7\u5148\u653e\u5728\u8fd9\u4e5f\u4e0d\u662f\u4e0d\u884c\n\nLoaderFileName      db \"LOADER  BIN\", 0 ; loader\u7684\u6587\u4ef6\u540d\n\nMessageLength       equ 9 ; \u4e0b\u9762\u662f\u4e09\u6761\u5c0f\u6d88\u606f\uff0c\u6b64\u53d8\u91cf\u7528\u4e8e\u4fdd\u5b58\u5176\u957f\u5ea6\uff0c\u4e8b\u5b9e\u4e0a\u5728\u5185\u5b58\u4e2d\u5b83\u4eec\u7684\u6392\u5e8f\u7c7b\u4f3c\u4e8e\u4e8c\u7ef4\u6570\u7ec4\nBootMessage:        db \"Booting  \" ; \u6b64\u5904\u5b9a\u4e49\u4e4b\u540e\u5c31\u53ef\u4ee5\u5220\u9664\u539f\u5148\u5b9a\u4e49\u7684BootMessage\u5b57\u7b26\u4e32\u4e86\nMessage1            db \"Ready.   \" ; \u663e\u793a\u5df2\u51c6\u5907\u597d\nMessage2            db \"No LOADER\" ; \u663e\u793a\u6ca1\u6709Loader\n\nDispStr:\n    mov ax, MessageLength\n    mul dh ; \u5c06ax\u4e58\u4ee5dh\u540e\uff0c\u7ed3\u679c\u4ecd\u7f6e\u5165ax\uff08\u4e8b\u5b9e\u4e0a\u8fdc\u6bd4\u6b64\u590d\u6742\uff0c\u6b64\u5904\u5148\u89e3\u91ca\u5230\u8fd9\u91cc\uff09\n    add ax, BootMessage ; \u627e\u5230\u7ed9\u5b9a\u7684\u6d88\u606f\n    mov bp, ax ; \u5148\u7ed9\u5b9a\u504f\u79fb\n    mov ax, ds\n    mov es, ax ; \u4ee5\u9632\u4e07\u4e00\uff0c\u91cd\u65b0\u8bbe\u7f6ees\n    mov cx, MessageLength ; \u5b57\u7b26\u4e32\u957f\u5ea6\n    mov ax, 01301h ; ah=13h, \u663e\u793a\u5b57\u7b26\u7684\u540c\u65f6\u5149\u6807\u79fb\u4f4d\n    mov bx, 0007h ; \u9ed1\u5e95\u767d\u5b57\n    mov dl, 0 ; \u7b2c0\u884c\uff0c\u524d\u9762\u6307\u5b9a\u7684dh\u4e0d\u53d8\uff0c\u6240\u4ee5\u7ed9\u5b9a\u7b2c\u51e0\u6761\u6d88\u606f\u5c31\u6253\u5370\u5230\u7b2c\u51e0\u884c\n    int 10h ; \u663e\u793a\u5b57\u7b26\n    ret\n\nReadSector: ; \u8bfb\u786c\u76d8\u6247\u533a\n; \u4ece\u7b2ceax\u53f7\u6247\u533a\u5f00\u59cb\uff0c\u8bfb\u53d6cl\u4e2a\u6247\u533a\u81f3es:bx\n    push esi\n    push di\n    push es\n    push bx\n    mov esi, eax\n    mov di, cx ; \u5907\u4efdax,cx\n\n; \u8bfb\u786c\u76d8 \u7b2c\u4e00\u6b65\uff1a\u8bbe\u7f6e\u8981\u8bfb\u53d6\u6247\u533a\u6570\n    mov dx, 0x1f2\n    mov al, cl\n    out dx, al\n\n    mov eax, esi ; \u6062\u590dax\n\n; \u7b2c\u4e8c\u6b65\uff1a\u5199\u5165\u6247\u533a\u53f7\n    mov dx, 0x1f3\n    out dx, al ; LBA 7~0\u4f4d\uff0c\u5199\u51650x1f3\n\n    mov cl, 8\n    shr eax, cl ; LBA 15~8\u4f4d\uff0c\u5199\u51650x1f4\n    mov dx, 0x1f4\n    out dx, al\n\n    shr eax, cl\n    mov dx, 0x1f5\n    out dx, al ; LBA 23~16\u4f4d\uff0c\u5199\u51650x1f5\n\n    shr eax, cl\n    and al, 0x0f ; LBA 27~24\u4f4d\n    or al, 0xe0 ; \u8868\u793a\u5f53\u524d\u786c\u76d8\n    mov dx, 0x1f6 ; \u5199\u51650x1f6\n    out dx, al\n\n; \u7b2c\u4e09\u6b65\uff1a0x1f7\u5199\u51650x20\uff0c\u8868\u793a\u8bfb\n    mov dx, 0x1f7 \n    mov al, 0x20\n    out dx, al\n\n; \u7b2c\u56db\u6b65\uff1a\u68c0\u6d4b\u786c\u76d8\u72b6\u6001\n.not_ready:\n    nop\n    in al, dx ; \u8bfb\u5165\u786c\u76d8\u72b6\u6001\n    and al, 0x88 ; \u5206\u79bb\u7b2c4\u4f4d\uff0c\u7b2c7\u4f4d\n    cmp al, 0x08 ; \u786c\u76d8\u4e0d\u5fd9\u4e14\u5df2\u51c6\u5907\u597d\n    jnz .not_ready ; \u4e0d\u6ee1\u8db3\uff0c\u7ee7\u7eed\u7b49\u5f85\n\n; \u7b2c\u4e94\u6b65\uff1a\u5c06\u6570\u636e\u4ece0x1f0\u7aef\u53e3\u8bfb\u51fa\n    mov ax, di ; di\u4e3a\u8981\u8bfb\u6247\u533a\u6570\uff0c\u5171\u9700\u8bfbdi * 512 / 2\u6b21\n    mov dx, 256\n    mul dx\n    mov cx, ax\n\n    mov dx, 0x1f0\n.go_on_read:\n    in ax, dx\n    mov [es:bx], ax\n    add bx, 2\n    loop .go_on_read\n; \u7ed3\u675f\n    pop bx\n    pop es\n    pop di\n    pop esi\n    ret\n\nGetFATEntry: ; \u8fd4\u56de\u7b2cax\u4e2a\u7c07\u7684\u503c\n    push es\n    push bx\n    push ax ; \u90fd\u4f1a\u7528\u5230\uff0cpush\u4e00\u4e0b\n    mov ax, BaseOfLoader\n    sub ax, 0100h\n    mov es, ax\n    pop ax\n    mov bx, 2\n    mul bx ; \u6bcf\u4e00\u4e2aFAT\u9879\u662f\u4e24\u5b57\u8282\uff0c\u7ed9ax\u4e582\u5c31\u662f\u504f\u79fb\nLABEL_GET_FAT_ENTRY:\n    ; \u5c06ax\u53d8\u4e3a\u6247\u533a\u53f7\n    xor dx, dx\n    mov bx, [BPB_BytsPerSec]\n    div bx ; dx = ax % 512, ax /= 512\n    push dx ; \u4fdd\u5b58dx\u7684\u503c\n    mov bx, 0 ; es:bx\u5df2\u6307\u5b9a\n    add ax, SectorNoOfFAT1 ; \u5bf9\u5e94\u6247\u533a\u53f7\n    mov cl, 1 ; \u4e00\u6b21\u8bfb\u4e00\u4e2a\u6247\u533a\u5373\u53ef\n    call ReadSector ; \u76f4\u63a5\u8bfb\u5165\n    ; bx \u5230 bx + 512 \u5904\u4e3a\u8bfb\u8fdb\u6247\u533a\n    pop dx\n    add bx, dx ; \u52a0\u4e0a\u504f\u79fb\n    mov ax, [es:bx] ; \u8bfb\u53d6\uff0c\u90a3\u4e48\u8fd9\u91cc\u5c31\u662f\u4e86\nLABEL_GET_FAT_ENTRY_OK: ; \u80dc\u5229\u6267\u884c\n    pop bx\n    pop es ; \u6062\u590d\u5806\u6808\n    ret\n\ntimes 510 - ($ - $$) db 0\ndb 0x55, 0xaa ; \u786e\u4fdd\u6700\u540e\u4e24\u4e2a\u5b57\u8282\u662f0x55AA\n</code></pre></p> <p>\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u547d\u4ee4\u5982\u4e0b\uff1a</p> <p></p> <p>\uff08\u56fe 21-2 \u7f16\u8bd1\u8fd0\u884c\u547d\u4ee4\uff09</p> <p>\u6548\u679c\u5982\u4e0b\uff1a</p> <p></p> <p>\uff08\u56fe 21-3 \u767d\u8272\u7684 <code>L</code>\uff0c\u5f88\u719f\u6089\u5bf9\u5427\uff09</p> <p>\u5bf9\u4e8e Loader\uff0c\u5728\u8fdb\u884c\u5b8c\u4e0a\u8ff0\u4fee\u6539\u4ee5\u540e\uff0c\u628a <code>LABEL_FILE_LOADED</code> \u4e2d\u7684 <code>call KillMotor</code> \u4ee5\u53ca <code>KillMotor</code> \u51fd\u6570\u4e00\u5e76\u5220\u9664\u5373\u53ef\uff0c\u8fd9\u91cc\u4e0d\u591a\u8d58\u8ff0\uff0c\u8d34\u4e00\u904d\u5b8c\u6574\u4ee3\u7801\uff1a</p> <p>\u4ee3\u7801 21-7 \u786c\u76d8\u7248 Loader-\u5b8c\u6574\u7248\uff08loader.asm\uff09 <pre><code>    org 0100h ; \u544a\u8bc9\u7f16\u8bd1\u5668\u7a0b\u5e8f\u5c06\u88c5\u8f7d\u81f30x100\u5904\n\nBaseOfStack                 equ 0100h ; \u6808\u7684\u57fa\u5740\n\n    jmp LABEL_START\n\n%include \"fat16hdr.inc\" ; \u6ca1\u9519\u5b83\u4f1a\u518ddb\u4e00\u904d\n%include \"load.inc\" ; \u4ee3\u66ff\u4e4b\u524d\u7684\u5e38\u91cf\n%include \"pm.inc\" ; \u4fdd\u62a4\u6a21\u5f0f\u76f8\u5173\n\n; GDT\nLABEL_GDT:          Descriptor 0,            0, 0                            ; \u5360\u4f4d\u7528\u63cf\u8ff0\u7b26\nLABEL_DESC_FLAT_C:  Descriptor 0,      0fffffh, DA_C | DA_32 | DA_LIMIT_4K   ; 32\u4f4d\u4ee3\u7801\u6bb5\uff0c\u5e73\u5766\u5185\u5b58\nLABEL_DESC_FLAT_RW: Descriptor 0,      0fffffh, DA_DRW | DA_32 | DA_LIMIT_4K ; 32\u4f4d\u6570\u636e\u6bb5\uff0c\u5e73\u5766\u5185\u5b58\nLABEL_DESC_VIDEO:   Descriptor 0B8000h, 0ffffh, DA_DRW | DA_DPL3             ; \u6587\u672c\u6a21\u5f0f\u663e\u5b58\uff0c\u540e\u9762\u7528\u4e0d\u5230\u4e86\n\nGdtLen equ $ - LABEL_GDT                                                    ; GDT\u7684\u957f\u5ea6\nGdtPtr dw GdtLen - 1                                                        ; gdtr\u5bc4\u5b58\u5668\uff0c\u5148\u653e\u7f6e\u957f\u5ea6\n       dd BaseOfLoaderPhyAddr + LABEL_GDT                                   ; \u4fdd\u62a4\u6a21\u5f0f\u4f7f\u7528\u7ebf\u6027\u5730\u5740\uff0c\u56e0\u6b64\u9700\u8981\u52a0\u4e0a\u7a0b\u5e8f\u88c5\u8f7d\u4f4d\u7f6e\u7684\u7269\u7406\u5730\u5740\uff08BaseOfLoaderPhyAddr\uff09\n\nSelectorFlatC       equ LABEL_DESC_FLAT_C  - LABEL_GDT                      ; \u4ee3\u7801\u6bb5\u9009\u62e9\u5b50\nSelectorFlatRW      equ LABEL_DESC_FLAT_RW - LABEL_GDT                      ; \u6570\u636e\u6bb5\u9009\u62e9\u5b50\nSelectorVideo       equ LABEL_DESC_VIDEO   - LABEL_GDT + SA_RPL3            ; \u6587\u672c\u6a21\u5f0f\u663e\u5b58\u9009\u62e9\u5b50\n\nLABEL_START:\n    mov ax, cs\n    mov ds, ax\n    mov es, ax ; \u5c06ds es\u8bbe\u7f6e\u4e3acs\u7684\u503c\uff08\u56e0\u4e3a\u6b64\u65f6\u5b57\u7b26\u4e32\u548c\u53d8\u91cf\u7b49\u5b58\u5728\u4ee3\u7801\u6bb5\u5185\uff09\n    mov ss, ax ; \u5c06\u5806\u6808\u6bb5\u4e5f\u521d\u59cb\u5316\u81f3cs\n    mov sp, BaseOfStack ; \u8bbe\u7f6e\u6808\u9876\n\n    mov dh, 0\n    call DispStr ; Loading\n\n    mov word [wSectorNo], SectorNoOfRootDirectory ; \u5f00\u59cb\u67e5\u627e\uff0c\u5c06\u5f53\u524d\u8bfb\u5230\u7684\u6247\u533a\u6570\u8bb0\u4e3a\u6839\u76ee\u5f55\u533a\u7684\u5f00\u59cb\u6247\u533a\uff0819\uff09\n    xor ah, ah ; \u590d\u4f4d\n    xor dl, dl\n    int 13h ; \u6267\u884c\u8f6f\u9a71\u590d\u4f4d\nLABEL_SEARCH_IN_ROOT_DIR_BEGIN:\n    cmp word [wRootDirSizeForLoop], 0 ; \u5c06\u5269\u4f59\u7684\u6839\u76ee\u5f55\u533a\u6247\u533a\u6570\u4e0e0\u6bd4\u8f83\n    jz LABEL_NO_KERNELBIN ; \u76f8\u7b49\uff0c\u4e0d\u5b58\u5728Kernel\uff0c\u8fdb\u884c\u5584\u540e\n    dec word [wRootDirSizeForLoop] ; \u51cf\u53bb\u4e00\u4e2a\u6247\u533a\n    mov ax, BaseOfKernelFile\n    mov es, ax\n    mov bx, OffsetOfKernelFile ; \u5c06es:bx\u8bbe\u7f6e\u4e3aBaseOfKernel:OffsetOfKernel\uff0c\u6682\u4e14\u4f7f\u7528Kernel\u6240\u5360\u7684\u5185\u5b58\u7a7a\u95f4\u5b58\u653e\u6839\u76ee\u5f55\u533a\n    mov ax, [wSectorNo] ; \u8d77\u59cb\u6247\u533a\uff1a\u5f53\u524d\u8bfb\u5230\u7684\u6247\u533a\u6570\uff08\u5e9f\u8bdd\uff09\n    mov cl, 1 ; \u8bfb\u53d6\u4e00\u4e2a\u6247\u533a\n    call ReadSector ; \u8bfb\u5165\n\n    mov si, KernelFileName ; \u4e3a\u6bd4\u5bf9\u505a\u51c6\u5907\uff0c\u6b64\u5904\u662f\u5c06ds:si\u8bbe\u4e3aKernel\u6587\u4ef6\u540d\n    mov di, OffsetOfKernelFile ; \u4e3a\u6bd4\u5bf9\u505a\u51c6\u5907\uff0c\u6b64\u5904\u662f\u5c06es:di\u8bbe\u4e3aKernel\u504f\u79fb\u91cf\uff08\u5373\u6839\u76ee\u5f55\u533a\u4e2d\u7684\u9996\u4e2a\u6587\u4ef6\u5757\uff09\n    cld ; FLAGS.DF=0\uff0c\u5373\u6267\u884clodsb/lodsw/lodsd\u540e\uff0csi\u81ea\u52a8\u589e\u52a0\n    mov dx, 10h ; \u517116\u4e2a\u6587\u4ef6\u5757\uff08\u4ee3\u8868\u4e00\u4e2a\u6247\u533a\uff0c\u56e0\u4e3a\u4e00\u4e2a\u6587\u4ef6\u575732\u5b57\u8282\uff0c16\u4e2a\u6587\u4ef6\u5757\u6b63\u597d\u4e00\u4e2a\u6247\u533a\uff09\nLABEL_SEARCH_FOR_KERNELBIN:\n    cmp dx, 0 ; \u5c06dx\u4e0e0\u6bd4\u8f83\n    jz LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR ; \u7ee7\u7eed\u524d\u8fdb\u4e00\u4e2a\u6247\u533a\n    dec dx ; \u5426\u5219\u5c06dx\u51cf1\n    mov cx, 11 ; \u6587\u4ef6\u540d\u517111\u5b57\u8282\nLABEL_CMP_FILENAME: ; \u6bd4\u5bf9\u6587\u4ef6\u540d\n    cmp cx, 0 ; \u5c06cx\u4e0e0\u6bd4\u8f83\n    jz LABEL_FILENAME_FOUND ; \u82e5\u76f8\u7b49\uff0c\u8bf4\u660e\u6587\u4ef6\u540d\u5b8c\u5168\u4e00\u81f4\uff0c\u8868\u793a\u627e\u5230\uff0c\u8fdb\u884c\u627e\u5230\u540e\u7684\u5904\u7406\n    dec cx ; cx\u51cf1\uff0c\u8868\u793a\u8bfb\u53d61\u4e2a\u5b57\u7b26\n    lodsb ; \u5c06ds:si\u7684\u5185\u5bb9\u7f6e\u5165al\uff0csi\u52a01\n    cmp al, byte [es:di] ; \u6b64\u5b57\u7b26\u4e0eKERNEL  BIN\u4e2d\u7684\u5f53\u524d\u5b57\u7b26\u76f8\u7b49\u5417\uff1f\n    jz LABEL_GO_ON ; \u4e0b\u4e00\u4e2a\u6587\u4ef6\u540d\u5b57\u7b26\n    jmp LABEL_DIFFERENT ; \u4e0b\u4e00\u4e2a\u6587\u4ef6\u5757\nLABEL_GO_ON:\n    inc di ; di\u52a01\uff0c\u5373\u4e0b\u4e00\u4e2a\u5b57\u7b26\n    jmp LABEL_CMP_FILENAME ; \u7ee7\u7eed\u6bd4\u8f83\n\nLABEL_DIFFERENT:\n    and di, 0FFE0h ; \u6307\u5411\u8be5\u6587\u4ef6\u5757\u5f00\u5934\n    add di, 20h ; \u8df3\u8fc732\u5b57\u8282\uff0c\u5373\u6307\u5411\u4e0b\u4e00\u4e2a\u6587\u4ef6\u5757\u5f00\u5934\n    mov si, KernelFileName ; \u91cd\u7f6eds:si\n    jmp LABEL_SEARCH_FOR_KERNELBIN ; \u7531\u4e8e\u8981\u91cd\u65b0\u8bbe\u7f6e\u4e00\u4e9b\u4e1c\u897f\uff0c\u6240\u4ee5\u56de\u5230\u67e5\u627eKernel\u5faa\u73af\u7684\u5f00\u5934\n\nLABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR:\n    add word [wSectorNo], 1 ; \u4e0b\u4e00\u4e2a\u6247\u533a\n    jmp LABEL_SEARCH_IN_ROOT_DIR_BEGIN ; \u91cd\u65b0\u6267\u884c\u4e3b\u5faa\u73af\n\nLABEL_NO_KERNELBIN: ; \u82e5\u627e\u4e0d\u5230kernel.bin\u5219\u5230\u8fd9\u91cc\n    mov dh, 2\n    call DispStr ; \u663e\u793aNo KERNEL\n    jmp $\n\nLABEL_FILENAME_FOUND:\n    mov ax, RootDirSectors ; \u5c06ax\u7f6e\u4e3a\u6839\u76ee\u5f55\u9996\u6247\u533a\uff0819\uff09\n    and di, 0FFF0h ; \u5c06di\u8bbe\u7f6e\u5230\u6b64\u6587\u4ef6\u5757\u5f00\u5934\n\n    push eax\n    mov eax, [es:di + 01Ch]\n    mov dword [dwKernelSize], eax\n    pop eax\n\n    add di, 01Ah ; \u6b64\u65f6\u7684di\u6307\u5411Kernel\u7684FAT\u53f7\n    mov cx, word [es:di] ; \u83b7\u5f97\u8be5\u6247\u533a\u7684FAT\u53f7\n    push cx ; \u5c06FAT\u53f7\u6682\u5b58\n    add cx, ax ; +\u6839\u76ee\u5f55\u9996\u6247\u533a\n    add cx, DeltaSectorNo ; \u83b7\u5f97\u771f\u6b63\u7684\u5730\u5740\n    mov ax, BaseOfKernelFile\n    mov es, ax\n    mov bx, OffsetOfKernelFile ; es:bx\uff1a\u8bfb\u53d6\u6247\u533a\u7684\u7f13\u51b2\u533a\u5730\u5740\n    mov ax, cx ; ax\uff1a\u8d77\u59cb\u6247\u533a\u53f7\n\nLABEL_GOON_LOADING_FILE: ; \u52a0\u8f7d\u6587\u4ef6\n    push ax\n    push bx\n    mov ah, 0Eh ; AH=0Eh\uff1a\u663e\u793a\u5355\u4e2a\u5b57\u7b26\n    mov al, '.' ; AL\uff1a\u5b57\u7b26\u5185\u5bb9\n    mov bl, 0Fh ; BL\uff1a\u663e\u793a\u5c5e\u6027\n; \u8fd8\u6709BH\uff1a\u9875\u7801\uff0c\u6b64\u5904\u4e0d\u7ba1\n    int 10h ; \u663e\u793a\u6b64\u5b57\u7b26\n    pop bx\n    pop ax ; \u4e0a\u9762\u51e0\u884c\u7684\u6574\u4f53\u4f5c\u7528\uff1a\u5728\u5c4f\u5e55\u4e0a\u6253\u5370\u4e00\u4e2a\u70b9\n\n    mov cl, 1\n    call ReadSector ; \u8bfb\u53d6Kernel\u7b2c\u4e00\u4e2a\u6247\u533a\n    pop ax ; \u52a0\u8f7dFAT\u53f7\n    call GetFATEntry ; \u52a0\u8f7dFAT\u9879\n    cmp ax, 0FFFFh\n    jz LABEL_FILE_LOADED ; \u82e5\u6b64\u9879=0FFF\uff0c\u4ee3\u8868\u6587\u4ef6\u7ed3\u675f\uff0c\u76f4\u63a5\u8df3\u5165Kernel\n    push ax ; \u91cd\u65b0\u5b58\u50a8FAT\u53f7\uff0c\u4f46\u6b64\u65f6\u7684FAT\u53f7\u5df2\u7ecf\u662f\u4e0b\u4e00\u4e2aFAT\u4e86\n    mov dx, RootDirSectors\n    add ax, dx ; +\u6839\u76ee\u5f55\u9996\u6247\u533a\n    add ax, DeltaSectorNo ; \u83b7\u53d6\u771f\u5b9e\u5730\u5740\n    add bx, [BPB_BytsPerSec] ; \u5c06bx\u6307\u5411\u4e0b\u4e00\u4e2a\u6247\u533a\u5f00\u5934\n    jmp LABEL_GOON_LOADING_FILE ; \u52a0\u8f7d\u4e0b\u4e00\u4e2a\u6247\u533a\n\nLABEL_FILE_LOADED:\n    mov dh, 1 ; \"Ready.\"\n    call DispStr\n; \u51c6\u5907\u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f\n    lgdt [GdtPtr] ; \u52a0\u8f7dgdt\n    cli ; \u5173\u95ed\u4e2d\u65ad\n\n    in al, 92h ; \u5f00\u542fA20\u5730\u5740\u7ebf\n    or al, 00000010b\n    out 92h, al\n\n    mov eax, cr0\n    or eax, 1 ; CR0.PE=1\uff0c\u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f\n    mov cr0, eax\n\n    jmp dword SelectorFlatC:(BaseOfLoaderPhyAddr + LABEL_PM_START) ; \u8fdb\u516532\u4f4d\u6bb5\uff0c\u5f7b\u5e95\u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f\n\ndwKernelSize        dd 0              ; Kernel\u5927\u5c0f\nwRootDirSizeForLoop dw RootDirSectors ; \u67e5\u627eKernel\u7684\u5faa\u73af\u4e2d\u5c06\u4f1a\u7528\u5230\nwSectorNo           dw 0              ; \u7528\u4e8e\u4fdd\u5b58\u5f53\u524d\u6247\u533a\u6570\nbOdd                db 0              ; \u8fd9\u4e2a\u5176\u5b9e\u662f\u4e0b\u4e00\u8282\u7684\u4e1c\u897f\uff0c\u4e0d\u8fc7\u5148\u653e\u5728\u8fd9\u4e5f\u4e0d\u662f\u4e0d\u884c\n\nKernelFileName      db \"KERNEL  BIN\", 0 ; Kernel\u7684\u6587\u4ef6\u540d\n\nMessageLength       equ 9 ; \u4e0b\u9762\u662f\u4e09\u6761\u5c0f\u6d88\u606f\uff0c\u6b64\u53d8\u91cf\u7528\u4e8e\u4fdd\u5b58\u5176\u957f\u5ea6\uff0c\u4e8b\u5b9e\u4e0a\u5728\u5185\u5b58\u4e2d\u5b83\u4eec\u7684\u6392\u5e8f\u7c7b\u4f3c\u4e8e\u4e8c\u7ef4\u6570\u7ec4\nBootMessage:        db \"Loading  \" ; \u6b64\u5904\u5b9a\u4e49\u4e4b\u540e\u5c31\u53ef\u4ee5\u5220\u9664\u539f\u5148\u5b9a\u4e49\u7684BootMessage\u5b57\u7b26\u4e32\u4e86\nMessage1            db \"Ready.   \" ; \u663e\u793a\u5df2\u51c6\u5907\u597d\nMessage2            db \"No KERNEL\" ; \u663e\u793a\u6ca1\u6709Kernel\n\nDispStr: ; void DispStr(char idx);\n; idx -&gt; dh\n; \u57fa\u4e8ebios\u529f\u80fd\uff1a\n; int 10h : ah=13h, \u6253\u5370\u5b57\u7b26\u4e32\n    mov ax, MessageLength\n    mul dh ; \u5c06ax\u4e58\u4ee5dh\u540e\uff0c\u7ed3\u679c\u4ecd\u7f6e\u5165ax\uff08\u4e8b\u5b9e\u4e0a\u8fdc\u6bd4\u6b64\u590d\u6742\uff0c\u6b64\u5904\u5148\u89e3\u91ca\u5230\u8fd9\u91cc\uff09\n    add ax, BootMessage ; \u627e\u5230\u7ed9\u5b9a\u7684\u6d88\u606f\n    mov bp, ax ; \u5148\u7ed9\u5b9a\u504f\u79fb\n    mov ax, ds\n    mov es, ax ; \u4ee5\u9632\u4e07\u4e00\uff0c\u91cd\u65b0\u8bbe\u7f6ees\n    mov cx, MessageLength ; \u5b57\u7b26\u4e32\u957f\u5ea6\n    mov ax, 01301h ; ah=13h, \u663e\u793a\u5b57\u7b26\u7684\u540c\u65f6\u5149\u6807\u79fb\u4f4d\n    mov bx, 0007h ; \u9ed1\u5e95\u767d\u5b57\n    mov dl, 0 ; \u7b2c0\u884c\uff0c\u524d\u9762\u6307\u5b9a\u7684dh\u4e0d\u53d8\uff0c\u6240\u4ee5\u7ed9\u5b9a\u7b2c\u51e0\u6761\u6d88\u606f\u5c31\u6253\u5370\u5230\u7b2c\u51e0\u884c\n    add dh, 3 ; \u7ed9dh\u52a03\uff0c\u907f\u514d\u4e0eboot\u6253\u5370\u7684\u6d88\u606f\u91cd\u53e0\n    int 10h ; \u663e\u793a\u5b57\u7b26\n    ret\n\nReadSector: ; \u8bfb\u786c\u76d8\u6247\u533a\n; \u4ece\u7b2ceax\u53f7\u6247\u533a\u5f00\u59cb\uff0c\u8bfb\u53d6cl\u4e2a\u6247\u533a\u81f3es:bx\n    push esi\n    push di\n    push es\n    push bx\n    mov esi, eax\n    mov di, cx ; \u5907\u4efdax,cx\n\n; \u8bfb\u786c\u76d8 \u7b2c\u4e00\u6b65\uff1a\u8bbe\u7f6e\u8981\u8bfb\u53d6\u6247\u533a\u6570\n    mov dx, 0x1f2\n    mov al, cl\n    out dx, al\n\n    mov eax, esi ; \u6062\u590dax\n\n; \u7b2c\u4e8c\u6b65\uff1a\u5199\u5165\u6247\u533a\u53f7\n    mov dx, 0x1f3\n    out dx, al ; LBA 7~0\u4f4d\uff0c\u5199\u51650x1f3\n\n    mov cl, 8\n    shr eax, cl ; LBA 15~8\u4f4d\uff0c\u5199\u51650x1f4\n    mov dx, 0x1f4\n    out dx, al\n\n    shr eax, cl\n    mov dx, 0x1f5\n    out dx, al ; LBA 23~16\u4f4d\uff0c\u5199\u51650x1f5\n\n    shr eax, cl\n    and al, 0x0f ; LBA 27~24\u4f4d\n    or al, 0xe0 ; \u8868\u793a\u5f53\u524d\u786c\u76d8\n    mov dx, 0x1f6 ; \u5199\u51650x1f6\n    out dx, al\n\n; \u7b2c\u4e09\u6b65\uff1a0x1f7\u5199\u51650x20\uff0c\u8868\u793a\u8bfb\n    mov dx, 0x1f7 \n    mov al, 0x20\n    out dx, al\n\n; \u7b2c\u56db\u6b65\uff1a\u68c0\u6d4b\u786c\u76d8\u72b6\u6001\n.not_ready:\n    nop\n    in al, dx ; \u8bfb\u5165\u786c\u76d8\u72b6\u6001\n    and al, 0x88 ; \u5206\u79bb\u7b2c4\u4f4d\uff0c\u7b2c7\u4f4d\n    cmp al, 0x08 ; \u786c\u76d8\u4e0d\u5fd9\u4e14\u5df2\u51c6\u5907\u597d\n    jnz .not_ready ; \u4e0d\u6ee1\u8db3\uff0c\u7ee7\u7eed\u7b49\u5f85\n\n; \u7b2c\u4e94\u6b65\uff1a\u5c06\u6570\u636e\u4ece0x1f0\u7aef\u53e3\u8bfb\u51fa\n    mov ax, di ; di\u4e3a\u8981\u8bfb\u6247\u533a\u6570\uff0c\u5171\u9700\u8bfbdi * 512 / 2\u6b21\n    mov dx, 256\n    mul dx\n    mov cx, ax\n\n    mov dx, 0x1f0\n.go_on_read:\n    in ax, dx\n    mov [es:bx], ax\n    add bx, 2\n    loop .go_on_read\n; \u7ed3\u675f\n    pop bx\n    pop es\n    pop di\n    pop esi\n    ret\n\nGetFATEntry: ; \u8fd4\u56de\u7b2cax\u4e2a\u7c07\u7684\u503c\n    push es\n    push bx\n    push ax ; \u90fd\u4f1a\u7528\u5230\uff0cpush\u4e00\u4e0b\n    mov ax, BaseOfLoader\n    sub ax, 0100h\n    mov es, ax\n    pop ax\n    mov bx, 2\n    mul bx ; \u6bcf\u4e00\u4e2aFAT\u9879\u662f\u4e24\u5b57\u8282\uff0c\u7ed9ax\u4e582\u5c31\u662f\u504f\u79fb\nLABEL_GET_FAT_ENTRY:\n    ; \u5c06ax\u53d8\u4e3a\u6247\u533a\u53f7\n    xor dx, dx\n    mov bx, [BPB_BytsPerSec]\n    div bx ; dx = ax % 512, ax /= 512\n    push dx ; \u4fdd\u5b58dx\u7684\u503c\n    mov bx, 0 ; es:bx\u5df2\u6307\u5b9a\n    add ax, SectorNoOfFAT1 ; \u5bf9\u5e94\u6247\u533a\u53f7\n    mov cl, 1 ; \u4e00\u6b21\u8bfb\u4e00\u4e2a\u6247\u533a\u5373\u53ef\n    call ReadSector ; \u76f4\u63a5\u8bfb\u5165\n    ; bx \u5230 bx + 512 \u5904\u4e3a\u8bfb\u8fdb\u6247\u533a\n    pop dx\n    add bx, dx ; \u52a0\u4e0a\u504f\u79fb\n    mov ax, [es:bx] ; \u8bfb\u53d6\uff0c\u90a3\u4e48\u8fd9\u91cc\u5c31\u662f\u4e86\nLABEL_GET_FAT_ENTRY_OK: ; \u80dc\u5229\u6267\u884c\n    pop bx\n    pop es ; \u6062\u590d\u5806\u6808\n    ret\n\n[section .s32]\nalign 32\n[bits 32]\nLABEL_PM_START:\n    mov ax, SelectorVideo ; \u6309\u7167\u4fdd\u62a4\u6a21\u5f0f\u7684\u89c4\u77e9\u6765\n    mov gs, ax ; \u628a\u9009\u62e9\u5b50\u88c5\u5165gs\n\n    mov ah, 0Fh\n    mov al, 'P'\n    mov [gs:((80 * 0 + 39) * 2)], ax ; \u8fd9\u4e00\u90e8\u5206\u5199\u5165\u663e\u5b58\u662f\u901a\u7528\u7684\n\n    mov ax, SelectorFlatRW ; \u6570\u636e\u6bb5\n    mov ds, ax\n    mov es, ax\n    mov fs, ax\n    mov ss, ax\n    mov esp, TopOfStack\n\n; cs\u7684\u8bbe\u5b9a\u5df2\u5728\u4e4b\u524d\u7684\u8fdc\u8df3\u8f6c\u4e2d\u5b8c\u6210\n    call InitKernel ; \u91cd\u65b0\u653e\u7f6e\u5185\u6838\n    jmp SelectorFlatC:KernelEntryPointPhyAddr ; \u8fdb\u5165\u5185\u6838\uff0cOS\u5f81\u7a0b\u4ece\u8fd9\u91cc\u5f00\u59cb\n\nMemCpy: ; void memcpy(void *dest, const void *src, size_t size);\n; ds:\u53c2\u65702 ==&gt; es:\u53c2\u65701\uff0c\u5927\u5c0f\uff1a\u53c2\u65703\n    push ebp\n    mov ebp, esp ; \u4fdd\u5b58ebp\u548cesp\u7684\u503c\n\n    push esi\n    push edi\n    push ecx ; \u6682\u5b58\u8fd9\u4e09\u4e2a\uff0c\u8981\u7528\n\n    mov edi, [ebp + 8] ; [esp + 4] ==&gt; \u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u76ee\u6807\u5185\u5b58\u533a\n    mov esi, [ebp + 12] ; [esp + 8] ==&gt; \u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u6e90\u5185\u5b58\u533a\n    mov ecx, [ebp + 16] ; [esp + 12] ==&gt; \u7b2c\u4e09\u4e2a\u53c2\u6570\uff0c\u62f7\u8d1d\u7684\u5b57\u8282\u5927\u5c0f\n.1:\n    cmp ecx, 0 ; if (ecx == 0)\n    jz .2 ; goto .2;\n\n    mov al, [ds:esi] ; \u4ece\u6e90\u5185\u5b58\u533a\u4e2d\u83b7\u53d6\u4e00\u4e2a\u503c\n    inc esi ; \u6e90\u5185\u5b58\u533a\u5730\u5740+1\n    mov byte [es:edi], al ; \u5c06\u8be5\u503c\u5199\u5165\u76ee\u6807\u5185\u5b58\n    inc edi ; \u76ee\u6807\u5185\u5b58\u533a\u5730\u5740+1\n\n    dec ecx ; \u62f7\u8d1d\u5b57\u8282\u6570\u5927\u5c0f-1\n    jmp .1 ; \u91cd\u590d\u6267\u884c\n.2:\n    mov eax, [ebp + 8] ; \u76ee\u6807\u5185\u5b58\u533a\u4f5c\u4e3a\u8fd4\u56de\u503c\n\n    pop ecx ; \u4ee5\u4e0b\u4ee3\u7801\u6062\u590d\u5806\u6808\n    pop edi\n    pop esi\n    mov esp, ebp\n    pop ebp\n\n    ret\n\nInitKernel: ; void InitKernel();\n    xor esi, esi ; esi = 0;\n    mov cx, word [BaseOfKernelFilePhyAddr + 2Ch] ; \u8fd9\u4e2a\u5185\u5b58\u5730\u5740\u5b58\u653e\u7684\u662fELF\u5934\u4e2d\u7684e_phnum\uff0c\u5373Program Header\u7684\u4e2a\u6570\n    movzx ecx, cx ; ecx\u9ad816\u4f4d\u7f6e0\uff0c\u4f4e16\u4f4d\u7f6e\u5165cx\n    mov esi, [BaseOfKernelFilePhyAddr + 1Ch] ; \u8fd9\u4e2a\u5185\u5b58\u5730\u5740\u4e2d\u5b58\u653e\u7684\u662fELF\u5934\u4e2d\u7684e_phoff\uff0c\u5373Program Header\u8868\u7684\u504f\u79fb\n    add esi, BaseOfKernelFilePhyAddr ; Program Header\u8868\u7684\u5177\u4f53\u4f4d\u7f6e\n.Begin:\n    mov eax, [esi] ; \u9996\u5148\u770b\u4e00\u4e0b\u6bb5\u7c7b\u578b\n    cmp eax, 0 ; \u6bb5\u7c7b\u578b\uff1aPT_NULL\u6216\u6b64\u5904\u4e0d\u5b58\u5728Program Header\n    jz .NoAction ; \u672c\u8f6e\u5faa\u73af\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\n    ; \u5426\u5219\u7684\u8bdd\uff1a\n    push dword [esi + 010h] ; p_filesz\n    mov eax, [esi + 04h] ; p_offset\n    add eax, BaseOfKernelFilePhyAddr ; BaseOfKernelFilePhyAddr + p_offset\n    push eax\n    push dword [esi + 08h] ; p_vaddr\n    call MemCpy ; \u6267\u884c\u4e00\u6b21\u62f7\u8d1d\n    add esp, 12 ; \u6e05\u7406\u5806\u6808\n.NoAction: ; \u672c\u8f6e\u5faa\u73af\u7684\u6e05\u7406\u5de5\u4f5c\n    add esi, 020h ; \u4e0b\u4e00\u4e2aProgram Header\n    dec ecx\n    jnz .Begin ; jz\u8fc7\u6765\u7684\u8bdd\u5c31\u76f4\u63a5ret\u4e86\n\n    ret\n\n[section .data1]\nStackSpace: times 1024 db 0 ; \u6808\u6682\u4e14\u5148\u7ed91KB\nTopOfStack  equ $ - StackSpace ; \u6808\u9876\n</code></pre></p> <p>\u5982\u4eca\u786c\u76d8 bootloader \u5df2\u6210\uff0c\u76f4\u63a5\u628a\u539f\u672c\u7684 <code>boot.asm</code> \u548c <code>loader.asm</code> \u66ff\u6362\u4e3a\u73b0\u5728\u7684 <code>boot.asm</code> \u548c <code>loader.asm</code>\uff0c\u5e76\u7528 <code>fat16hdr.inc</code> \u66ff\u6362 <code>fat12hdr.inc</code> \u5373\u53ef\u3002</p> <p>Makefile \u4e5f\u8981\u8fdb\u884c\u4fee\u6539\uff0c\u4ece\u6b64\u4ee5\u540e\u4e0d\u518d\u751f\u6210 <code>a.img</code> \u4e86\uff0c\u800c\u662f\u751f\u6210 <code>hd.img</code>\uff1a</p> <p>\u4ee3\u7801 21-8 \u65b0\u7248 <code>Makefile</code>\uff08Makefile\uff09 <pre><code>hd.img : out/boot.bin out/loader.bin out/kernel.bin\n    ftimgcreate hd.img -t hd -size 80\n    ftformat hd.img -t hd -f fat16\n    ftcopy out/loader.bin -to -img hd.img\n    ftcopy out/kernel.bin -to -img hd.img\n    dd if=out/boot.bin of=hd.img bs=512 count=1\n\nrun : hd.img\n    qemu-system-i386 -hda hd.img\n</code></pre></p> <p>\u7531\u4e8e\u73b0\u5728\u6bcf\u6b21\u7f16\u8bd1\u90fd\u4f1a\u91cd\u65b0\u521b\u5efa\u786c\u76d8\u955c\u50cf\uff0c\u6240\u4ee5\u4e4b\u524d\u7684\u5199\u5165\u6d4b\u8bd5\u6587\u4ef6 <code>iloveado.fai</code> \u5c06\u4e0d\u590d\u5b58\u5728\uff0c\u90a3\u5c31\u8fd4\u749e\u5f52\u771f\uff0c\u7528\u4e00\u884c\u7b80\u5355\u7684\u6253\u5370\u8bc1\u660e\u6211\u4eec\u8fdb\u5165\u4e86\u5185\u6838\u5427\uff1a</p> <p>\u4ee3\u7801 21-9 kernel/main.c <pre><code>void kernel_main() // kernel.asm\u4f1a\u8df3\u8f6c\u5230\u8fd9\u91cc\n{\n    monitor_clear();\n    init_gdtidt();\n    init_memory();\n    init_timer(100);\n    init_keyboard();\n    asm(\"sti\");\n\n    task_t *task_a = task_init();\n    task_t *task_shell = create_kernel_task(shell);\n    //task_run(task_shell);\n\n    printk(\"Hello, HD Boot!\");\n\n    while (1);\n}\n</code></pre></p> <p>\uff08shell\uff1a\u8bf7\u4f60\u8ba4\u771f\u7684\u770b\u4e00\u770b\u6211\u2026\u2026\u6211\u81f3\u4eca\u4e3a\u6b62\u6709\u88ab\u7528\u8fc7\u54ea\u6015\u4e00\u6b21\u4e48\uff1f\uff09</p> <p>\u4f7f\u7528 <code>make default</code> \u5168\u90e8\u91cd\u65b0\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u6548\u679c\u5982\u4e0b\u56fe\uff1a</p> <p></p> <p>\uff08\u56fe 21-4 \u786c\u76d8\u542f\u52a8\u6210\u529f\uff09</p> <p>\u7ec8\u4e8e\uff0c\u5728\u6574\u657421\u8282\u4e4b\u540e\uff0c\u6211\u4eec\u5e76\u4e0d\u662f\u5f88\u7d27\u5730\u8ddf\u4e0a\u4e86\u65f6\u4ee3\u6f6e\u6d41\uff0c\u5c06\u8f6f\u76d8\u6254\u8fdb\u4e86\u5386\u53f2\u7684\u5783\u573e\u5806\uff0c\u4e8b\u5b9e\u8bc1\u660e\u8fd9\u662f\u9887\u4e0d\u5177\u6709\u91cc\u7a0b\u7891\u610f\u4e49\u7684\u4e00\u4ef6\u4e0d\u662f\u5f88\u5927\u7684\u4e8b\u3002</p> <p>\u8fd9\u4e00\u8282\u672c\u6765\u662f\u60f3\u653e\u5728\u6700\u540e\u5199\u7684\uff0c\u8010\u4e0d\u4f4f\u8001\u6709\u4eba\u50ac\uff0c\u6240\u4ee5\u63d0\u524d\u5199\u4e86\uff0c\u5e94\u7528\u7a0b\u5e8f\u4ec0\u4e48\u7684\u5c31\u653e\u5728\u4e0b\u4e00\u8282\u5427\uff01</p>"},{"location":"os-tutorial/old/22-first-app/","title":"22 \u7b2c\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f","text":"<p>\u60f3\u8981\u52a0\u8f7d\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff0c\u5b9e\u9645\u4e0a\u662f\u76f8\u5f53\u7b80\u5355\u7684\uff0c\u6211\u4eec\u8fc5\u901f\u6765\u505a\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\u3002</p> <p>\u9996\u5148\uff0c\u521b\u5efa\u65b0\u6587\u4ef6 <code>test_app.asm</code>\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a</p> <p>\u4ee3\u7801 22-1 \u6d4b\u8bd5\u5e94\u7528\u7a0b\u5e8f\uff08test_app.asm\uff09 <pre><code>ud2\n</code></pre></p> <p>\u8fd9\u4e2a\u4e1c\u897f\u672c\u6765\u5e94\u8be5\u5728\u524d\u9762\u51e0\u8282\u8bb2\u5f02\u5e38\u7684\u65f6\u5019\u63d0\u7684\uff0c\u5b83\u53ef\u4ee5\u624b\u52a8\u89e6\u53d1\u4e00\u4e2a 6 \u53f7\u5f02\u5e38\uff0c\u5230\u65f6\u5019\u53ea\u9700\u8981\u770b\u662f\u5426\u89e6\u53d1\u5c31\u884c\u4e86\u3002</p> <p>\u4f7f\u7528 <code>nasm</code> \u547d\u4ee4\u5c06\u5b83\u7f16\u8bd1\u4e3a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u7a0b\u5e8f\uff1a</p> <p></p> <p>\uff08\u56fe 22-1 \u7f16\u8bd1\u65b9\u6cd5\uff09</p> <p>\u751f\u6210\u4e86\u4ec5\u4e24\u4e2a\u5b57\u8282\u7684 <code>test_app.bin</code>\uff0c\u4f7f\u7528 <code>ftcopy</code> \u547d\u4ee4\u5c06\u5b83\u5199\u5165\u865a\u62df\u786c\u76d8 <code>hd.img</code>\uff1a</p> <p></p> <p>\uff08\u56fe 22-2 \u5199\u5165\u786c\u76d8\uff0c\u82e5\u5b8c\u5168\u8ddf\u968f\u672c\u6559\u7a0b\u7684\u8bdd\uff0c\u786c\u76d8\u6839\u76ee\u5f55\u5e94\u8be5\u957f\u8fd9\u6837\uff09</p> <p>\u4fee\u6539 <code>kernel_main</code> \u4e2d\u6d4b\u8bd5\u4ee3\u7801\u5982\u4e0b\uff1a</p> <p>\u4ee3\u7801 22-2 \u6267\u884c\u5e94\u7528\u7a0b\u5e8f\uff08kernel/main.c\uff09 <pre><code>    int fd = sys_open(\"test_app.bin\", O_RDWR); // \u6253\u5f00\u5e94\u7528\u7a0b\u5e8f\u6587\u4ef6test_app.bin\n    char *buf = (char *) kmalloc(512); // \u5206\u914d\u4e00\u4e2a\u6247\u533a\u5f53\u7f13\u51b2\u533a\n    int ret = sys_read(fd, buf, 512); // \u8bfb\u53d6512\u5b57\u8282\u7684\u7a7a\u95f4\n    printk(\"read status: %d\\n\", ret); // \u8fd4\u56de\u8bfb\u53d6\u72b6\u6001\n    asm(\"jmp %0\" : : \"m\"(buf)); // \u7136\u540e\u76f4\u63a5\u8df3\u5165buf\u5f00\u59cb\u6267\u884c\u91cc\u9762\u7684\u4ee3\u7801\n    kfree(buf); // \u91ca\u653e\u7f13\u51b2\u533a\uff08\u867d\u7136\u5982\u679c\u6210\u4e86\u7406\u8bba\u4e0a\u6267\u884c\u4e0d\u5230\u8fd9\uff09\n</code></pre></p> <p>\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u6548\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\uff08\u56fe 22-3 6 \u53f7\u5f02\u5e38\u89e6\u53d1\uff0c\u5e94\u7528\u7a0b\u5e8f\u6210\u529f\u6267\u884c\uff09</p> <p>\u597d\u4e86\uff0c\u65e2\u7136\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5df2\u7ecf\u6210\u529f\u6267\u884c\uff0c\u5df2\u7ecf\u8fbe\u5230\u4e86\u672c\u8282\u6807\u9898\u7684\u8fdb\u5ea6\uff0c\u6240\u4ee5\u672c\u8282\u5230\u6b64\u7ed3\u675f\uff0c\u4e0b\u4e00\u8282\u2026\u2026</p> <p>\u4e50\u4e86\uff0c\u4f60\u770b\u8fd9\u53ef\u80fd\u5417\uff1f\u90a3\u5305\u4e0d\u53ef\u80fd\u7684\uff0c\u6211\u4eec\u672c\u8282\u771f\u6b63\u7684\u4efb\u52a1\u5176\u5b9e\u603b\u5171\u6709\u4e24\u4e2a\uff1a</p> <p>1.\u5b9e\u73b0\u4efb\u52a1\u521b\u5efa\uff0c\u73b0\u5728\u7684\u5e94\u7528\u7a0b\u5e8f\u6267\u884c\u4f1a\u76f4\u63a5\u628a\u539f\u6765\u7684\u4efb\u52a1\u9876\u53f7\uff0c\u8fd9\u6837\u7684\u8bdd\u591a\u4efb\u52a1\u5c31\u8ddf\u6ca1\u5b9e\u73b0\u4e00\u6837\uff1b</p> <p>2.\u5b9e\u73b0\u57fa\u672c\u7684\u4fdd\u62a4\u63aa\u65bd\uff0c\u73b0\u5728\u7684\u5e94\u7528\u7a0b\u5e8f\u968f\u968f\u4fbf\u4fbf\u5c31\u80fd\u60ca\u52a8 CPU \u8ba9\u5b83\u7206\u5f02\u5e38\uff0c\u8fd9\u5b9e\u5728\u662f\u975e\u5e38\u8106\u5f31\u7684\uff0c\u54ea\u6015\u7206\u4e5f\u53ea\u80fd\u7206\u4e00\u822c\u4fdd\u62a4\u6027\u5f02\u5e38\u8ba9 OS \u505a\u5904\u7406\u3002</p> <p>\u6211\u4eec\u4ece\u6613\u5230\u96be\uff0c\u4ece\u5b9e\u73b0\u4efb\u52a1\u521b\u5efa\u5f00\u59cb\u3002\u5728 Linux \u4e2d\uff0c\u521b\u5efa\u4efb\u52a1\u901a\u5e38\u4f7f\u7528\u7684\u662f <code>fork</code> \u51fd\u6570\uff08\u5f53\u7136\u4e5f\u6709\u522b\u7684\u51fd\u6570\u6bd4\u5982 <code>vfork</code>\uff0c\u8fd9\u91cc\u4e0d\u8ba8\u8bba\uff09\uff0c\u4f5c\u7528\u662f\u590d\u5236\u4e00\u4e2a\u5f53\u524d\u7684\u4efb\u52a1\uff0c\u4e0d\u8fc7\u7531\u4e8e\u6211\u4eec\u4f7f\u7528 TSS \u800c\u975e PCB\uff0c<code>fork</code> \u51fd\u6570\u975e\u5e38\u96be\u5b9e\u73b0\u3002\u90a3\u4e48\uff0c\u5c31\u53ea\u80fd\u9009\u62e9\u4f7f\u7528\u5fae\u8f6f\u98ce\u683c\u7684 <code>CreateProcess</code>\uff0c\u540e\u9762\u5199\u6210 <code>create_process</code>\uff1a</p> <p>\u4ee3\u7801 22-3 \u5e94\u7528\u7a0b\u5e8f\u4efb\u52a1\u521b\u5efa\u53ca\u6267\u884c API <pre><code>int create_process(const char *app_name, const char *cmdline, const char *work_dir); // \u8fd4\u56de\u65b0\u4efb\u52a1\u7684 PID\n</code></pre></p> <p>\u7531\u4e8e\u6211\u4eec\u6ca1\u6709\u5b9e\u73b0\u76ee\u5f55\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u53ea\u80fd\u586b <code>/</code>\u3002</p> <p>\u8fd9\u4e2a\u7cfb\u7edf\u8c03\u7528\u600e\u4e48\u5b9e\u73b0\u5462\uff1f\u5e0c\u671b\u5927\u5bb6\u90fd\u8fd8\u6ca1\u6709\u5fd8\u6389\u7b2c15\u8282\u521b\u5efa\u65b0\u7cfb\u7edf\u8c03\u7528\u7684\u65b9\u6cd5\uff08\u7b11\uff09\u3002\u9996\u5148\u5b9e\u73b0\u4e00\u4e2a\u5bf9\u5e94\u7684 <code>sys_create_process</code>\uff0c\u7136\u540e\u4ece\u6c47\u7f16\u91cc\u628a\u53c2\u6570\u4f20\u8fc7\u53bb\u3002</p> <p>\u9996\u5148\u6765\u5230 <code>include/syscall.h</code>\uff0c\u6dfb\u52a0 <code>sys_create_process</code> \u7684\u58f0\u660e\u5e76\u586b\u5165\u7cfb\u7edf\u8c03\u7528\u8868\uff1a</p> <p>\u4ee3\u7801 22-4 \u7cfb\u7edf\u8c03\u7528\u8868\uff08include/syscall.h\uff09 <pre><code>int sys_create_process(const char *app_name, const char *cmdline, const char *work_dir);\n\n// ...\n\nsyscall_func_t syscall_table[] = {\n    sys_getpid, sys_write, sys_read, sys_create_process, // \u8fd9\u91cc\u65b0\u589e\u4e86\u4e00\u4e2a\u51fd\u6570\n};\n</code></pre></p> <p>\u7531\u4e8e <code>create_process</code> \u5171\u6709\u4e09\u4e2a\u53c2\u6570\uff0c\u56e0\u6b64\u548c <code>read</code>\u3001<code>write</code> \u4e00\u6837\uff0c\u7528 <code>ebx</code>\u3001<code>ecx</code>\u3001<code>edx</code> \u4e09\u4e2a\u5bc4\u5b58\u5668\u8fdb\u884c\u4f20\u53c2\uff0c\u6240\u4ee5\u6284\u4e00\u904d\u4e0a\u9762\u4e24\u4e2a\u7cfb\u7edf\u8c03\u7528\uff0c\u7136\u540e\u6539\u4e00\u4e0b\u7cfb\u7edf\u8c03\u7528\u53f7\u5373\u53ef\uff1a</p> <p>\u4ee3\u7801 22-5 <code>create_process</code> \u7684\u5b9e\u73b0\uff08\u4f2a\uff09\uff08kernel/syscall_impl.asm\uff09 <pre><code>[global create_process]\ncreate_process:\n    push ebx\n    mov eax, 3\n    mov ebx, [esp + 8]\n    mov ecx, [esp + 12]\n    mov edx, [esp + 16]\n    int 80h\n    pop ebx\n    ret\n</code></pre></p> <p>\u5bf9\u4e8e <code>sys_create_process</code>\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5355\u72ec\u7684\u6587\u4ef6\uff0c\u6bd5\u7adf\u8fd9\u7b97\u662f\u53e6\u4e00\u4e2a\u4e3b\u9898\u2014\u2014\u5e94\u7528\u7a0b\u5e8f\u6267\u884c\u91cc\u9762\u7684\u4e1c\u897f\u3002\u65b0\u5efa <code>kernel/exec.c</code>\uff0c\u6211\u4eec\u6765\u8003\u8651\u8003\u8651\u600e\u4e48\u5199\u8fd9\u4e2a\u4e1c\u897f\u3002</p> <p>\u521b\u5efa\u65b0\u4efb\u52a1\u6211\u4eec\u662f\u6709\u65b9\u6cd5\u7684\uff0c\u76f4\u63a5\u8c03\u7528\u90a3\u4e2a <code>create_kernel_task</code> \u5c31\u884c\u4e86\u3002\u4f46\u662f\u8fd9\u4e2a\u65b0\u4efb\u52a1\u8981\u600e\u4e48\u77e5\u9053\u6267\u884c\u54ea\u4e2a\u5e94\u7528\u5462\uff1f\u6709\u6ca1\u6709\u4ec0\u4e48\u529e\u6cd5\u8ba9\u8fd9\u4e2a\u4efb\u52a1\u63a5\u6536\u5230\u53c2\u6570\u5462\uff1f</p> <p>\u8fd9\u4e2a\u4efb\u52a1\u5728\u672c\u8d28\u4e0a\u4e5f\u5c31\u662f\u4e00\u4e2a\u51fd\u6570\u800c\u5df2\u3002\u800c\u51fd\u6570\u7684\u4f20\u53c2\uff0c\u4f9d\u9760\u7684\u662f <code>esp + 4</code>\u3001<code>esp + 8</code> \u4e4b\u7c7b\u7684\u7279\u6b8a\u5730\u5740\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5148\u628a <code>esp</code> \u51cf\u53bb\u4e00\u4e2a\u7279\u5b9a\u7684\u503c\uff0c\u7a7a\u51fa\u4e09\u4e2a\u53c2\u6570\u7684\u91cf\u6765\uff0c\u7136\u540e\u628a\u4e09\u4e2a\u53c2\u6570\u5199\u8fdb\u90a3\u4e2a\u5185\u5b58\u91cc\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u65b0\u4efb\u52a1\u4e2d\u8bfb\u5230\u4e86\u3002</p> <p>\u7531\u4e8e\u5728\u4efb\u52a1\u4e2d\u81ea\u5df1\u64cd\u4f5c\u81ea\u5df1\u6bd4\u5728\u522b\u7684\u4efb\u52a1\u4e2d\u64cd\u4f5c\u8fd9\u4e2a\u4efb\u52a1\u8981\u66f4\u4e3a\u7b80\u5355\uff0c\u6240\u4ee5\u5728 <code>sys_create_process</code> \u4e2d\u6211\u4eec\u53ea\u8fdb\u884c\u521b\u5efa\u4efb\u52a1\u7684\u5de5\u4f5c\u3002</p> <p>\u4ee3\u7801 22-6 <code>sys_create_process</code> \u7684\u5b9e\u73b0\uff08kernel/exec.c\uff09 <pre><code>#include \"mtask.h\"\n\nint sys_create_process(const char *app_name, const char *cmdline, const char *work_dir)\n{\n    task_t *new_task = create_kernel_task(app_entry);\n    new_task-&gt;tss.esp -= 12;\n    *((int *) (new_task-&gt;tss.esp + 4)) = (int) app_name;\n    *((int *) (new_task-&gt;tss.esp + 8)) = (int) cmdline;\n    *((int *) (new_task-&gt;tss.esp + 12)) = (int) work_dir;\n    task_run(new_task);\n    return task_pid(new_task);\n}\n</code></pre></p> <p>\u4e0d\u8981\u5fd8\u4e86\u5728 <code>mtask.h</code> \u4e2d\u6dfb\u52a0 <code>create_kernel_task</code> \u7684\u58f0\u660e\u3002</p> <p>\u4e09\u4e2a\u53c2\u6570\u4e00\u5171\u5bf9\u5e94 12 \u7684\u6808\u504f\u79fb\uff0c\u4e09\u4e2a\u53c2\u6570\u5c31\u88ab\u987a\u6b21\u653e\u5728 <code>esp + 4</code>\u3001<code>esp + 8</code>\u3001<code>esp + 12</code> \u7684\u5730\u65b9\u3002\u6700\u540e\u8fd4\u56de\u4e86\u65b0\u4efb\u52a1\u7684 PID\uff0c\u8fd9\u662f\u56e0\u4e3a\u5b83\u80af\u5b9a\u4f1a\u88ab\u7528\u5230\uff0c\u4e0d\u80fd\u8ba9\u8c03\u7528\u7684\u5565\u4e5f\u4e0d\u77e5\u9053\u3002</p> <p>\u8fd9\u6837\uff0c<code>app_entry</code> \u5e94\u8be5\u5c31\u53ef\u4ee5\u6210\u529f\u63a5\u6536\u5230\u53c2\u6570\u4e86\uff1a</p> <p>\u4ee3\u7801 22-7 \u662f\u65b0\u4efb\u52a1\u54e6\uff08kernel/exec.c\uff09 <pre><code>void app_entry(const char *app_name, const char *cmdline, const char *work_dir)\n{\n    puts(app_name); puts(cmdline); puts(work_dir);\n    while (1);\n}\n</code></pre></p> <p>\u5728 <code>kernel_main</code> \u4e2d\u6dfb\u52a0\u4e00\u884c <code>create_process(\"test_app.bin\", \"nothing\", \"/\")</code>\uff0c\u7136\u540e\u7f16\u8bd1\u8fd0\u884c\uff0c\u6548\u679c\u5982\u4e0b\uff1a</p> <p></p> <p>\uff08\u56fe 22-4 \u63a5\u6536\u5230\u53c2\u6570\uff09</p> <p>\u597d\u4e86\uff0c\u4e0a\u9762\u4e24\u70b9\u8981\u6c42\u91cc\u7684\u7b2c\u4e00\u70b9\u2014\u2014\u4efb\u52a1\u521b\u5efa\uff0c\u5c31\u8fd9\u6837\u505a\u5b8c\u4e86\u3002\u4e0b\u9762\u8be5\u8003\u8651\u5b9e\u73b0\u4fdd\u62a4\u529f\u80fd\u7684\u4e8b\u4e86\u3002</p> <p>intel \u7684 cpu \u4e00\u5171\u53ef\u5206\u4e3a\u56db\u4e2a\u7279\u6743\u7ea7\uff08\u53ef\u4ee5\u7c7b\u4f3c\u7406\u89e3\u4e3a\u6743\u9650\uff09\uff0c\u6309\u7167 0~3 \u6807\u53f7\u4e3a ring0\u3001ring1\u3001ring2\u3001ring3\u3002\u5176\u4e2d\u4e2d\u95f4\u4e24\u4e2a\u4e0d\u5e38\u7528\uff0c\u524d\u540e\u4e24\u4e2a\u5e38\u7b80\u79f0\u4e3a r0 \u548c r3\u3002r0 \u662f\u9ed8\u8ba4\u7684\u7279\u6743\u7ea7\uff0c\u662f\u7ed9\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u7528\u7684\uff1b\u800c r3 \u5219\u662f\u7ed9\u7528\u6237\u4f7f\u7528\u7684\u7279\u6743\u7ea7\u3002\u4e3a\u4e86\u5b9e\u73b0\u4fdd\u62a4\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u5165 r3 \u7279\u6743\u7ea7\uff0c\u7136\u540e\u518d\u8003\u8651\u6267\u884c\u7684\u4e8b\u3002</p> <p>\u600e\u4e48\u8fdb\u5165 r3 \u7279\u6743\u7ea7\u5462\uff1f\u8fd9\u5c31\u4e0d\u5f97\u4e0d\u63d0\u5230\u5f88\u65e9\u4ee5\u524d\uff0c\u5927\u6982\u5341\u51e0\u8282\u4ee5\u524d\uff0cGDT \u63cf\u8ff0\u7b26\u53ca\u9009\u62e9\u5b50\u7684\u7ed3\u6784\u56fe\uff0c\u518d\u8d34\u4e00\u904d\uff08\u4e0a\u4e3a\u63cf\u8ff0\u7b26\uff0c\u4e0b\u4e3a\u9009\u62e9\u5b50\uff09\uff1a</p> <p></p> <p></p> <p>\u8fd9\u5176\u4e2d\u7684 DPL \u548c RPL \u5c31\u662f\u7279\u6743\u7ea7\u6709\u5173\u7684\u4e1c\u897f\u4e86\u3002\u628a\u4e00\u4e2a\u6bb5\u7684 DPL \u8bbe\u4e3a 0-3\uff0c\u8868\u793a\u8fd9\u4e2a\u6bb5\u7684\u7279\u6743\u7ea7\uff1b\u800c\u628a\u4e00\u4e2a\u9009\u62e9\u5b50\u7684 RPL \u8bbe\u4e3a 0-3\uff0c\u8868\u793a\u8fd9\u4e2a\u9009\u62e9\u5b50\u7684\u7279\u6743\u7ea7\u3002\u7531\u4e8e\u7a0b\u5e8f\u6267\u884c\u7684\u662f\u4ee3\u7801\u6bb5\uff0c\u6240\u4ee5\u4ee3\u7801\u6bb5\u9009\u62e9\u5b50\u7684\u7279\u6743\u7ea7\uff0c\u5c31\u662f\u73b0\u5728\u7684\u7279\u6743\u7ea7\uff08CPL\uff09\u3002\u663e\u7136\uff0c\u7531\u4e8e\u9009\u62e9\u5b50\u662f\u63cf\u8ff0\u7b26\u7684\u4ee3\u8a00\u4eba\uff0cDPL \u4e0e\u5176\u9009\u62e9\u5b50\u7684 RPL \u5e94\u5f53\u4e00\u81f4\u3002\u60f3\u8981\u8fdb\u5165 r3\uff0c\u4e5f\u5c31\u662f\u66f4\u6539 CPL\uff0c\u53ea\u9700\u8981\u5148\u521b\u5efa\u4e00\u4e2a DPL=3 \u7684\u4ee3\u7801\u6bb5\uff0c\u7136\u540e\u60f3\u529e\u6cd5\u8fdb\u53bb\u5c31\u53ef\u4ee5\u4e86\u3002</p> <p>\u8fd9\u4e2a\u4ee3\u7801\u6bb5\u653e\u5728\u54ea\u5462\uff1fGDT \u91cc\uff1f\u90a3\u81ea\u7136\u4e0d\u884c\uff0c\u5e94\u7528\u7a0b\u5e8f\u8bbf\u95ee\u5e94\u7528\u7a0b\u5e8f\u7684\u4ee3\u7801\u6bb5\u5408\u60c5\u5408\u7406\uff0c\u4f46\u8fd9\u4e2a\u7a0b\u5e8f\u8bbf\u95ee\u90a3\u4e2a\u7a0b\u5e8f\u7684\u6bb5\u5c31\u4e0d\u5408\u7406\u4e86\u3002</p> <p>intel \u81ea\u7136\u4e5f\u8003\u8651\u5230\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u5728\u8bbe\u8ba1 TSS \u65f6\uff0c\u641e\u4e86\u4e00\u4e2a\u53eb\u505a <code>ldtr</code> \u7684\u6210\u5458\u3002\u4f7f\u7528\u8054\u60f3\u8bb0\u5fc6\u6cd5\uff0cGDTR\u3001IDTR \u90fd\u5bf9\u5e94 GDT\u3001IDT\uff0c\u96be\u9053 LDTR \u5bf9\u5e94\u4e00\u4e2a\u53eb LDT \u7684\u4e1c\u897f\u5417\uff1f</p> <p>\u8bf6\uff0c\u8fd8\u771f\u662f\uff01GDT \u5168\u79f0\u662f Global Descriptor Table\uff0c\u8fd9\u4e2a LDT \u5219\u4e0e\u4e4b\u5bf9\u5e94\uff0c\u662f Local Descriptor Table\u3002\u6bcf\u4e00\u4e2a LDT \u7684\u7ed3\u6784\uff0c\u90fd\u4e0e GDT \u5b8c\u5168\u4e00\u81f4\uff0c\u53ea\u662f\u8868\u9879\u53ef\u4ee5\u7701\u7565\u3002\u5728\u9009\u62e9\u5b50\u7684\u7ed3\u6784\u56fe\u4e2d\uff0c\u53ef\u4ee5\u770b\u5230\u6709\u4e00\u4e2a <code>TI</code> \u4f4d\uff0c\u5b83\u4e3a 1 \u5219\u8868\u793a\u5f53\u524d\u6bb5\u5728 LDT \u4e2d\uff0c\u5426\u5219\u8868\u793a\u5f53\u524d\u6bb5\u5728 GDT \u4e2d\u3002</p> <p>\u5728\u6267\u884c\u4efb\u52a1\u5207\u6362\u65f6\uff0cintel \u4f1a\u81ea\u52a8\u52a0\u8f7d LDT\uff0c\u6240\u4ee5\u8fd9\u4e00\u90e8\u5206\u5c31\u4e0d\u9700\u8981\u6211\u4eec\u6765\u7ba1\u4e86\u3002\u73b0\u5728\u552f\u4e00\u7684\u95ee\u9898\u5c31\u662f\uff1aCPU \u600e\u4e48\u77e5\u9053\u4f60\u8fd9\u4e2a LDT \u5728\u54ea\u91cc\u5462\uff1f\u5bf9\u6b64\uff0cintel \u91c7\u53d6\u4e86\u4e00\u5957\u4e0e TSS \u7c7b\u4f3c\u7684\u65b9\u6848\uff0c\u90a3\u5c31\u662f\u628a LDT \u653e\u5230 GDT \u91cc\uff08\uff1f\uff09\u3002\u5b9e\u9645\u4e0a\uff0cTSS \u7684 ldtr \u6210\u5458\u5bf9\u5e94\u7684\u6b63\u662f\u8fd9\u4e2a\u4efb\u52a1\u7684 LDT \u5728 GDT \u4e2d\u5bf9\u5e94\u7684\u90a3\u4e2a\u6bb5\u7684\u9009\u62e9\u5b50\u3002</p> <p>\u5728\u4efb\u52a1\u7ed3\u6784\u4f53\u4e2d\u65b0\u589e\u4e00\u4e2a\u6210\u5458 <code>ldt</code>\uff1a</p> <p>\u4ee3\u7801 22-8 LDT \u771f\u6b63\u5b58\u653e\u7684\u4f4d\u7f6e\uff08include/mtask.h\uff09 <pre><code>#include \"gdtidt.h\"\n\n// \u7701\u7565 tss32_t, exit_retval_t, MAX_FILE_OPEN_PER_PROC\n\ntypedef struct TASK {\n    uint32_t sel;\n    int32_t flags;\n    exit_retval_t my_retval;\n    int fd_table[MAX_FILE_OPEN_PER_TASK];\n    gdt_entry_t ldt[2];\n    tss32_t tss;\n} task_t;\n</code></pre></p> <p>\u63a5\u7740\u5728 <code>task_init</code> \u4e2d\uff0c\u628a\u6240\u6709\u4efb\u52a1\u7684 LDT \u6ce8\u518c\u5230 GDT \u5e76\u521d\u59cb\u5316 LDTR\uff1a</p> <p>\u4ee3\u7801 22-9 \u521d\u59cb\u5316 LDT \u4ee5\u53ca LDTR\uff08kernel/mtask.c\uff09 <pre><code>    for (int i = 0; i &lt; MAX_TASKS; i++) {\n        taskctl-&gt;tasks0[i].flags = 0;\n        taskctl-&gt;tasks0[i].sel = (TASK_GDT0 + i) * 8;\n        taskctl-&gt;tasks0[i].tss.ldtr = (TASK_GDT0 + MAX_TASKS + i) * 8;\n        gdt_set_gate(TASK_GDT0 + i, (int) &amp;taskctl-&gt;tasks0[i].tss, 103, 0x89); // \u786c\u6027\u89c4\u5b9a\uff0c0x89 \u4ee3\u8868 TSS\uff0c103 \u662f\u56e0\u4e3a TSS \u5171 26 \u4e2a uint32_t \u7ec4\u6210\uff0c\u603b\u8ba1 104 \u5b57\u8282\uff0c\u56e0\u89c4\u7a0b\u51cf1\u53d8\u4e3a103\n        gdt_set_gate(TASK_GDT0 + MAX_TASKS + i, (int) &amp;taskctl-&gt;tasks0[i].ldt, 15, 0x82); // 0x82 \u4ee3\u8868 LDT\uff0c\u4e24\u4e2a GDT \u8868\u9879\u5171\u8ba1 16 \u5b57\u8282\n    }\n</code></pre></p> <p>\u73b0\u5728\u6709\u4e86 LDT\uff0c\u8be5\u60f3\u529e\u6cd5\u8fdb\u5165 r3 \u4e86\u3002\u6216\u8bb8\u6709\u7684\u8bfb\u8005\u4f1a\u5c31\u6b64\u60f3\u5f53\u7136\uff1a</p> <p>\u6539\u53d8 cs \u548c eip\uff1f\u8fd9\u4e0d\u662f\u4e00\u4e2a farjmp/farcall \u5c31\u53ef\u4ee5\u505a\u5230\u4e86\u5417\uff1f</p> <p>\u7136\u800c\uff0cintel \u5b9e\u9645\u4e0a\u4e0d\u5141\u8bb8\u4f7f\u7528 farjmp/farcall \u4ece r0 \u8df3\u5230 r3\uff08\u751a\u81f3\u5230 64 \u4f4d\u4ee5\u540e\u76f4\u63a5\u628a\u8fd9\u4fe9\u73a9\u610f ban \u4e86\uff09\u3002\u5f53\u7136\uff0c\u529e\u6cd5\u603b\u6bd4\u56f0\u96be\u591a\uff0c\u8fd8\u53ef\u4ee5\u7528 far-ret \u548c <code>iretd</code>\uff1a\u7cfb\u7edf\u8c03\u7528\u672c\u8d28\u4e0a\u8fd8\u662f\u4e2d\u65ad\uff0c\u800c\u7cfb\u7edf\u8c03\u7528\u6267\u884c\u65f6\u662f r0 \u6743\u9650\uff0c\u8fd4\u56de\u65f6\u662f r3 \u6743\u9650\uff0c\u6240\u4ee5\u4ece\u4e2d\u65ad\u8fd4\u56de\u7684\u8fd9\u4e00\u6b65\uff0cintel \u662f\u4e0d\u52a0\u9650\u5236\u7684\u3002far-ret \u540c\u7406\uff0c\u53ef\u80fd\u4f1a\u6709\u4e00\u4e9b\u6bd4\u8f83\u53e4\u65e9\u7684\u7cfb\u7edf\u4f7f\u7528 farcall \u6765\u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\u3002</p> <p>\u73b0\u5728\u53ea\u662f\u521d\u59cb\u5316\u4e86 LDT \u8fd9\u4e2a\u8868\uff0c\u5b83\u7684\u8868\u9879\u90fd\u8fd8\u6ca1\u521d\u59cb\u5316\uff0c\u4fdd\u6301\u7740\u4e00\u5f00\u59cb\u7684\u6837\u5b50\u3002\u73b0\u5728\u6267\u884c\u4e8c\u8fdb\u5236\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4ee3\u7801\u6bb5\u7684\u5927\u5c0f\u5c31\u662f\u6587\u4ef6\u5927\u5c0f\uff0c\u56e0\u6b64\u8fd8\u9700\u8981\u628a\u6587\u4ef6\u8bfb\u8fdb\u6765\uff1a</p> <p>\u4ee3\u7801 22-10 \u8bfb\u5165\u5e94\u7528\u7a0b\u5e8f\uff08kernel/exec.c\uff09 <pre><code>#include \"file.h\"\n#include \"memory.h\"\n// ...\nvoid app_entry(const char *app_name, const char *cmdline, const char *work_dir)\n{\n    int fd = sys_open((char *) app_name, O_RDONLY);\n    int size = sys_lseek(fd, -1, SEEK_END) + 1;\n    sys_lseek(fd, 0, SEEK_SET);\n    char *buf = (char *) kmalloc(size + 5);\n    sys_read(fd, buf, size);\n    while (1);\n}\n</code></pre></p> <p>\u8fd9\u91cc\u4f7f\u7528\u4e86\u4e00\u79cd\u5e38\u89c1\u7684\u624b\u6cd5\uff0c\u5148\u8c03\u7528 <code>lseek</code> \u628a\u8bfb\u5199\u6307\u9488\u8bbe\u7f6e\u5230\u7ed3\u5c3e\uff0c\u5229\u7528\u5b83\u8fd4\u56de\u65b0\u4f4d\u7f6e\u7684\u7279\u6027\u5f97\u5230\u6587\u4ef6\u5927\u5c0f\uff0c\u518d\u7528 <code>lseek</code> \u628a\u8bfb\u5199\u6307\u9488\u8bbe\u7f6e\u56de\u5f00\u5934\uff0c\u6700\u540e\u4e00\u6b21\u8bfb\u53d6\u6574\u4e2a\u6587\u4ef6\u3002\u7531\u4e8e\u5728 <code>lseek</code> \u4e2d\u5bf9\u8d85\u51fa <code>size - 1</code> \u7684\u4f4d\u7f6e\u4e0d\u4e88\u627f\u8ba4\uff0c\u8fd9\u91cc\u9700\u8981\u5148\u628a\u6307\u9488\u6307\u5411 <code>size - 1</code> \u5904\uff0c\u6700\u540e\u518d\u628a 1 \u52a0\u56de\u6765\u5f97\u5230\u6587\u4ef6\u5927\u5c0f\u3002\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8981\u5bf9\u6587\u4ef6\u540d\u8fdb\u884c\u5f3a\u8f6c\uff0c\u662f\u56e0\u4e3a\u5982\u679c\u4e0d\u8fd9\u6837 gcc \u4f1a\u62a5\u8b66\u544a\u5f88\u70e6\u3002</p> <p>\u7531\u4e8e LDT \u7684\u8868\u9879\u4e0e GDT \u7684\u8868\u9879\u5b8c\u5168\u4e00\u81f4\uff0c\u6240\u4ee5\u590d\u5236\u7c98\u8d34\u4e86\u4e00\u4e2a <code>ldt_set_gate</code>\uff1a</p> <p>\u4ee3\u7801 22-11 \u8bbe\u7f6e LDT \u8868\u9879\u7684\u51fd\u6570\uff08kernel/exec.c\uff09 <pre><code>void ldt_set_gate(int32_t num, uint32_t base, uint32_t limit, uint16_t ar)\n{\n    task_t *task = task_now();\n    if (limit &gt; 0xfffff) { // \u6bb5\u4e0a\u9650\u8d85\u8fc71MB\n        ar |= 0x8000; // ar\u7684\u7b2c15\u4f4d\uff08\u5c06\u88ab\u5f53\u4f5climit_high\u4e2d\u7684G\u4f4d\uff09\u8bbe\u4e3a1\n        limit /= 0x1000; // \u6bb5\u4e0a\u9650\u7f29\u5c0f\u4e3a\u539f\u6765\u76841/4096\uff0cG\u4f4d\u8868\u793a\u6bb5\u4e0a\u9650\u4e3a\u5b9e\u9645\u76844KB\n    }\n    // base\u90e8\u5206\u6ca1\u6709\u5176\u4ed6\u7684\u5947\u602a\u4e1c\u897f\u6df7\u6742\uff0c\u5f88\u597d\u8bf4\n    task-&gt;ldt[num].base_low = base &amp; 0xFFFF; // \u4f4e16\u4f4d\n    task-&gt;ldt[num].base_mid = (base &gt;&gt; 16) &amp; 0xFF; // \u4e2d\u95f48\u4f4d\n    task-&gt;ldt[num].base_high = (base &gt;&gt; 24) &amp; 0xFF; // \u9ad88\u4f4d\n    // limit\u90e8\u5206\u6df7\u4e86\u4e00\u5768ar\u8fdb\u6765\uff0c\u7565\u5fae\u590d\u6742\n    task-&gt;ldt[num].limit_low = limit &amp; 0xFFFF; // \u4f4e16\u4f4d\n    task-&gt;ldt[num].limit_high = ((limit &gt;&gt; 16) &amp; 0x0F) | ((ar &gt;&gt; 8) &amp; 0xF0); // \u73b0\u5728\u7684limit\u6700\u591a\u4e3a0xfffff\uff0c\u6240\u4ee5\u6700\u9ad8\u4f4d\u53ea\u52694\u4f4d\u4f5c\u4e3a\u4f4e4\u4f4d\uff0c\u9ad84\u4f4d\u81ea\u7136\u88abar\u7684\u9ad812\u4f4d\u6324\u5360\n\n    task-&gt;ldt[num].access_right = ar &amp; 0xFF; // ar\u90e8\u5206\u53ea\u80fd\u5b58\u4f4e4\u4f4d\u4e86\n}\n</code></pre></p> <p>LDT \u7684\u4ee3\u7801\u6bb5\u5e94\u8be5\u662f\u6574\u4e2a\u6587\u4ef6\uff0c\u90a3\u6570\u636e\u6bb5\u5462\uff1f\u7531\u4e8e\u7eaf\u4e8c\u8fdb\u5236\u6587\u4ef6\u7ed3\u6784\u7684\u7279\u6b8a\u6027\uff0c\u6211\u4eec\u4e5f\u8ba4\u4e3a\u662f\u6574\u4e2a\u6587\u4ef6\uff08\u7eaf\u4e8c\u8fdb\u5236\u7684\u4ee3\u7801\u548c\u6570\u636e\u662f\u6df7\u5728\u4e00\u8d77\u7684\uff0c\u5177\u4f53\u600e\u4e48\u6837\u7531\u7a0b\u5e8f\u672c\u8eab\u6765\u51b3\u5b9a\uff09\u3002</p> <p>\u4ee3\u7801 22-12 \u8bbe\u7f6e\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u6bb5\u3001\u6570\u636e\u6bb5\uff08kernel/exec.c\uff09 <pre><code>void app_entry(const char *app_name, const char *cmdline, const char *work_dir)\n{\n    int fd = sys_open((char *) app_name, O_RDONLY);\n    int size = sys_lseek(fd, -1, SEEK_END) + 1;\n    sys_lseek(fd, 0, SEEK_SET);\n    char *buf = (char *) kmalloc(size + 5);\n    sys_read(fd, buf, size);\n    ldt_set_gate(0, (int) buf, size - 1, 0x409a | 0x60); // here\n    ldt_set_gate(1, (int) buf, size - 1, 0x4092 | 0x60); // here\n    while (1);\n}\n</code></pre></p> <p>\u5728\u6700\u540e\u4e24\u5904\u6216\u4e0a 0x60\uff0c\u5b9e\u9645\u4e0a\u76f8\u5f53\u4e8e\u628a DPL \u8bbe\u7f6e\u6210\u4e863\u3002</p> <p>\u90a3\u4e48\u6700\u540e\u4e00\u6b65\uff0c\u5c31\u662f\u542f\u52a8\u4e86\u3002\u8fd9\u542f\u52a8\u53ef\u4e0d\u80fd\u4e71\u542f\u52a8\uff0c\u5728\u4efb\u52a1\u5207\u6362\u7684\u65f6\u5019\uff0cCPU \u4f1a\u89c2\u5bdf\u4f60\u8981\u8df3\u5230\u54ea\u4e2a\u5c42\u7ea7\uff0c\u5982\u679c\u4f60\u5728 r3 \u800c\u60f3\u8981\u8df3\u56de r0\uff0c\u90a3\u4e48\u5b83\u7684\u6808\u6307\u9488 esp \u4f1a\u4ece\u8fd9\u4e2a\u4efb\u52a1\u7684 TSS \u4e2d\u7684 <code>esp0</code> \u6210\u5458\u6765\u8bfb\u53d6\uff0c<code>ss</code> \u5806\u6808\u6bb5\u4e5f\u662f\u4e00\u6837\u3002\u56e0\u6b64\u5728\u7a0b\u5e8f\u4e2d\uff0c\u8fd8\u9700\u8981\u5bf9\u8fd9\u4e24\u4e2a\u4e1c\u897f\u8fdb\u884c\u8bbe\u7f6e\u3002\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u5355\u72ec\u7684\u6c47\u7f16\u51fd\u6570 <code>start_app</code> \u6765\u5904\u7406\u8fd9\u4e9b\u4e8b\uff1a</p> <p>\u4ee3\u7801 22-13 \u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u4e4b\u524d\uff08lib/nasmfunc.asm\uff09 <pre><code>[global start_app]\nstart_app: ; void start_app(int new_eip, int new_cs, int new_esp, int new_ss, int *esp0)\n    pushad\n    mov eax, [esp + 36] ; new_eip\n    mov ecx, [esp + 40] ; new_cs\n    mov edx, [esp + 44] ; new_esp\n    mov ebx, [esp + 48] ; new_ss\n    mov ebp, [esp + 52] ; esp0\n    mov [ebp], esp ; *esp0 = esp\n    mov [ebp + 4], ss ; *ss0 = ss\n; \u7528\u65b0\u7684ss\u91cd\u8bbe\u5404\u6bb5\uff0c\u5b9e\u9645\u4e0a\u5e76\u4e0d\u592a\u5408\u7406\u800c\u5e94\u4f7f\u7528ds\n    mov es, bx\n    mov ds, bx\n    mov fs, bx\n    mov gs, bx\n; \u9009\u62e9\u5b50\u6216\u4e0a3\u8868\u793a\u8981\u8fdb\u5165r3\u7684\u6bb5\n    or ecx, 3 ; new_cs.RPL=3\n    or ebx, 3 ; new_ss.RPL=3\n    push ebx ; new_ss\n    push edx ; new_esp\n    push ecx ; new_cs\n    push eax ; new_eip\n    retf ; \u5269\u4e0b\u7684\u5f39\u51fa\u7684\u6d3b\u4ea4\u7ed9 CPU \u6765\u5b8c\u6210\n</code></pre></p> <p>\u5728 <code>app_entry</code> \u4e2d\u6dfb\u52a0\u4e00\u884c <code>start_app(0, 0 * 8 + 4, 0, 1 * 8 + 4, &amp;(task_now()-&gt;tss.esp0));</code>\uff0c\u540c\u65f6\u6dfb\u52a0 <code>start_app</code> \u7684\u58f0\u660e\uff0c\u73b0\u5728\u5e94\u8be5\u5c31\u53ef\u4ee5\u6b63\u5e38\u542f\u52a8\u5e94\u7528\u7a0b\u5e8f\u4e86\u3002\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u6211\u4eec\u770b\u5230\u6548\u679c\u5982\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\uff08\u56fe 22-5 \u518d\u6b21\u89e6\u53d1 6 \u53f7\u5f02\u5e38\uff09</p> <p>\u8fd0\u884c\u6210\u529f\u4e86\uff01\u6211\u4eec\u6210\u529f\u8fdb\u5165\u4e86 r3 \u7528\u6237\u7279\u6743\u7ea7\uff0c\u8fd9\u610f\u5473\u7740\u73b0\u5728\u64cd\u4f5c\u7cfb\u7edf\u5df2\u7ecf\u5728\u4fdd\u62a4\u4e4b\u4e0b\u3002\u4e0d\u4fe1\u90aa\u7684\u5404\u4f4d\u53ef\u4ee5\u628a\u6d4b\u8bd5\u4ee3\u7801\u6539\u6210 <code>int 21h</code>\uff0c\u5e94\u8be5\u80fd\u770b\u5230\u89e6\u53d1\u4e86 13 \u53f7\uff0c\u4e5f\u5c31\u662f\u4e00\u822c\u4fdd\u62a4\u6027\u5f02\u5e38\u3002</p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e\u6bcf\u6b21\u91cd\u65b0\u7f16\u8bd1\u90fd\u4f1a\u6e05\u7a7a\u786c\u76d8\uff0c\u6240\u4ee5\u9700\u8981\u624b\u52a8\u5199\u5165 <code>test_app.bin</code>\u3002</p> <p>\u4e0d\u8fc7\uff0c\u5149\u80fd\u8fd0\u884c\u7a0b\u5e8f\u8fd8\u4e0d\u591f\uff0c\u8fd8\u6709\u4e24\u4ef6\u4e8b\u60c5\u8981\u529e\uff1a\u7b2c\u4e00\uff0c\u786e\u8ba4\u5b83\u53ef\u4ee5\u5b9e\u73b0\u7cfb\u7edf\u8c03\u7528\uff1b\u7b2c\u4e8c\uff0c\u628a\u8fd9\u4e1c\u897f\u63a5\u5165 shell \u5f53\u4e2d\u3002</p> <p>\u600e\u4e48\u5b9e\u73b0\u7cfb\u7edf\u8c03\u7528\u5462\uff1f\u8fd9\u4e2a\u597d\u529e\uff0c\u6211\u4eec\u7a0b\u5e8f\u91cc\u600e\u4e48\u7528\u7684\u8fd9\u5c31\u600e\u4e48\u7528\u3002\u81f3\u4e8e\u7528\u4ec0\u4e48\uff0c\u7b80\u5355\u8f93\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u7528 <code>write</code> \u7cfb\u7edf\u8c03\u7528\u5c31\u53ef\u4ee5\u3002</p> <p><code>write</code> \u7cfb\u7edf\u8c03\u7528\uff1a eax = 1 ebx = fd ecx = buf edx = size</p> <p>\u4ee3\u7801 22-14 \u4f7f\u7528\u7cfb\u7edf\u8c03\u7528\u8f93\u51fa\u5b57\u7b26\uff08test_app.asm\uff09 <pre><code>    mov eax, 1\n    mov ebx, 1\n    mov ecx, string\n    mov edx, strlen\n    int 80h\n\n    jmp $\n\nstring: db \"Hello, World!\", 0x0A, 0x00\nstrlen equ $ - string\n</code></pre></p> <p>\u7f16\u8bd1\u5e94\u7528\u7a0b\u5e8f\u5e76\u7528 <code>ftcopy</code> \u547d\u4ee4\u5199\u5165\u78c1\u76d8\uff0c\u6548\u679c\u5982\u4e0b\uff1a</p> <p></p> <p>\uff08\u56fe 22-6 \u5931\u8d25\uff09</p> <p>\u5509\uff0c\u4f60\u600e\u4e48\u4f3c\u4e86\uff1f\uff1f\u770b\u6765\u5b9e\u73b0\u5e94\u7528\u7a0b\u5e8f\u8fd8\u6ca1\u6709\u90a3\u4e48\u7b80\u5355\uff08\u82e6\u7b11\uff09\uff0c\u8fd9\u4e00\u8282\u8fd8\u6709\u5f88\u957f\u7684\u8def\u8981\u8d70\u3002</p> <p>\u6211\u4eec\u6765\u4ed4\u7ec6\u9605\u8bfb\u73b0\u5728\u7684\u7cfb\u7edf\u8c03\u7528\u5904\u7406\u7a0b\u5e8f <code>syscall_handler</code>\uff1a</p> <p>\u4ee3\u7801 22-15 \u73b0\u5728\u7684 <code>syscall_handler</code> <pre><code>[extern syscall_manager]\n[global syscall_handler]\nsyscall_handler:\n    sti\n    pushad\n    pushad\n\n    call syscall_manager\n\n    add esp, 32\n    popad\n    iretd\n</code></pre></p> <p>\u6211\u4eec\u53d1\u73b0\uff0c\u6b64\u65f6\u6240\u6709\u7684\u6bb5\u5168\u90fd\u662f\u7528\u6237\u65f6 r3 \u65f6\u671f\u7684\u6bb5\uff0c\u800c\u5185\u6838\u5904\u7406\u7cfb\u7edf\u8c03\u7528\u7684\u4e1c\u897f\u90fd\u5728 r0\uff0c\u5f53\u7136\u8bfb\u4e0d\u5230\u3002\u8fd9\u5c31\u5f15\u53d1\u4e86\u4e00\u4e2a\u77db\u76fe\uff1a\u60f3\u8981\u8ba9\u7528\u6237\u7a0b\u5e8f\u6267\u884c\u7cfb\u7edf\u8c03\u7528\uff0c\u5fc5\u987b\u52a0\u8f7d\u5185\u6838 r0 \u7684\u6bb5\uff0c\u4f46\u662f\u8fd9\u6837\u4e00\u6765\u5c31\u53c8\u628a r3 \u6bb5\u4e2d\u8981\u663e\u793a\u7684\u4e1c\u897f\u7ed9\u4e22\u4e86\u3002</p> <p>\u603b\u4e4b\uff0c\u5207\u6362\u5230 r0 \u76ee\u524d\u6765\u770b\u66f4\u4e3a\u5fc5\u8981\uff0c\u90a3\u4e48\u8be5\u600e\u4e48\u6362\u5462\uff1f\u7531\u4e8e cs \u5df2\u7ecf\u662f r0 \u4ee3\u7801\u6bb5\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u8d4b\u503c\u5185\u6838\u6570\u636e\u6bb5\u9009\u62e9\u5b50\u5c31\u53ef\u4ee5\u4e86\u3002</p> <p>\u4ee3\u7801 22-16 \u65b0\u7248 <code>syscall_handler</code>\uff08kernel/interrupt.asm\uff09 <pre><code>[extern syscall_manager]\n[global syscall_handler]\nsyscall_handler:\n    sti\n    push ds\n    push es\n    pushad\n    pushad\n\n    mov ax, 0x10 ; \u65b0\u589e\n    mov ds, ax   ; \u65b0\u589e\n    mov es, ax   ; \u65b0\u589e\n\n    call syscall_manager\n\n    add esp, 32\n    popad\n    pop es\n    pop ds\n    iretd\n</code></pre></p> <p>\u73b0\u5728\u518d\u7f16\u8bd1\u8fd0\u884c\uff0c\u5e76\u624b\u52a8\u66f4\u65b0 <code>test_app.bin</code>\uff0c\u6548\u679c\u53ef\u80fd\u662f\u8fd9\u6837\u7684\uff1a</p> <p></p> <p>\uff08\u56fe 22-7 \u81f3\u5c11\u8f93\u51fa\u4e86\uff09</p> <p>\u867d\u7136\u8bf4\u5e76\u6ca1\u6709\u8f93\u51fa Hello World\uff0c\u4f46\u662f\u81f3\u5c11\u8f93\u51fa\u4e86\u70b9\u4e1c\u897f\u4e86\uff0c\u8fd9\u81f3\u5c11\u8bf4\u660e\u6211\u4eec\u7684\u7cfb\u7edf\u8c03\u7528\u5df2\u7ecf\u6210\u529f\u6267\u884c\u3002\u63a5\u4e0b\u6765\u5c31\u8be5\u5904\u7406\u8f93\u51fa\u7684\u4e1c\u897f\u548c\u5b9e\u9645\u4e0d\u4e00\u6837\u8fd9\u4ef6\u4e8b\u4e86\u3002</p> <p>\u8fd9\u4e2a\u95ee\u9898\u600e\u4e48\u89e3\u51b3\u5462\uff1f\u8003\u8651\u5230\u5b9e\u9645\u4e0a\u5b83\u8bbf\u95ee\u7684\u5730\u5740\u662f\u8fd9\u4e2a\u7a0b\u5e8f\u5bf9\u5e94\u7684\u4efb\u52a1 LDT \u5185\u7684\u5730\u5740\uff0c\u6240\u4ee5\u53ea\u8981\u628a LDT \u57fa\u5740\u52a0\u5728\u8fd9\u4e2a\u5730\u5740\u4e0a\uff0c\u5927\u6982\u5c31\u6ca1\u95ee\u9898\u4e86\u3002</p> <p>\u7531\u4e8e\u73b0\u5728\u7684\u7cfb\u7edf\u8c03\u7528\u91c7\u53d6\u5728\u6570\u7ec4\u91cc\u627e\u51fd\u6570\u7684\u65b9\u5f0f\uff0c\u6240\u4ee5\u6ca1\u6cd5\u5355\u72ec\u7ed9\u4e00\u4e2a\u53c2\u6570\u52a0 LDT \u57fa\u5740\u3002\u6d4b\u8bd5\u9700\u8981\uff0c\u6211\u4eec\u7ed9\u76ee\u524d <code>write</code> \u5728\u4f7f\u7528\u7684 <code>ecx</code> \u5bc4\u5b58\u5668\u52a0\u4e0a LDT \u57fa\u5740\u3002\u600e\u4e48\u52a0\u5462\uff1f\u5176\u5b9e\u627e\u4e2a\u5730\u65b9\u628a <code>buf</code> \u5b58\u4e00\u4e0b\u5c31\u597d\u4e86\uff08\u7b11\uff09\u3002</p> <p>\u9274\u4e8e\u6267\u884c\u7cfb\u7edf\u8c03\u7528\u524d\u540e\u5176\u5b9e\u662f\u540c\u4e00\u4e2a\u4efb\u52a1\uff0c\u6240\u4ee5\u8fd9\u4e2a\u4e1c\u897f\u653e\u5728\u4efb\u52a1\u7ed3\u6784\u4f53\u91cc\u4f1a\u6bd4\u8f83\u65b9\u4fbf\u3002</p> <p>\u4ee3\u7801 22-17 \u4efb\u52a1\u6570\u636e\u6bb5\u57fa\u5740\uff08include/mtask.h\uff09 <pre><code>typedef struct TASK {\n    uint32_t sel;\n    int32_t flags;\n    exit_retval_t my_retval;\n    int fd_table[MAX_FILE_OPEN_PER_TASK];\n    gdt_entry_t ldt[2];\n    int ds_base; // \u65b0\u589e\n    tss32_t tss;\n} task_t;\n</code></pre></p> <p>\u5728 <code>app_entry</code> \u4e2d\u66f4\u65b0\u5b83\uff1a</p> <p>\u4ee3\u7801 22-18 \u6267\u884c\u5e94\u7528\u65f6\u66f4\u65b0\u6570\u636e\u6bb5\u57fa\u5740\uff08kernel/exec.c\uff09 <pre><code>void app_entry(const char *app_name, const char *cmdline, const char *work_dir)\n{\n    int fd = sys_open((char *) app_name, O_RDONLY);\n    int size = sys_lseek(fd, -1, SEEK_END) + 1;\n    sys_lseek(fd, 0, SEEK_SET);\n    char *buf = (char *) kmalloc(size + 5);\n    sys_read(fd, buf, size);\n    task_now()-&gt;ds_base = (int) buf; // \u8fd9\u91cc\u662f\u65b0\u589e\u7684\n    ldt_set_gate(0, (int) buf, size - 1, 0x409a | 0x60);\n    ldt_set_gate(1, (int) buf, size - 1, 0x4092 | 0x60);\n    start_app(0, 0 * 8 + 4, 0, 1 * 8 + 4, &amp;(task_now()-&gt;tss.esp0));\n    while (1);\n}\n</code></pre></p> <p>\u73b0\u5728\u5b58\u662f\u5b58\u5b8c\u4e86\uff0c\u95ee\u9898\u662f\u600e\u4e48\u52a0\u5230\u5730\u5740\u4e0a\uff1f\u6bcf\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\u90fd\u662f\u73b0\u573a\u4ece\u51fd\u6570\u8868\u91cc\u53d6\u7684\uff0c\u4e0d\u80fd\u5355\u72ec\u5904\u7406\u3002\u8fd9\u91cc\u4e3a\u4e86\u6d4b\u8bd5\u9700\u8981\uff0c\u4e0d\u7ba1\u4e09\u4e03\u4e8c\u5341\u4e00\uff0c\u76f4\u63a5\u52a0\u5230 <code>ecx</code> \u4e0a\uff08\u76ee\u524d\u6240\u6709\u7684\u7cfb\u7edf\u8c03\u7528\u90fd\u7528\u4e86 <code>ecx</code> \u4f20\u5730\u5740\uff0c\u4f46\u662f <code>create_process</code> \u5176\u5b9e\u5e94\u8be5\u90fd\u52a0\uff09\uff1a</p> <p>\u4ee3\u7801 22-19 \u5904\u7406\u5730\u5740\u504f\u79fb\u95ee\u9898\uff08\u4e34\u65f6\uff09 <pre><code>void syscall_manager(int edi, int esi, int ebp, int esp, int ebx, int edx, int ecx, int eax)\n{\n    int ds_base = task_now()-&gt;ds_base;\n    typedef int (*syscall_t)(int, int, int, int, int);\n    //(&amp;eax + 1)[7] = ((syscall_t) syscall_table[eax])(ebx, ecx, edx, edi, esi);\n    syscall_t syscall_fn = (syscall_t) syscall_table[eax];\n    int ret = syscall_fn(ebx, ecx + ds_base, edx, edi, esi);\n    int *save_reg = &amp;eax + 1;\n    save_reg[7] = ret;\n}\n</code></pre></p> <p>\u8fd9\u4e0b\u5e94\u8be5\u5904\u7406\u5b8c\u6210\u4e86\u3002\u518d\u6b21\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u6548\u679c\u5982\u4e0b\uff1a</p> <p></p> <p>\uff08\u56fe 22-8 \u603b\u7b97\u6210\u529f\u4e86\u2026\u2026\uff1f\uff09</p> <p>\u81f3\u6b64\uff0c\u7eaf\u4e8c\u8fdb\u5236\u5e94\u7528\u7a0b\u5e8f\u5e94\u8be5\u5df2\u7ecf\u53ef\u4ee5\u5b8c\u6574\u6267\u884c\u4e86\u3002\u6ca1\u60f3\u5230\u5355\u662f\u8fd9\u6837\u7bc7\u5e45\u5c31\u5df2\u7ecf\u5feb\u8981\u7206\u70b8\u4e86\uff0c\u90a3\u4e48\u96c6\u6210\u5230 shell \u7684\u95ee\u9898\u5c31\u53ea\u597d\u4e0b\u4e00\u8282\u518d\u529e\u4e86\u3002</p> <p>\u8fd8\u662f\u5728\u4e0b\u4e00\u8282\uff0c\u6211\u4eec\u4f1a\u7528 C \u5199\u4e00\u4e9b\u7b80\u5355\u7684\u5c0f\u7a0b\u5e8f\u6765\u8dd1\u3002</p> <p>\u6216\u8bb8\u6709\u4eba\u95ee\u4e86\uff0c\u90a3\u4e48\u6700\u540e\u4e00\u8282\u5e72\u4ec0\u4e48\u5462\uff1f\u5148\u5356\u4e2a\u5173\u5b50\u54e6\u3002</p>"},{"location":"os-tutorial/old/23-c-app-part0/","title":"23 C\u8bed\u8a00\u5e94\u7528\u7a0b\u5e8f\uff08\u4e0a\uff09","text":"<p>\u7ec8\u4e8e\u8981\u7ed3\u675f\u5566\uff08\u8d85\u5927\u58f0\uff09</p> <p>\u672c\u8282\u5148\u6765\u5904\u7406\u4e0a\u4e00\u8282\u7684\u5386\u53f2\u9057\u7559\u95ee\u9898\uff0c\u4e0a\u4e00\u8282\u7ed9\u6211\u4eec\u7559\u4e0b\u4e86\u4e00\u4e2a\u5de8\u5927\u7684\u70c2\u644a\u5b50\uff1a</p> <p>\u7cfb\u7edf\u8c03\u7528\u4e2d\u6709\u5173\u5e94\u7528\u7a0b\u5e8f\u57fa\u5740\u504f\u79fb\u7684\u90e8\u5206\u9700\u8981\u5bf9\u4e0d\u540c\u7684\u7cfb\u7edf\u8c03\u7528\u5177\u4f53\u95ee\u9898\u5177\u4f53\u5206\u6790\uff0c\u8fd9\u610f\u5473\u7740\u628a\u90a3\u4e2a\u4f18\u7f8e\u7684\u7cfb\u7edf\u8c03\u7528\u8868\u62c6\u6210\u4e00\u5768\u5c4e\u4e00\u6837\u7684 switch-case\u3002</p> <p>\u6267\u884c\u5e94\u7528\u7a0b\u5e8f\u8fd8\u6ca1\u6709\u96c6\u6210\u5230 shell\u3002\u4e8b\u5b9e\u4e0a\u8fd9\u4e2a\u529f\u80fd\u770b\u4e0a\u53bb\u5bb9\u6613\uff0c\u5176\u5b9e\u4e5f\u7565\u6709\u590d\u6742\uff0c\u8fd8\u6709\u4e24\u4e2a\u7cfb\u7edf\u8c03\u7528\uff08<code>waitpid</code> \u548c <code>exit</code>\uff09\u6ca1\u6709\u5b9e\u73b0\u3002</p> <p>\u5355\u662f\u89e3\u51b3\u8fd9\u4e24\u4e2a\u95ee\u9898\u53ef\u80fd\u5c31\u8981\u8017\u53bb\u4e00\u534a\u7684\u7bc7\u5e45\u4e86\uff0c\u7559\u7ed9\u6211\u4eec\u7684\u65f6\u95f4\u4e0d\u591a\u4e86\u5440\u3002</p> <p>\u9996\u5148\u6211\u4eec\u6765\u628a\u7cfb\u7edf\u8c03\u7528\u8868\u62c6\u6389\u3002\u5176\u5b9e\u8fd9\u4e2a\u4e1c\u897f\u547d\u4e0d\u8be5\u7edd\uff0c\u62c6\u4e86\u4e5f\u4f1a\u8ba9\u4ee3\u7801\u53d8\u5f97\u5f88\u4e11\uff0c\u4f46\u662f\u4e3a\u4e86\u5e94\u7528\u7a0b\u5e8f\u7684\u6267\u884c\uff0c\u6211\u4eec\u4e5f\u53ea\u597d\u6325\u6cea\u65a9\u9a6c\u8c21\uff0c\u5bf9\u7cfb\u7edf\u8c03\u7528\u8868\u9ad8\u5531 see you again\u3002\u73b0\u5728\u7684 <code>syscall.h</code> \u957f\u8fd9\u6837\uff1a</p> <p>\u4ee3\u7801 23-1 \u60f3\u4f60\u4e86\u7cfb\u7edf\u8c03\u7528\u8868\uff08include/syscall.h\uff09 <pre><code>#ifndef _SYSCALL_H_\n#define _SYSCALL_H_\n\nint sys_getpid();\nint sys_create_process(const char *app_name, const char *cmdline, const char *work_dir);\n\n// file.h\nint sys_open(char *filename, uint32_t flags);\nint sys_write(int fd, const void *msg, int len);\nint sys_read(int fd, void *buf, int count);\nint sys_close(int fd);\nint sys_lseek(int fd, int offset, uint8_t whence);\nint sys_unlink(const char *filename);\n\n#endif\n</code></pre></p> <p>\u6216\u8bb8\u5728\u58f0\u660e\u4e2d\u8fd8\u770b\u4e0d\u51fa\u4ec0\u4e48\uff0c\u4f60\u770b\u4e00\u773c\u5b9e\u73b0\u5c31\u660e\u767d\u4e86\uff1a</p> <p>\u4ee3\u7801 23-2 \u60f3\u4f60\u4e86\u7cfb\u7edf\u8c03\u7528\u8868-\u5b9e\u73b0\u7248\uff08kernel/syscall.c\uff09 <pre><code>void syscall_manager(int edi, int esi, int ebp, int esp, int ebx, int edx, int ecx, int eax)\n{\n    int ds_base = task_now()-&gt;ds_base;\n    int ret = 0;\n    switch (eax) { // \u4ece\u8fd9\u91cc\u5f00\u59cb\n        case 0:\n            ret = sys_getpid();\n            break;\n        case 1:\n            ret = sys_write(ebx, (char *) ecx + ds_base, edx);\n            break;\n        case 2:\n            ret = sys_read(ebx, (char *) ecx + ds_base, edx);\n            break;\n        case 3:\n            ret = sys_create_process((const char *) ebx + ds_base, (const char *) ecx + ds_base, (const char *) edx + ds_base);\n            break;\n    } // \u5230\u8fd9\u91cc\u7ed3\u675f\n    int *save_reg = &amp;eax + 1;\n    save_reg[7] = ret;\n}\n</code></pre></p> <p>\u548c\u539f\u6765\u76f8\u6bd4\u7b80\u76f4\u4e11\u7684\u4e0d\u6b62\u4e00\u70b9\u534a\u70b9\u3002\u4e0d\u8fc7\u5bf9\u4e8e\u7a0b\u5e8f\u6765\u8bf4\u6700\u91cd\u8981\u7684\u8fd8\u662f\u80fd\u4e0d\u80fd\u8dd1\uff0c\u8fd9\u70b9\u7f8e\u5b66\u4e0a\u7684\u727a\u7272\u53ef\u4ee5\u4e0d\u7ba1\u3002</p> <p>\u5728\u63a5\u5165\u5230 shell \u4e4b\u524d\uff0c\u6211\u4eec\u8fd8\u5f97\u5b9e\u73b0\u70b9\u7cfb\u7edf\u8c03\u7528\u3002\u9996\u5148\u662f\u6587\u4ef6\u7cfb\u7edf\u7684\u5168\u5957\uff0c\u5176\u6b21\u662f <code>waitpid</code> \u548c <code>exit</code>\u3002\u8fd8\u597d\uff0c\u8fd9\u4e9b\u4e1c\u897f\u7684\u5e95\u5c42\u5b9e\u73b0\u6211\u4eec\u90fd\u5df2\u7ecf\u6709\u4e86\uff1a</p> <p>\u4ee3\u7801 23-3 \u7cfb\u7edf\u8c03\u7528\u5927\u7206\u70b8\uff08kernel/syscall.c\uff09 <pre><code>void syscall_manager(int edi, int esi, int ebp, int esp, int ebx, int edx, int ecx, int eax)\n{\n    int ds_base = task_now()-&gt;ds_base;\n    int ret = 0;\n    switch (eax) {\n        case 0:\n            ret = sys_getpid();\n            break;\n        case 1:\n            ret = sys_write(ebx, (char *) ecx + ds_base, edx);\n            break;\n        case 2:\n            ret = sys_read(ebx, (char *) ecx + ds_base, edx);\n            break;\n        case 3: // \u4ece\u8fd9\u91cc\u5f00\u59cb\n            ret = sys_open((char *) ebx + ds_base, ecx);\n            break;\n        case 4:\n            ret = sys_close(ebx);\n            break;\n        case 5:\n            ret = sys_lseek(ebx, ecx, edx);\n            break;\n        case 6:\n            ret = sys_unlink((char *) ebx + ds_base);\n            break;\n        case 7:\n            ret = sys_create_process((const char *) ebx + ds_base, (const char *) ecx + ds_base, (const char *) edx + ds_base);\n            break;\n        case 8:\n            ret = task_wait(ebx);\n            break;\n        case 9:\n            task_exit(ebx);\n            break; // \u5230\u8fd9\u91cc\u7ed3\u675f\n    }\n    int *save_reg = &amp;eax + 1;\n    save_reg[7] = ret;\n}\n</code></pre></p> <p>\u4e3a\u4e86\u628a\u6587\u4ef6\u7cfb\u7edf\u76f8\u5173\u653e\u5230\u4e00\u5757\uff0c\u8fd9\u91cc\u628a <code>create_process</code> \u5411\u540e\u63a8\u4e86\u4e00\u6bb5\u8ddd\u79bb\u3002\u8fd9\u4e9b\u7cfb\u7edf\u8c03\u7528\u5bf9\u5e94\u7684\u9ad8\u7ea7\u63a5\u53e3\u5982\u4e0b\uff1a</p> <p>\u4ee3\u7801 23-4 \u7cfb\u7edf\u8c03\u7528\u9ad8\u5c42\u5b9e\u73b0\uff08kernel/syscall_impl.asm\uff09 <pre><code>[global open]\nopen:\n    push ebx\n    mov eax, 3\n    mov ebx, [esp + 8]\n    mov ecx, [esp + 12]\n    int 80h\n    pop ebx\n    ret\n\n[global close]\nclose:\n    push ebx\n    mov eax, 4\n    mov ebx, [esp + 8]\n    int 80h\n    pop ebx\n    ret\n\n[global lseek]\nlseek:\n    push ebx\n    mov eax, 5\n    mov ebx, [esp + 8]\n    mov ecx, [esp + 12]\n    mov edx, [esp + 16]\n    int 80h\n    pop ebx\n    ret\n\n[global unlink]\nunlink:\n    push ebx\n    mov eax, 6\n    mov ebx, [esp + 8]\n    int 80h\n    pop ebx\n    ret\n\n[global create_process]\ncreate_process:\n    push ebx\n    mov eax, 7\n    mov ebx, [esp + 8]\n    mov ecx, [esp + 12]\n    mov edx, [esp + 16]\n    int 80h\n    pop ebx\n    ret\n\n[global waitpid]\nwaitpid:\n    push ebx\n    mov eax, 8\n    mov ebx, [esp + 8]\n    int 80h\n    pop ebx\n    ret\n\n[global exit]\nexit:\n    push ebx\n    mov eax, 9\n    mov ebx, [esp + 8]\n    int 80h\n    pop ebx\n    ret\n</code></pre></p> <p>\u539f\u6765\u7684 <code>create_process</code> \u5c31\u53ef\u4ee5\u5220\u9664\u4e86\u3002</p> <p>\u73b0\u5728\uff0c\u6211\u4eec\u7ec8\u4e8e\u5177\u5907\u4e86\u628a\u5e94\u7528\u7a0b\u5e8f\u6267\u884c\u96c6\u6210\u5230 shell \u5f53\u4e2d\u7684\u6761\u4ef6\uff0c\u662f\u65f6\u5019\u5f00\u641e\u4e86\u3002</p> <p>\u9996\u5148\uff0c\u5728 <code>sys_create_process</code> \u4e2d\uff0c\u6211\u4eec\u5bf9\u5e94\u7528\u7a0b\u5e8f\u662f\u5426\u5b58\u5728\u4e0d\u52a0\u4efb\u4f55\u5224\u65ad\uff0c\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u7684\u8bdd\uff0c\u62d6\u5230 <code>app_entry</code> \u518d\u5904\u7406\u5c31\u665a\u4e86\u3002\u56e0\u6b64\uff0c\u5728\u521b\u5efa\u4efb\u52a1\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u8bd5\u56fe\u6253\u5f00\u6587\u4ef6\u4ee5\u5224\u65ad\u5b83\u662f\u5426\u5b58\u5728\uff1a</p> <p>\u4ee3\u7801 23-5 \u6587\u4ef6\u5b58\u5728\u5417\uff1f\uff08kernel/exec.c\uff09 <pre><code>int sys_create_process(const char *app_name, const char *cmdline, const char *work_dir)\n{\n    int fd = sys_open((char *) app_name, O_RDONLY);\n    if (fd == -1) return -1;\n    sys_close(fd);\n    // \u4e0b\u7565\n}\n</code></pre></p> <p>\u5f53\u6587\u4ef6\u4e0d\u5b58\u5728\u65f6\uff0c<code>sys_create_process</code> \u8fd4\u56de-1\u3002</p> <p>\u7136\u540e\uff0c\u6211\u4eec\u9700\u8981\u5728\u5185\u6838\u4e3b\u7a0b\u5e8f\u4e2d\u89e3\u653e shell\uff0c\u81ea\u4ece\u7b2c16\u8282\u8d77\u5c31\u88ab\u5c01\u5b58\u7684 shell \u7ec8\u4e8e\u6d3e\u4e0a\u7528\u573a\u4e86\uff1a</p> <p>\u4ee3\u7801 23-6 \u5185\u6838\u4e3b\u7a0b\u5e8f\u4e4b\u7ec8\uff08kernel/main.c\uff09 <pre><code>void kernel_main() // kernel.asm\u4f1a\u8df3\u8f6c\u5230\u8fd9\u91cc\n{\n    monitor_clear();\n    init_gdtidt();\n    init_memory();\n    init_timer(100);\n    init_keyboard();\n    asm(\"sti\");\n\n    task_t *task_a = task_init();\n    task_t *task_shell = create_kernel_task(shell);\n    task_run(task_shell);\n\n    task_exit(0);\n}\n</code></pre></p> <p>\u5728\u542f\u52a8\u4e86 shell \u4efb\u52a1\u4ee5\u540e\uff0c\u5185\u6838\u4e3b\u7a0b\u5e8f\u65cb\u5373\u9000\u51fa\uff0c\u5e76\u4f7f\u7528 0 \u7684\u8fd4\u56de\u503c\u62a5\u544a\u6b63\u5e38\u3002\u5185\u6838\u4e3b\u7a0b\u5e8f\u4ee5\u540e\u5927\u6982\u8fd8\u4f1a\u518d\u6539\u6700\u540e\u4e00\u6b21\uff0c\u4e8b\u4e86\u62c2\u8863\u53bb\uff0c\u6df1\u85cf\u8eab\u4e0e\u540d\uff08\u6cea\u76ee\uff09</p> <p>\u5b9e\u73b0\u547d\u4ee4\u6267\u884c\u7684\u51fd\u6570\u4f4d\u4e8e <code>cmd_execute</code>\uff0c\u56e0\u6b64\u9700\u8981\u5728 <code>cmd_execute</code> \u4e2d\u542f\u52a8\u5e94\u7528\u7a0b\u5e8f\u3002\u54ea\u4e9b\u662f\u5e94\u7528\u7a0b\u5e8f\u5462\uff1f\u6211\u4eec\u8ba4\u4e3a\u53ea\u8981\u4e0d\u662f\u5185\u90e8\u547d\u4ee4\u7684\u5c31\u90fd\u662f\u5e94\u7528\u7a0b\u5e8f\uff08\u7b11\uff09\u3002</p> <p>\u4ee3\u7801 23-7 \u5e94\u7528\u7a0b\u5e8f\u6267\u884c\u6846\u67b6\uff08kernel/shell.c\uff09 <pre><code>void cmd_execute(int argc, char **argv)\n{\n    if (!strcmp(\"ver\", argv[0])) {\n        cmd_ver(argc, argv);\n    } else {\n        int exist;\n        int ret = try_to_run_external(argv[0], &amp;exist);\n        if (!exist) {\n            printf(\"shell: `%s` is not recognized as an internal or external command or executable file.\\n\", argv[0]);\n        } else if (ret) {\n            printf(\"shell: app `%s` exited abnormally, retval: %d (0x%x).\\n\", argv[0], ret, ret);\n        }\n    }\n}\n</code></pre></p> <p>\u7531\u4e8e\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u8fd4\u56de\u4efb\u4f55\u8fd4\u56de\u503c\uff0c\u6240\u4ee5\u8fd9\u91cc\u5fc5\u987b\u4f7f\u7528\u4e24\u4e2a\u8fd4\u56de\u503c\uff0c\u56e0\u6b64\u4f7f\u7528\u4f20\u7edf\u7684\u6307\u9488\u53cc\u8fd4\u56de\u503c\u6cd5\uff0c\u4f20\u4e00\u4e2a\u6307\u9488\u8fdb\u53bb\u8868\u793a\u6587\u4ef6\u662f\u5426\u5b58\u5728\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u81ea\u7136\u8981\u62a5\u9519\uff0c\u8fd9\u4e2a\u62a5\u9519\u662f\u4ece Windows cmd \u91cc\u6284\u7684\uff1b\u5426\u5219\uff0c\u5982\u679c\u8fd4\u56de\u503c\u4e0d\u4e3a 0\uff0c\u6211\u4eec\u4e5f\u62a5\u4e00\u4e2a\u9519\uff0c\u8bf4\u660e\u5e94\u7528\u7a0b\u5e8f\u5f02\u5e38\u9000\u51fa\u3002</p> <p>\u63a5\u4e0b\u6765\u7684 <code>try_to_run_external</code> \u81ea\u7136\u5c31\u662f\u5b9e\u73b0\u5e94\u7528\u7a0b\u5e8f\u6267\u884c\u7684\u6838\u5fc3\u903b\u8f91\u4e86\uff1a</p> <p>\u4ee3\u7801 23-8 \u5e94\u7528\u7a0b\u5e8f\u6267\u884c\uff08kernel/shell.c\uff09 <pre><code>int try_to_run_external(char *name, int *exist)\n{\n    int ret = create_process(name, cmd_line, \"/\"); // \u5c1d\u8bd5\u6267\u884c\u5e94\u7528\u7a0b\u5e8f\n    *exist = false; // \u6587\u4ef6\u4e0d\u5b58\u5728\n    if (ret == -1) { // \u54c7\u771f\u7684\u4e0d\u5b58\u5728\n        char new_name[MAX_CMD_LEN] = {0}; // \u7531\u4e8e\u8fd8\u6ca1\u6709\u5b9e\u73b0malloc\uff0c\u6240\u4ee5\u53ea\u80fd\u8fd9\u4e48\u641e\uff0c\u53cd\u6b63\u6587\u4ef6\u6700\u957f\u5c31\u662fMAX_CMD_LEN\u8fd9\u4e48\u957f\n        strcpy(new_name, name); // \u590d\u5236\u6587\u4ef6\u540d\n        int len = strlen(name); // \u6587\u4ef6\u540d\u7ed3\u675f\u4f4d\u7f6e\n        new_name[len] = '.'; // \u7ed9\u540e\n        new_name[len + 1] = 'b'; // \u7f00\u52a0\n        new_name[len + 2] = 'i'; // \u4e0a\u4e2a\n        new_name[len + 3] = 'n'; // .bin\n        new_name[len + 4] = '\\0'; // \u7ed3\u675f\u7b26\n        ret = create_process(new_name, cmd_line, \"/\"); // \u7b2c\u4e8c\u6b21\u5c1d\u8bd5\u6267\u884c\u5e94\u7528\u7a0b\u5e8f\n        if (ret == -1) return -1; // \u6587\u4ef6\u8fd8\u662f\u4e0d\u5b58\u5728\uff0c\u90a3\u53ea\u80fd\u4e0d\u5b58\u5728\u4e86\n    }\n    *exist = true; // \u9519\u602a\u4f60\u4e86\uff0c\u6587\u4ef6\u5b58\u5728\n    ret = waitpid(ret); // \u7b49\u5f85\u76f4\u5230\u8fd9\u4e2apid\u7684\u8fdb\u7a0b\u8fd4\u56de\u5e76\u62ff\u5230\u7ed3\u679c\n    return ret; // \u628a\u8fd4\u56de\u503c\u8fd4\u56de\u56de\u53bb\n}\n</code></pre></p> <p>\u6574\u4f53\u903b\u8f91\u5e94\u8be5\u633a\u597d\u7406\u89e3\u7684\u3002\u8fd9\u91cc\u4f7f\u7528\u4e86\u4e00\u4e9b\u65b0\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u6211\u4eec\u65b0\u5efa\u4e00\u4e2a <code>unistd.h</code> \u5b58\u653e\u7cfb\u7edf\u8c03\u7528\u58f0\u660e\uff1a</p> <p>\u4ee3\u7801 23-9 TutorialOS \u7cfb\u7edf\u8c03\u7528\u5217\u8868\uff08include/unistd.h\uff09 <pre><code>#ifndef _UNISTD_H_\n#define _UNISTD_H_\n\nint open(char *filename, uint32_t flags);\nint write(int fd, const void *msg, int len);\nint read(int fd, void *buf, int count);\nint close(int fd);\nint lseek(int fd, int offset, uint8_t whence);\nint unlink(const char *filename);\nint waitpid(int pid);\nint exit(int ret);\n\nint create_process(const char *app_name, const char *cmdline, const char *work_dir);\n\n#endif\n</code></pre></p> <p>\u5728 <code>shell.h</code> \u4e2d\u5305\u542b <code>unistd.h</code> \u5373\u53ef\u3002</p> <p>\u6700\u540e\u5c31\u662f\u5e94\u7528\u7a0b\u5e8f\u8fd9\u8fb9\uff0c\u8981\u4f7f\u7528\u65b0\u7684 <code>exit</code> \u7cfb\u7edf\u8c03\u7528\u9000\u51fa\uff1a</p> <p>\u4ee3\u7801 23-10 \u5e94\u7528\u7a0b\u5e8f\uff08test_app.asm\uff09 <pre><code>    bits 32\n\n    mov eax, 1\n    mov ebx, 1\n    mov ecx, string\n    mov edx, strlen\n    int 80h\n\n    mov eax, 9\n    mov ebx, 114514\n    int 80h\n\n    jmp $\n\nstring: db \"Hello, World!\", 0x0A, 0x00\nstrlen equ $ - string\n</code></pre></p> <p>\u4e4b\u6240\u4ee5\u52a0\u4e0a <code>bits 32</code>\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u6d4b\u8bd5\u7528\u7684\u8fd4\u56de\u503c\uff08114514\uff09\u8d85\u8fc716\u4f4d\u6700\u5927\u503c\uff0865536\uff09\uff0c\u6240\u4ee5\u6807\u8bb0\u4e00\u4e0b\u4f7f\u7528 32 \u4f4d\u5bc4\u5b58\u5668\uff0c\u628a\u6570\u5b57\u4e5f\u770b\u6210 32 \u4f4d\u7684\u3002</p> <p>\u7f16\u8bd1\u8fd0\u884c\uff0c\u5e76\u628a <code>test_app.bin</code> \u5199\u5165\u786c\u76d8\uff0c\u6548\u679c\u5982\u4e0b\uff1a</p> <p></p> <p>\uff08\u56fe 23-1 \u5728shell\u4e2d\u6267\u884c\u5e94\u7528\u7a0b\u5e8f\uff09</p> <p>\u53ef\u4ee5\u770b\u5230\uff0c<code>loader.bin</code> \u7684\u6267\u884c\u867d\u7136\u88ab\u62e6\u4e0b\uff0c\u4f46\u662f\u7a0b\u5e8f\u5374\u5728\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u4e2d\u5361\u6b7b\u4e86\uff0c\u6ca1\u6709\u628a\u63a7\u5236\u6743\u4ea4\u56de\u5230 shell\u3002\u5982\u4eca\u5df2\u7ecf\u6709\u4e86\u591a\u4efb\u52a1\uff0c\u6211\u4eec\u53ea\u9700\u5728 <code>isr.c</code> \u4e2d\u7ed3\u675f\u5f53\u524d\u4efb\u52a1\u5373\u53ef\uff1a</p> <p>\u4ee3\u7801 23-11 \u53d1\u751f\u5f02\u5e38\u65f6\u5f3a\u5236\u7ed3\u675f\u5e94\u7528\u7a0b\u5e8f\uff08kernel/isr.c\uff09 <pre><code>#include \"mtask.h\"\n\n// \u4e2d\u7565\n\nvoid isr_handler(registers_t regs)\n{\n    asm(\"cli\");\n    monitor_write(\"received interrupt: \");\n    monitor_write_dec(regs.int_no);\n    monitor_put('\\n');\n    task_exit(-1); // \u5f3a\u5236\u9000\u51fa\n}\n</code></pre></p> <p>\u7531\u4e8e\u5728\u4efb\u52a1\u7ed3\u675f\u540e\u4f1a\u5f3a\u5236\u5207\u6362\u56de shell\uff0c\u4ece\u800c\u91cd\u65b0\u5f00\u542f\u4e2d\u65ad\uff0c\u6240\u4ee5\u6700\u4e0a\u9762\u7684 <code>asm(\"cli\")</code> \u4e0d\u7528\u5904\u7406\u3002</p> <p>\u73b0\u5728\u518d\u8bd5\u56fe\u8fd0\u884c <code>loader.bin</code>\uff0c\u5e94\u8be5\u5c31\u4f1a\u628a\u63a7\u5236\u6743\u4ea4\u8fd8\u7ed9\u5185\u6838\u4e86\uff1a</p> <p></p> <p>\uff08\u56fe 23-2 \u6267\u884c\u4e2d\u51fa\u73b0\u5f02\u5e38\u65f6\u5f3a\u5236\u7ed3\u675f\u5e94\u7528\u7a0b\u5e8f\uff09</p> <p>\u81f3\u6b64\uff0c\u6211\u4eec\u7ec8\u4e8e\u89e3\u51b3\u5b8c\u4e86\u4e0a\u4e00\u8282\u7559\u4e0b\u7684\u70c2\u644a\u5b50\u3002<code>kernel.bin</code> \u6ca1\u88ab\u62e6\u4e0b\u662f\u56e0\u4e3a\u5b83\u662f\u6709\u683c\u5f0f\u7684\uff0c\u8fd8\u6ca1\u6765\u5f97\u53ca\u6267\u884c\u5230\u6307\u4ee4\u5c31\u5df2\u7ecf\u4e0d\u77e5\u9053\u5728\u6267\u884c\u4ec0\u4e48\u4e1c\u897f\u4e86\uff0c\u4ece\u800c\u5bfc\u81f4\u4e86\u5b83\u7684\u5361\u6b7b\u3002\u6b63\u597d\u6211\u4eec\u672c\u8282\u7684\u4efb\u52a1\u2014\u2014C\u8bed\u8a00\u5e94\u7528\u7a0b\u5e8f\u8fd8\u6ca1\u5f00\u59cb\uff0c\u5c31\u987a\u5176\u81ea\u7136\uff0c\u89e3\u6790 <code>kernel.bin</code> \u7684\u6587\u4ef6\u683c\u5f0f\u2014\u2014ELF\u3002\u91cd\u56de\u7b2c 6 \u8282\u65e2\u89c6\u611f\uff08</p> <p>\u91cd\u63d0\u4e00\u4e0b ELF \u6587\u4ef6\u7684\u7ed3\u6784\uff1a</p> <p></p> <p>\uff08\u56fe 23-3 <code>ELF</code> \u6587\u4ef6\u7ed3\u6784\uff09</p> <p>\u4ee3\u7801 23-12 <code>Program Header</code>\uff08include/elf.h\uff09 <pre><code>typedef struct {\n    Elf32_Word p_type;   // \u5f53\u524dheader\u63cf\u8ff0\u7684\u6bb5\u7c7b\u578b\n    Elf32_Off  p_offset; // \u6bb5\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u5728\u6587\u4ef6\u4e2d\u7684\u504f\u79fb\n    Elf32_Addr p_vaddr;  // \u6bb5\u5728\u5185\u5b58\u4e2d\u7684\u865a\u62df\u5730\u5740\n    Elf32_Addr p_paddr;  // \u6bb5\u5728\u5185\u5b58\u4e2d\u7684\u7269\u7406\u5730\u5740\uff0c\u4e3a\u517c\u5bb9\u4e0d\u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f\u7684OS\n    Elf32_Word p_filesz; // \u6bb5\u5728\u6587\u4ef6\u4e2d\u7684\u957f\u5ea6\n    Elf32_Word p_memsz;  // \u6bb5\u5728\u5185\u5b58\u4e2d\u7684\u957f\u5ea6\n    Elf32_Word p_flags;  // \u4e0e\u6bb5\u76f8\u5173\u7684\u6807\u5fd7\n    Elf32_Word p_align;  // \u786e\u5b9a\u6bb5\u5728\u6587\u4ef6\u548c\u5185\u5b58\u4e2d\u5982\u4f55\u5bf9\u9f50\n} Elf32_Phdr;\n</code></pre></p> <p>\u4ee3\u7801 23-13 ELF \u5934\uff08include/elf.h\uff09 <pre><code>#define EI_NIDENT 16\n\ntypedef struct {\n    unsigned char e_ident[EI_NIDENT]; // ELF\u7279\u5f81\u6807\n\n    Elf32_Half e_type;      // \u6587\u4ef6\u7c7b\u578b\n    Elf32_Half e_machine;   // \u8fd0\u884c\u81f3\u5c11\u9700\u8981\u7684\u4f53\u7cfb\u7ed3\u6784\n    Elf32_Word e_version;   // \u6587\u4ef6\u7248\u672c\n    Elf32_Addr e_entry;     // \u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\n    Elf32_Off  e_phoff;     // Program Header \u8868\u7684\u504f\u79fb\n    Elf32_Off  e_shoff;     // Section Header \u8868\u7684\u504f\u79fb\n    Elf32_Word e_flags;     // \u5bf9\u4e8e32\u4f4d\u7cfb\u7edf\u4e3a0\n    Elf32_Half e_ehsize;    // ELF Header \u7684\u5927\u5c0f\uff0c\u5355\u4f4d\u5b57\u8282\n    Elf32_Half e_phentsize; // Program Header \u7684\u5927\u5c0f\n    Elf32_Half e_phnum;     // Program Header \u7684\u6570\u91cf\n    Elf32_Half e_shentsize; // Section Header \u7684\u5927\u5c0f\n    Elf32_Half e_shnum;     // Section Header \u7684\u6570\u91cf\n    Elf32_Half e_shstrndx;  // \u5305\u542b Section \u540d\u79f0\u7684\u5b57\u7b26\u4e32\u8868\u4f4d\u4e8e\u54ea\u4e00\u9879\n} Elf32_Ehdr;\n</code></pre></p> <p>\u5176\u4e2d\u6570\u636e\u7c7b\u578b Elf32_Word\u3001Elf32_Off \u548c Elf32_Addr \u5747\u4e3a\u5927\u5c0f\u4e3a 4\u3001\u5bf9\u9f50\u4e5f\u4e3a 4 \u7684\u65e0\u7b26\u53f7\u7c7b\u578b\uff0c\u800c Word \u4e3a\u5927\u6574\u6570\uff0cOff \u4e3a\u504f\u79fb\uff0cAddr \u4e3a\u5730\u5740\u3002Half \u5219\u987e\u540d\u601d\u4e49\uff0c\u662f\u524d\u9762\u8fd9\u4e9b\u7c7b\u578b\u7684\u4e00\u534a\uff0c\u4e5f\u5c31\u662f 2 \u4e2a\u5b57\u8282\u8fd9\u4e48\u5927\u3002\u56e0\u6b64\uff0c\u5728\u6587\u4ef6\u5f00\u5934\u6dfb\u52a0\u8fd9\u6837\u7684\u7c7b\u578b\u5b9a\u4e49\uff1a</p> <p>\u4ee3\u7801 23-14 \u7c7b\u578b\u5b9a\u4e49\uff08include/elf.h\uff09 <pre><code>#ifndef _ELF_H_\n#define _ELF_H_\n\n#include \"common.h\"\n\n#define PT_LOAD 1\n\n#define EI_NIDENT 16\n\ntypedef uint32_t Elf32_Word, Elf32_Off, Elf32_Addr;\ntypedef uint16_t Elf32_Half;\n\n// ...\n\n#endif\n</code></pre></p> <p>\u4e0e\u7a0b\u5e8f\u6267\u884c\u76f4\u63a5\u76f8\u5173\u7684\u53ea\u6709 <code>Program Header</code>\uff0c\u5229\u7528\u5b83\u4eec\u5934\u4e2d\u7ed9\u5b9a\u7684\u5730\u5740\u628a\u5206\u5272\u6210\u51e0\u4e2a\u90e8\u5206\u7684\u7a0b\u5e8f\u4f9d\u6b21\u6392\u5217\u5728\u5185\u5b58\u4e2d\uff0cELF \u89e3\u6790\u5de5\u4f5c\u5c31\u5b8c\u6210\u4e86\uff0c\u63a5\u4e0b\u6765\u4ece ELF \u5934\u7ed9\u5b9a\u7684\u5165\u53e3\u70b9\u5f00\u59cb\u6267\u884c\u5373\u53ef\u3002</p> <p>\uff08\u4e25\u683c\u6765\u8bb2\u5176\u5b9e\u8981\u505a\u7684\u8fdc\u6bd4\u8fd9\u4e2a\u8981\u591a\uff0c\u4ec0\u4e48\u52a8\u6001\u94fe\u63a5\u3001\u8c03\u8bd5\u7b26\u53f7\u4e4b\u7c7b\u7684\u90fd\u8981\u89e3\u6790 Section Header\uff0c\u4f46\u662f\u6211\u4eec\u53ea\u505a\u6700\u57fa\u672c\u7684\u6267\u884c\u7684\u8bdd\u5c31\u4e0d\u5f3a\u6c42\u4e86\uff09</p> <p>\u90a3\u4e48\uff0c\u6211\u4eec\u5c31\u6765\u5feb\u901f\u5730\u89e3\u6790\u4e00\u4e0b ELF \u6587\u4ef6\u3002\u9996\u5148\u65b0\u5efa\u4e00\u4e2a <code>kernel/elf.c</code>\uff1a</p> <p>\u4ee3\u7801 23-15 \u51c6\u5907\u5f00\u59cb\u89e3\u6790 ELF\uff08kernel/elf.c\uff09 <pre><code>#include \"elf.h\"\n\n#define min(a, b) ((a) &lt; (b) ? (a) : (b))\n#define max(a, b) ((a) &lt; (b) ? (b) : (a))\n</code></pre></p> <p>\u8fd9\u91cc\u5b9a\u4e49\u4e86\u4e24\u4e2a\u4e00\u770b\u5c31\u61c2\u7684\u5b8f <code>max</code> \u548c <code>min</code>\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u4e0d\u7528\u89e3\u91ca\u3002</p> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u5f00\u59cb\u51c6\u5907\u52a0\u8f7d ELF \u4e86\u3002\u51fa\u4e8e\u7b80\u5355\u7684\u9700\u8981\uff0c\u6211\u4eec\u628a\u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u5b9a\u5728 0x00 \u5904\uff1b\u7531\u4e8e\u8fd9\u4e2a\u8981\u6c42\u5b8c\u5168\u505a\u4e0d\u5230\uff0c\u94fe\u63a5\u5668\u5c31\u4f1a\u81ea\u5df1\u628a\u6574\u4e2a\u4ee3\u7801\u6bb5\u7684\u5f00\u59cb\u4f4d\u7f6e\u5b9a\u5728\u8fd9\u91cc\uff0c\u7136\u540e\u628a\u5165\u53e3\u70b9\u7565\u5fae\u5f80\u540e\u63a8\u4e00\u70b9\u70b9\u3002\u65e2\u7136\u8fd9\u6837\uff0c\u9274\u4e8e\u8fd9\u4e2a\u7a0b\u5e8f\u5982\u679c\u76f4\u63a5\u52a0\u8f7d\u5230\u5185\u5b58\uff0c\u5c06\u4f4d\u4e8e 1MB \u4ee5\u5185\uff0c\u800c\u8fd9\u4e00\u5757\u5185\u5b58\u6211\u4eec\u6839\u672c\u5c31\u4e0d\u60f3\u7ba1\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u53e6\u884c\u5206\u914d\u4e00\u4e2a\u7f13\u51b2\u533a\u4f5c\u4e3a ELF \u89e3\u6790\u540e\u7684\u5b58\u653e\u5730\u3002</p> <p>\u90a3\u4e48\uff0c\u77e5\u9053\u8fd9\u4e2a ELF \u5728\u88ab\u89e3\u6790\u540e\u4e00\u5171\u591a\u5927\u5c31\u5c24\u4e3a\u91cd\u8981\u4e86\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u5728\u88ab\u89e3\u6790\u4e4b\u524d\u8fdb\u884c\uff0c\u53ea\u9700\u8981\u904d\u5386\u6bcf\u4e00\u4e2a Program Header\uff0c\u540c\u65f6\u66f4\u65b0\u52a0\u8f7d\u9996\u5730\u5740\u6700\u5c0f\u503c\u4e0e\u672b\u5730\u5740\u6700\u5927\u503c\uff0c\u6700\u540e\u51cf\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\uff1a</p> <p>\u4ee3\u7801 23-16 \u83b7\u53d6 ELF \u88ab\u52a0\u8f7d\u540e\u7684\u8303\u56f4\uff08kernel/elf.c\uff09 <pre><code>static void calc_load_range(Elf32_Ehdr *ehdr, uint32_t *first, uint32_t *last)\n{\n    Elf32_Phdr *phdr = (Elf32_Phdr *) ((uint32_t) ehdr + ehdr-&gt;e_phoff); // \u7b2c\u4e00\u4e2a program header \u5730\u5740\n    *first = 0xffffffff; // UINT32\u6700\u5927\u503c\n    *last = 0; // UINT32\u6700\u5c0f\u503c\n\n    for (uint16_t i = 0; i &lt; ehdr-&gt;e_phnum; i++) { // \u904d\u5386\u6bcf\u4e00\u4e2a program header\n        if (phdr[i].p_type != PT_LOAD) continue; // \u53ea\u5173\u5fc3LOAD\u6bb5\n        *first = min(*first, phdr[i].p_vaddr);\n        *last = max(*last, phdr[i].p_vaddr + phdr[i].p_memsz); // \u6bcf\u4e00\u4e2aprogram header\u9996\u5c3e\u53d6\u6700\u503c\n    }\n}\n</code></pre></p> <p>\u5728 ELF \u5934\u4e2d\u653e\u7740\u7684 <code>e_phoff</code> \u4ee3\u8868\u7b2c\u4e00\u4e2a Program Header \u7684\u76f8\u5bf9 ELF \u5934\u7684\u504f\u79fb\uff0c\u52a0\u4e0a ELF \u5934\u7684\u5730\u5740\uff0c\u5c31\u5f97\u5230\u4e86\u7b2c\u4e00\u4e2a Program Header \u7684\u5730\u5740\u3002\u7531\u524d\u9762\u7684\u7ed3\u6784\u56fe\u53ef\u4ee5\u77e5\u9053\uff0c\u6240\u6709\u7684 Program Header \u662f\u8fde\u7eed\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u88ab\u89c6\u4e3a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5176\u957f\u5ea6\u5219\u7531 ELF \u5934\u7684 <code>e_phnum</code> \u5b9a\u4e49\u3002\u5728\u8fd9\u4e48\u591a Program Header \u4e2d\uff0c\u53ea\u6709\u7c7b\u578b\u4e3a <code>PT_LOAD</code>\uff08\u5176\u503c\u4e3a 1\uff0c\u5728 include/elf.h \u4e2d\u5b9a\u4e49\uff09\u624d\u53ef\u4ee5\u52a0\u8f7d\uff0c\u56e0\u6b64\u6211\u4eec\u4e5f\u5c31\u53ea\u7ba1\u8fd9\u4e9b\u3002\u8fd9\u91cc\u8fd8\u662f\u4f7f\u7528\u7ecf\u5178\u7684\u6307\u9488\u6cd5\u8fdb\u884c\u591a\u503c\u8fd4\u56de\u3002</p> <p>\u5728\u83b7\u53d6\u8303\u56f4\u4ee5\u540e\u5c31\u53ef\u4ee5\u5206\u914d\u7f13\u51b2\u533a\u4e86\u3002\u5047\u8bbe\u73b0\u5728\u5df2\u7ecf\u5206\u914d\u597d\u4e86\u7f13\u51b2\u533a\uff0c\u6211\u4eec\u8981\u628a\u6bcf\u4e2a Program Header \u6240\u5bf9\u5e94\u7684\u7a0b\u5e8f\u590d\u5236\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\u53bb\uff0c\u8fd9\u5c31\u9700\u8981\u77e5\u9053\u5b83\u4eec\u7684\u5927\u5c0f\u548c \u65b9\u5411 \u4f4d\u7f6e\u3002\u4f4d\u7f6e\u6bd4\u8f83\u5bb9\u6613\uff0cProgram Header \u7684 <code>p_offset</code> \u5b58\u7684\u5c31\u662f\u76f8\u5bf9 ELF \u5934\u7684\u4f4d\u7f6e\uff1b\u5927\u5c0f\u5374\u6709 <code>p_memsz</code> \u548c <code>p_filesz</code> \u4e24\u4e2a\u503c\uff0c\u91c7\u4fe1\u54ea\u4e2a\u5462\uff1f\u7531\u4e8e\u6211\u4eec\u662f\u8981\u4ece\u6587\u4ef6\u91cc\u52a0\u8f7d\uff0c\u6240\u4ee5\u91c7\u7528 <code>p_filesz</code> \u7684\u503c\uff0c\u81f3\u4e8e\u53ef\u80fd\u591a\u51fa\u6765\u7684\u90e8\u5206\uff0c\u90a3\u5c31\u53ea\u80fd\u586b 0 \u4e86\u3002</p> <p>\u4ee3\u7801 23-17 \u590d\u5236 ELF \u7684\u5404\u4e2a Program Header\uff08kernel/elf.c\uff09 <pre><code>static void copy_load_segments(Elf32_Ehdr *ehdr, char *buf)\n{\n    Elf32_Phdr *phdr = (Elf32_Phdr *) ((uint32_t) ehdr + ehdr-&gt;e_phoff); // \u7b2c\u4e00\u4e2a program header \u5730\u5740\n    for (uint16_t i = 0; i &lt; ehdr-&gt;e_phnum; i++) { // \u904d\u5386\u6bcf\u4e00\u4e2a program header\n        if (phdr[i].p_type != PT_LOAD) continue; // \u53ea\u5173\u5fc3LOAD\u6bb5\n\n        uint32_t segm_in_file = (uint32_t) ehdr + phdr[i].p_offset; // \u6bb5\u5728\u6587\u4ef6\u4e2d\u7684\u4f4d\u7f6e\n        memcpy(buf + phdr[i].p_vaddr, (void *) segm_in_file, phdr[i].p_filesz); // \u5c06\u6587\u4ef6\u4e2d\u5927\u5c0f\u7684\u90e8\u5206copy\u8fc7\u53bb\n        uint32_t remain_bytes = phdr[i].p_memsz - phdr[i].p_filesz; // \u4e24\u8005\u4e4b\u5dee\n        memset(buf + (phdr[i].p_vaddr + phdr[i].p_filesz), 0, remain_bytes); // \u8d4b\u503c\u4e3a0\n    }\n}\n</code></pre></p> <p>\u6700\u540e\u4fbf\u662f\u878d\u5408\u5230\u4e00\u8d77\u53bb\u7684\u6574\u4f53\u5305\u88c5\uff0c\u5b83\u4f1a\u9996\u5148\u68c0\u6d4b ELF \u683c\u5f0f\u662f\u5426\u6b63\u786e\uff0c\u5982\u679c\u9519\u8bef\u4f1a\u8fd4\u56de -1\uff0c\u5426\u5219\u8fd4\u56de ELF \u7684\u5165\u53e3\u70b9\uff0c\u4e5f\u5c31\u662f\u5f00\u59cb\u6267\u884c\u7684\u4f4d\u7f6e\uff1a</p> <p>\u4ee3\u7801 23-18 \u52a0\u8f7d ELF\uff08kernel/elf.c\uff09 <pre><code>int load_elf(Elf32_Ehdr *ehdr, char **buf, uint32_t *first, uint32_t *last)\n{\n    if (memcmp(ehdr-&gt;e_ident, \"\\177ELF\\1\\1\\1\", 7)) return -1; // \u9b54\u6570\u4e0d\u5bf9\uff0c\u4e0d\u4e88\u6267\u884c\n    calc_load_range(ehdr, first, last); // \u8ba1\u7b97\u52a0\u8f7d\u4f4d\u79fb\n    *buf = (char *) kmalloc(*last - *first + 5); // \u7528\u7b97\u5f97\u7684\u5927\u5c0f\u5206\u914d\u5185\u5b58\n    copy_load_segments(ehdr, *buf); // \u628a ELF \n    return ehdr-&gt;e_entry;\n}\n</code></pre></p> <p>ELF \u5934\u7684\u4f5c\u7528\u4e0d\u5fc5\u591a\u8bf4\uff0c\u8fd9\u91cc\u4e4b\u6240\u4ee5\u7528\u4e24\u91cd\u6307\u9488\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u8981\u4fee\u6539\u5355\u91cd\u6307\u9488 <code>buf</code> \u7684\u503c\u3002\u5728\u5b9e\u9645\u4f7f\u7528\u65f6\u53ea\u8981\u4f20\u4e00\u4e2a\u6307\u9488\u8fdb\u6765\u5c31\u884c\u4e86\uff0c\u4e0d\u7ba1\u8fd9\u4e2a\u6307\u9488\u957f\u4ec0\u4e48\u6837\u5b50\u3002</p> <p>\u8fd9\u6837\u4e00\u6765\uff0c\u5728 buf \u4e2d\u5b58\u7740\u7684\u5c31\u662f\u4e8c\u8fdb\u5236\u4e00\u6837\u7684\u673a\u5668\u7801\u4e86\uff0c\u7406\u8bba\u4e0a\u53ef\u4ee5\u76f4\u63a5\u542f\u52a8\u3002\u4e8b\u5b9e\u4e0a\u4e5f\u7684\u786e\u5982\u6b64\uff0c\u5728 exec.c \u4e2d\u53ea\u9700\u4fee\u6539\u51e0\u884c\u4ee3\u7801\uff0c\u5c31\u53ef\u4ee5\u8ba9\u4e00\u4e2a ELF \u8dd1\u8d77\u6765\u4e86\uff1a</p> <p>\u4ee3\u7801 23-19 \u542f\u52a8 ELF\uff08kernel/exec.c\uff09 <pre><code>void app_entry(const char *app_name, const char *cmdline, const char *work_dir)\n{\n    // ...\u4e0a\u7565...\n    char *code; // \u5b58\u653e\u4ee3\u7801\u7684\u7f13\u51b2\u533a\n    int entry = load_elf((Elf32_Ehdr *) buf, &amp;code, &amp;first, &amp;last); // buf\u662f\u6587\u4ef6\u8bfb\u8fdb\u6765\u7684\u90a3\u4e2a\u7f13\u51b2\u533a\uff0ccode\u662f\u5b58\u5b9e\u9645\u4ee3\u7801\u7684\n    if (entry == -1) task_exit(-1); // \u89e3\u6790\u5931\u8d25\uff0c\u76f4\u63a5exit(-1)\n    // \u6ce8\u610f\uff1a\u4ee5\u4e0b\u4ee3\u7801\u975e\u5e38\u4e0d\u5b89\u5168\uff0c\u4ec5\u4f9b\u53c2\u8003\uff1b\u4e0d\u8fc7\u76ee\u524d\u6211\u4e5f\u6ca1\u6709\u627e\u5230\u66f4\u4f18\u7684\u89e3\n    // \u5751\u6bd4 intel \u5728\u8bbf\u95ee [esp + xxx] \u7684\u5730\u5740\u65f6\u7528\u7684\u662f ds\uff0css \u5b8c\u5168\u6210\u4e86\u6446\u8bbe\uff0c\u6240\u4ee5\u6808\u548c\u6570\u636e\u5fc5\u987b\u653e\u5728\u4e00\u4e2a\u6bb5\u91cc\uff0c\u4e8e\u662f\u5c31\u70b8\u4e86\n    char *ds = (char *) kmalloc(last - first + 4 * 1024 * 1024 + 5); // \u65b0\u5206\u914d\u4e00\u4e2a\u6570\u636e\u6bb5\uff0c\u4e3a\u539f\u6765\u5927\u5c0f+4MB+5\n    memcpy(ds, code, last - first); // \u628a\u4ee3\u7801\u590d\u5236\u8fc7\u6765\uff0c\u4e5f\u5c31\u5305\u542b\u4e86\u5fc5\u987b\u8981\u7528\u7684\u6570\u636e\n    task_now()-&gt;ds_base = (int) ds; // \u6570\u636e\u6bb5\u57fa\u5740\uff0c\u4e0e\u4e0b\u9762\u4e00\u81f4\n    ldt_set_gate(0, (int) code, last - first - 1, 0x409a | 0x60);\n    ldt_set_gate(1, (int) ds, last - first + 4 * 1024 * 1024 - 1, 0x4092 | 0x60); // \u5927\u5c0f\u4e5f\u591a\u4e864MB\n    start_app(entry, 0 * 8 + 4, last - first + 4 * 1024 * 1024 - 4, 1 * 8 + 4, &amp;(task_now()-&gt;tss.esp0)); // \u628a\u6808\u9876\u8bbe\u4e3a4MB-4\n    while (1);\n}\n</code></pre></p> <p>\u5751\u6bd4 intel \u5728\u8bbf\u95ee [esp + xxx] \u7684\u5730\u5740\u65f6\u7528\u7684\u662f ds\uff0css \u5b8c\u5168\u6210\u4e86\u6446\u8bbe\uff0c\u6240\u4ee5\u6808\u548c\u6570\u636e\u5fc5\u987b\u653e\u5728\u4e00\u4e2a\u6bb5\u91cc\uff0c\u4e8e\u662f\u5c31\u70b8\u4e86\uff08\u91cd\u590d\u4e00\u904d\uff09\u3002\u5f53\u6808\u65e0\u9650\u5236\u6269\u5f20\u65f6\u4f1a\u76f4\u63a5\u4fb5\u5360\u6570\u636e\u751a\u81f3\u662f\u4ee3\u7801\uff0c\u4ece\u800c\u9020\u6210\u5b89\u5168\u9690\u60a3\u3002\u6211\u76ee\u524d\u6ca1\u6709\u4ec0\u4e48\u89e3\u51b3\u7684\u529e\u6cd5\uff0c\u4f46\u662f\u7406\u8bba\u4e0a\u53ef\u4ee5\u68c0\u6d4b\u5230\u8fd9\u6837\u7684\u9519\u8bef\u751a\u81f3\u653b\u51fb\u3002</p> <p>\u73b0\u5728\u5df2\u7ecf\u53ef\u4ee5\u6267\u884c ELF \u4e86\uff0c\u6211\u4eec\u5c31\u5199\u4e00\u4e2a C \u5e94\u7528\u4f5c\u4e3a\u6d4b\u8bd5\u5427\u3002\u65b0\u5efa apps \u6587\u4ef6\u5939\uff0c\u6211\u4eec\u5c31\u5199\u4e00\u4e2a\u6700\u7b80\u5355\u7684 Hello World\uff1a</p> <p>\u4ee3\u7801 23-20 Hello, ELF World!\uff08apps/test_c.c\uff09 <pre><code>#include &lt;stdio.h&gt;\n\nint main()\n{\n    printf(\"Hello, World!\");\n    return 0;\n}\n</code></pre></p> <p>\u4e0d\u77e5\u9053\u770b\u89c1\u8fd9\u6837\u7684\u7a0b\u5e8f\u52fe\u8d77\u4e86\u4f60\u4ec0\u4e48\u56de\u5fc6\u5462\uff0c\u603b\u4e4b\u6211\u662f\u6709\u79cd\u56de\u5230\u4e86\u521a\u5b66 C \u8bed\u8a00\u65f6\u7684\u611f\u89c9\u2026\u2026\u4e0d\u717d\u60c5\u4e86\uff0c\u73b0\u5728\u4ed4\u7ec6\u56de\u987e\u4e00\u4e0b\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u6709\u4ec0\u4e48\u95ee\u9898\u5417\uff1f</p> <p>\u770b\u4f3c\u5b8c\u7f8e\u65e0\u7f3a\uff0c\u5b9e\u9645\u4e0a\u95ee\u9898\u975e\u5e38\u4e25\u91cd\u3002\u6216\u8bb8\u4f60\u66fe\u5bf9 <code>main</code> \u51fd\u6570\u7684\u8fd4\u56de\u503c\u8c01\u6765\u63a5\u6536\u6709\u7591\u95ee\uff0c\u5f53\u65f6\u7684\u56de\u7b54\u662f\u64cd\u4f5c\u7cfb\u7edf\u3002\u73b0\u5728\u6211\u4eec\u5c31\u662f\u64cd\u4f5c\u7cfb\u7edf\uff0c\u90a3\u8fd9\u4e2a <code>main</code> \u7684\u8fd4\u56de\u503c\uff0c\u662f\u4e0d\u662f\u4e5f\u5f97\u63a5\u6536\u4e00\u4e0b\uff1f</p> <p>\u51b5\u4e14\u5728\u7b2c\u4e94\u8282\u4e2d\u63d0\u8fc7\uff0cELF \u7a0b\u5e8f\u7684\u771f\u6b63\u5165\u53e3\u5e76\u4e0d\u662f <code>main</code>\uff0c\u800c\u662f <code>_start</code>\uff0c<code>main</code> \u53ea\u662f\u4e00\u4e2a\u666e\u901a\u7684\u51fd\u6570\u800c\u5df2\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a <code>_start</code>\u3002</p> <p>\u8fd9\u4e2a <code>_start</code> \u8fd8\u662f\u76f8\u5f53\u597d\u5199\u7684\uff0c\u8ba9\u5e94\u7528\u7a0b\u5e8f\u63a5\u6536\u53c2\u6570\u662f\u4e0b\u4e00\u8282\u7684\u8bdd\u9898\uff0c\u4e0d\u8003\u8651\u53c2\u6570\u7684\u8bdd\uff0c\u53ea\u9700\u8981\u8c03\u7528 <code>main</code>\uff0c\u7136\u540e\u7528 <code>exit</code> \u7ed3\u675f\u5e94\u7528\u7a0b\u5e8f\u5373\u53ef\uff1a</p> <p>\u4ee3\u7801 23-21 \u7b80\u5355\u7684\u5165\u53e3\u70b9\uff08apps/start.c\uff09 <pre><code>int main();\n\nvoid _start()\n{\n    exit(main());\n}\n</code></pre></p> <p>\u63a5\u4e0b\u6765\u600e\u4e48\u7f16\u8bd1\u5462\uff1f\u76f4\u63a5 <code>gcc</code>\uff1f\u90a3\u53ef\u4e0d\u884c\uff0c\u6211\u4eec\u7684\u201c\u6807\u51c6\u5e93\u201d\u548c Linux \u8fd8\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u5f97\u94fe\u63a5\u4e0a\u6211\u4eec\u7684\u6807\u51c6\u5e93\u624d\u884c\u3002</p> <p>\u5bf9 Makefile \u8fd9\u4e48\u4fee\u6539\u4e00\u4e0b\uff1a</p> <p>\u4ee3\u7801 23-22 \u65b0\u7684 Makefile\uff08Makefile\uff09 <pre><code>LIBC_OBJECTS = out/syscall_impl.o out/stdio.o out/string.o\n\nout/%.bin : apps/%.asm\n    nasm apps/$*.asm -o out/$*.o -f elf\n    i686-elf-ld -s -Ttext 0x0 -o out/$*.bin out/$*.o\n\nout/tulibc.a : $(LIBC_OBJECTS)\n    i686-elf-ar rcs out/tulibc.a $(LIBC_OBJECTS)\n\nout/%.bin : apps/%.c apps/start.c out/tulibc.a\n    i686-elf-gcc -c -I include apps/start.c -o out/start.o -fno-builtin\n    i686-elf-gcc -c -I include apps/$*.c -o out/$*.o -fno-builtin\n    i686-elf-ld -s -Ttext 0x0 -o out/$*.bin out/$*.o out/start.o out/tulibc.a\n</code></pre></p> <p>\u8fd9\u91cc\u5148\u7528\u4e86 <code>ar</code>\uff0c\u628a\u6211\u4eec\u7684\u201c\u6807\u51c6\u5e93\u201d\u2014\u2014<code>stdio.o</code>\uff08<code>printf</code>\uff0c<code>sprintf</code>\uff0c<code>vprintf</code>\uff0c<code>vsprintf</code>\uff09\u3001<code>string.o</code>\uff08<code>mem</code> \u7cfb\u5217\u548c <code>str</code> \u7cfb\u5217\uff09\u4ee5\u53ca <code>syscall_impl.o</code>\uff08\u7cfb\u7edf\u8c03\u7528\u7684\u5b9e\u73b0\u90e8\u5206\uff09\u6253\u6210\u4e86\u4e00\u4e2a\u5e93 <code>tulibc.a</code>\uff0c\u53d6 <code>TUtorialos LIBC</code> \u7684\u610f\u601d\u3002<code>libc</code> \u5219\u662f\u4e00\u79cd\u63cf\u8ff0\u6807\u51c6\u5e93\u7684\u901a\u7528\u7b80\u5199\u3002\u7136\u540e\uff0c\u5206\u522b\u7f16\u8bd1 <code>start.c</code> \u548c\u5e94\u7528\u7a0b\u5e8f\uff0c\u6700\u540e\u628a\u5e94\u7528\u7a0b\u5e8f\u672c\u4f53\u3001<code>start.o</code> \u548c <code>tulibc.a</code> \u94fe\u63a5\u5728\u4e00\u8d77\uff0c\u5e76\u8bbe\u5b9a\u5165\u53e3\u70b9\uff0c\u5f62\u6210\u53ef\u4ee5\u8ba9 TutorialOS \u6267\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u3002</p> <p>\u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u662f\u652f\u6301\u7528\u6c47\u7f16\u6765\u7f16\u5199\u5e94\u7528\u7a0b\u5e8f\u7684\uff0c\u8fd9\u4e2a\u6d41\u7a0b\u5c31\u6bd4\u8f83\u7b80\u6d01\uff0c\u56e0\u4e3a\u6ca1\u6709 <code>main</code> \u7684\u7279\u6b8a\u5305\u88b1\uff0c\u76f4\u63a5\u7f16\u8bd1\u94fe\u63a5\u5373\u53ef\u3002</p> <p>\u4e0b\u9762\u7f16\u8bd1\u786c\u76d8\u6620\u50cf\u7684\u90e8\u5206\uff0c\u6211\u4eec\u4e5f\u505a\u4e86\u4fee\u6539\u3002</p> <p>\u4ee3\u7801 23-23 \u65b0\u7684 Makefile\uff08\u7eed\uff09\uff08Makefile\uff09 <pre><code>APPS = out/test_c.bin\n\n# \u4e2d\u7565\n\nhd.img : out/boot.bin out/loader.bin out/kernel.bin $(APPS)\n    ftimgcreate hd.img -t hd -size 80\n    ftformat hd.img -t hd -f fat16\n    ftcopy out/loader.bin -to -img hd.img\n    ftcopy out/kernel.bin -to -img hd.img\n    ftcopy out/test_c.bin -to -img hd.img\n    dd if=out/boot.bin of=hd.img bs=512 count=1\n</code></pre></p> <p>\u5728 <code>what you need</code> \u7684\u90e8\u5206\uff0c\u6211\u4eec\u65b0\u6dfb\u52a0\u4e86\u4e00\u4e2a <code>APPS</code> \u53d8\u91cf\uff0c\u5b83\u4ee3\u8868\u6211\u4eec\u9700\u8981\u7f16\u8bd1\u7684\u6240\u6709\u5e94\u7528\uff0c\u76ee\u524d\u53ea\u6709\u4e00\u4e2a <code>test_c.bin</code>\u3002\u7f16\u8bd1\u51fa\u6765\u4ee5\u540e\uff0c\u6211\u4eec\u5728\u4e0b\u9762\u7684\u547d\u4ee4\u4e2d\u8fdb\u884c\u5199\u5165\u3002</p> <p>\u73b0\u5728\u5e94\u8be5\u5c31\u53ef\u4ee5\u5f00\u59cb\u8fd0\u884c\u4e86\u3002\u7f16\u8bd1\uff0c\u8fd0\u884c\uff0c\u6548\u679c\u5982\u4e0b\uff1a</p> <p> \uff08\u56fe 23-3 Hello, World!\uff09</p> <p>\u8fd9\u4e00\u8282\u5b9e\u5728\u662f\u592a\u957f\u4e86\uff0c\u5230\u6b64\u4e3a\u6b62\u5427\u3002\u4e0b\u4e00\u8282\u6211\u4eec\u6765\u652f\u6301 <code>malloc</code>\uff0c\u540c\u65f6\u4e3a\u5e94\u7528\u7a0b\u5e8f\u4f20\u53c2\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u6b63\u5f0f\u7ed3\u675f\u5566\uff01\u63d0\u524d\u5b8c\u7ed3\u6492\u82b1.jpg</p>"},{"location":"os-tutorial/old/24-c-app-part1/","title":"24 C\u8bed\u8a00\u5e94\u7528\u7a0b\u5e8f\uff08\u4e0b\uff09","text":"<p>\u6b22\u8fce\u56de\u6765\u3002\u6211\u4eec\u672c\u8282\u7684\u4efb\u52a1\u5341\u5206\u660e\u786e\uff1a\u652f\u6301 <code>malloc</code>\uff0c\u540c\u65f6\u4e3a\u5e94\u7528\u7a0b\u5e8f\u4f20\u53c2\u3002</p> <p>\u4e0d\u8fc7\uff0c\u5728\u4e00\u5f00\u59cb\u6211\u4eec\u5148\u6765\u70b9\u201c\u8f7b\u677e\u201d\u7684\u3002\u6216\u8bb8\u5728\u7b2c 16 \u8282\u548c\u7b2c 22 \u8282\u7684\u65f6\u5019\uff0c\u6709\u7684\u8bfb\u8005\u4f1a\u6709\u8fd9\u6837\u7684\u7591\u95ee\uff1a</p> <p>\u4f60 shell \u660e\u660e\u96c6\u6210\u5728\u5185\u6838\u5f53\u4e2d\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u8981\u8d39\u4e8b\u53bb\u7cfb\u7edf\u8c03\u7528\u5462\uff1f</p> <p>\u6240\u4ee5\u6211\u4eec\u4eca\u5929\u7684\u7b2c\u4e00\u4e2a surprise\uff0c\u5c31\u662f\u628a shell \u4ece\u5185\u6838\u5f53\u4e2d\u7ed9\u5265\u79bb\u51fa\u53bb\uff0c\u505a\u6210\u4e00\u4e2a\u5355\u72ec\u7684 app\u3002\u6ca1\u6709\u4ec0\u4e48\u539f\u56e0\uff0c\u53ea\u662f\u56e0\u4e3a\u8fd9\u6837\u6cf0\u88e4\u8fa3\uff01\uff08\u9003</p> <p>\u4e0a\u4e00\u8282\u5df2\u7ecf\u521d\u6b65\u652f\u6301\u4e86 C \u8bed\u8a00\u5e94\u7528\u7a0b\u5e8f\uff0c\u800c\u6211\u4eec\u7684 shell \u4e00\u4e0d\u7528\u4f20\u53c2\uff0c\u4e8c\u6765\u5728\u4e00\u756a\u5fae\u64cd\u4e4b\u4e0b\u89c4\u907f\u4e86 <code>malloc</code>\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u653e\u5728\u8fd9\u4e2a\u6846\u67b6\u91cc\u3002</p> <p>\u9996\u5148\u6765\u628a\u73b0\u5728\u7684 <code>shell</code> \u6539\u9020\u6210\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\u7684\u4e1c\u897f\uff1a</p> <p>\u4ee3\u7801 24-1 \u73b0\u5728\u7684 <code>shell</code>\uff08apps/shell.c\uff09 <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stddef.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;stdbool.h&gt;\n#include &lt;unistd.h&gt;\n\n#define MAX_CMD_LEN 100\n#define MAX_ARG_NR 30\n\nstatic char cmd_line[MAX_CMD_LEN] = {0}; // \u8f93\u5165\u547d\u4ee4\u884c\u7684\u5185\u5bb9\nstatic char *argv[MAX_ARG_NR] = {NULL}; // argv\uff0c\u5b57\u9762\u610f\u601d\n\nstatic void print_prompt() // \u8f93\u51fa\u63d0\u793a\u7b26\n{\n    printf(\"[TUTO@localhost /] $ \"); // \u8fd9\u4e00\u90e8\u5206\u5927\u5bb6\u968f\u4fbf\u6539\uff0c\u4f60\u751a\u81f3\u53ef\u4ee5\u6539\u6210&gt;&gt;&gt;\n}\n\nstatic void readline(char *buf, int cnt) // \u8f93\u5165\u4e00\u884c\u6216cnt\u4e2a\u5b57\u7b26\n{\n    char *pos = buf; // \u4e0d\u60f3\u53d8buf\n    while (read(0, pos, 1) != -1 &amp;&amp; (pos - buf) &lt; cnt) { // \u8bfb\u5b57\u7b26\u6210\u529f\u4e14\u6ca1\u5230cnt\u4e2a\n        switch (*pos) {\n            case '\\n':\n            case '\\r': // \u56de\u8f66\u6216\u6362\u884c\uff0c\u7ed3\u675f\n                *pos = 0;\n                putchar('\\n'); // read\u4e0d\u81ea\u52a8\u56de\u663e\uff0c\u9700\u8981\u624b\u52a8\u8865\u4e00\u4e2a\\n\n                return; // \u8fd4\u56de\n            case '\\b': // \u9000\u683c\n                if (buf[0] != '\\b') { // \u5982\u679c\u4e0d\u5728\u7b2c\u4e00\u4e2a\n                    --pos; // \u6307\u5411\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\n                    putchar('\\b'); // \u624b\u52a8\u8f93\u51fa\u4e00\u4e2a\u9000\u683c\n                }\n                break;\n            default:\n                putchar(*pos); // \u90fd\u4e0d\u662f\uff0c\u90a3\u5c31\u76f4\u63a5\u8f93\u51fa\u521a\u8f93\u5165\u8fdb\u6765\u7684\u4e1c\u897f\n                pos++; // \u6307\u5411\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        }\n    }\n}\n\nstatic int cmd_parse(char *cmd_str, char **argv, char token)\n{\n    int arg_idx = 0;\n    while (arg_idx &lt; MAX_ARG_NR) {\n        argv[arg_idx] = NULL;\n        arg_idx++;\n    } // \u5f00\u5c40\u5148\u628a\u4e0a\u4e00\u4e2aargv\u62b9\u6389\n    char *next = cmd_str; // \u4e0b\u4e00\u4e2a\u5b57\u7b26\n    int argc = 0; // \u8fd9\u5c31\u662f\u8981\u8fd4\u56de\u7684argc\u4e86\n    while (*next) { // \u5faa\u73af\u5230\u7ed3\u675f\u4e3a\u6b62\n        if (*next != '\"') {\n            while (*next == token) *next++; // \u591a\u4e2atoken\u5c31\u53ea\u4fdd\u7559\u7b2c\u4e00\u4e2a\uff0cwindows cmd\u5c31\u662f\u8fd9\u4e48\u5904\u7406\u7684\n            if (*next == 0) break; // \u5982\u679c\u8df3\u8fc7\u5b8ctoken\u4e4b\u540e\u7ed3\u675f\u4e86\uff0c\u90a3\u5c31\u76f4\u63a5\u9000\u51fa\n            argv[argc] = next; // \u5c06\u9996\u6307\u9488\u8d4b\u503c\u8fc7\u53bb\uff0c\u4ece\u8fd9\u91cc\u5f00\u59cb\u5c31\u662f\u5f53\u524d\u53c2\u6570\n            while (*next &amp;&amp; *next != token) next++; // \u8df3\u5230\u4e0b\u4e00\u4e2atoken\n        } else {\n            next++; // \u8df3\u8fc7\u5f15\u53f7\n            argv[argc] = next; // \u8fd9\u91cc\u5f00\u59cb\u5c31\u662f\u5f53\u524d\u53c2\u6570\n            while (*next &amp;&amp; *next != '\"') next++; // \u8df3\u5230\u5f15\u53f7\n        }\n        if (*next) { // \u5982\u679c\u8fd9\u91cc\u6709token\u5b57\u7b26\n            *next++ = 0; // \u5c06\u5f53\u524dtoken\u5b57\u7b26\u8bbe\u4e3a0\uff08\u7ed3\u675f\u7b26\uff09\uff0cnext\u540e\u79fb\u4e00\u4e2a\n        }\n        if (argc &gt; MAX_ARG_NR) return -1; // \u53c2\u6570\u592a\u591a\uff0c\u8d85\u8fc7\u4e0a\u9650\u4e86\n        argc++; // argc\u589e\u4e00\uff0c\u5982\u679c\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u7a7a\u683c\u65f6\u4e0d\u63d0\u524d\u9000\u51fa\uff0cargc\u4f1a\u9519\u8bef\u5730\u88ab\u591a\u52a01\n    }\n    return argc;\n}\n\nvoid cmd_ver(int argc, char **argv)\n{\n    puts(\"TutorialOS Indev\");\n}\n\nint try_to_run_external(char *name, int *exist)\n{\n    int ret = create_process(name, cmd_line, \"/\");\n    *exist = false;\n    if (ret == -1) {\n        char new_name[MAX_CMD_LEN] = {0};\n        strcpy(new_name, name);\n        int len = strlen(name);\n        new_name[len] = '.';\n        new_name[len + 1] = 'b';\n        new_name[len + 2] = 'i';\n        new_name[len + 3] = 'n';\n        new_name[len + 4] = '\\0';\n        ret = create_process(new_name, cmd_line, \"/\");\n        if (ret == -1) return -1;\n    }\n    *exist = true;\n    ret = waitpid(ret);\n    return ret;\n}\n\nvoid cmd_execute(int argc, char **argv)\n{\n    if (!strcmp(\"ver\", argv[0])) {\n        cmd_ver(argc, argv);\n    } else {\n        int exist;\n        int ret = try_to_run_external(argv[0], &amp;exist);\n        if (!exist) {\n            printf(\"shell: `%s` is not recognized as an internal or external command or executable file.\\n\", argv[0]);\n        } else if (ret) {\n            printf(\"shell: app `%s` exited abnormally, retval: %d (0x%x).\\n\", argv[0], ret, ret);\n        }\n    }\n}\n\nvoid shell()\n{\n    puts(\"TutorialOS Indev (tags/Indev:WIP, Jun 26 2024, 21:09) [GCC 32bit] on baremetal\"); // \u770b\u7740\u773c\u719f\uff1f\u8fd9\u4e00\u90e8\u5206\u662f\u4ece Python 3 \u91cc\u6a21\u4eff\u7684\n    puts(\"Type \\\"ver\\\" for more information.\\n\"); // \u793a\u4f8b\uff0c\u53ea\u6253\u7b97\u652f\u6301\u8fd9\u4e00\u4e2a\n    while (1) { // \u65e0\u9650\u5faa\u73af\n        print_prompt(); // \u8f93\u51fa\u63d0\u793a\u7b26\n        memset(cmd_line, 0, MAX_CMD_LEN);\n        readline(cmd_line, MAX_CMD_LEN); // \u8f93\u5165\u4e00\u884c\u547d\u4ee4\n        if (cmd_line[0] == 0) continue; // \u5565\u4e5f\u6ca1\u6709\uff0c\u662f\u6362\u884c\uff0c\u76f4\u63a5\u8df3\u8fc7\n        int argc = cmd_parse(cmd_line, argv, ' '); // \u89e3\u6790\u547d\u4ee4\uff0c\u6309\u7167cmd_parse\u7684\u8981\u6c42\u4f20\u5165\uff0c\u9ed8\u8ba4\u5206\u9694\u7b26\u4e3a\u7a7a\u683c\n        cmd_execute(argc, argv); // \u6267\u884c\n    }\n    puts(\"shell: PANIC: WHILE (TRUE) LOOP ENDS! RUNNNNNNN!!!\"); // \u5230\u4e0d\u4e86\uff0c\u4e0d\u89e3\u91ca\n}\n\nint main()\n{\n    shell();\n    return 0;\n}\n</code></pre></p> <p>\u4ece\u4e0a\u9762\u7684\u6587\u4ef6\u540d\u5c31\u53ef\u4ee5\u77e5\u9053\uff0c\u6211\u4eec\u5df2\u7ecf\u628a <code>shell</code> \u632a\u5230\u4e86 <code>apps</code> \u76ee\u5f55\u4e0b\uff1b\u540c\u65f6\uff0c\u5728\u6700\u540e\u4e5f\u52a0\u4e86\u4e00\u4e2a <code>int main()</code>\uff0c\u867d\u7136\u8bf4\u53ef\u4ee5\u76f4\u63a5\u5728 <code>shell()</code> \u4e0a\u6539\uff0c\u4f46\u7559\u70b9\u9057\u5b58\u4e5f\u4e0d\u662f\u4e0d\u884c\uff08\uff1f\uff09</p> <p>\u4e0b\u9762\u5f15\u5165\u4e86\u4e00\u5806\u5934\u6587\u4ef6\uff0c\u5176\u4e2d\u7684 <code>unistd.h</code> \u662f\u4e0a\u4e00\u8282\u6240\u9020\uff0c<code>stdio.h</code> \u65e9\u5df2\u6709\u4e4b\uff0c\u5269\u4e0b\u7684 <code>stdint.h</code>\u3001 <code>stdbool.h</code> \u4ee5\u53ca <code>stddef.h</code> \u662f\u4ece <code>common.h</code> \u91cc\u5206\u79bb\u51fa\u6765\u7684\u4ea7\u7269\uff1a</p> <p>\u4ee3\u7801 24-2 \u4e09\u4e2a\u5934\u6587\u4ef6\uff08include/stdint.h\u3001include/stdbool.h\u3001include/stddef.h\uff09 <pre><code>#ifndef _STDINT_H_\n#define _STDINT_H_\n\ntypedef unsigned int   uint32_t;\ntypedef          int   int32_t;\ntypedef unsigned short uint16_t;\ntypedef          short int16_t;\ntypedef unsigned char  uint8_t;\ntypedef          char  int8_t;\n\n#endif\n</code></pre> <pre><code>#ifndef _STDBOOL_H_\n#define _STDBOOL_H_\n\ntypedef _Bool bool;\n#define true 1\n#define false 0\n\n#endif\n</code></pre> <pre><code>#ifndef _STDDEF_H_\n#define _STDDEF_H_\n\n#define NULL ((void *) 0)\n\n#endif\n</code></pre></p> <p>\u5982\u4f60\u6240\u89c1\uff0c\u8fd9\u4e09\u4e2a\u5934\u6587\u4ef6\u57fa\u672c\u4e0a\u5168\u90fd\u5f88\u77ed\u5c0f\uff0c\u4ec0\u4e48\u5b89\u5168\u4fdd\u62a4\u63aa\u65bd\u4e5f\u6ca1\u52a0\uff0c\u6bd5\u7adf\u7eaf\u73a9\u73a9\u4e5f\u7528\u4e0d\u5230\uff0c\u5230\u65f6\u5019\u4ece\u4ec0\u4e48\u5730\u65b9copy\u4e00\u4e2a\u5c31\u884c\u4e86\uff08bushi\uff09\u3002</p> <p>\u53e6\u5916\uff0c\u5728 <code>stdio.h</code> \u4e2d\u628a <code>#include \"common.h\"</code> \u66ff\u6362\u6210\u4e86 <code>#include \"string.h\"</code> \u548c <code>#include \"stdint.h\"</code> \u4e24\u884c\uff0c\u5728 <code>unistd.h</code> \u7684\u51fd\u6570\u58f0\u660e\u5f00\u59cb\u524d\u589e\u52a0\u4e86\u4e00\u884c <code>#include \"stdint.h\"</code>\u3002\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u786e\u4fdd\u8fd9\u4e9b\u6807\u51c6\u5e93\u6587\u4ef6\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u6587\u4ef6\u65e0\u5173 \u5176\u5b9e\u5c31\u662f\u95f2\u7684\u3002</p> <p>\u63a5\u4e0b\u6765\u5728 <code>kernel_main</code> \u542f\u52a8 <code>shell</code> \u7684\u90e8\u5206\u4e5f\u8981\u4fee\u6539\uff1a</p> <p>\u4ee3\u7801 24-3 \u542f\u52a8 shell\uff08kernel/main.c\uff09 <pre><code>void kernel_main() // kernel.asm\u4f1a\u8df3\u8f6c\u5230\u8fd9\u91cc\n{\n    monitor_clear();\n    init_gdtidt();\n    init_memory();\n    init_timer(100);\n    init_keyboard();\n    asm(\"sti\");\n    task_init();\n\n    sys_create_process(\"shell.bin\", \"\", \"/\");\n\n    task_exit(0);\n}\n</code></pre></p> <p><code>task_a</code> \u53d8\u91cf\u4ece\u5934\u5230\u5c3e\u6ca1\u6709\u88ab\u7528\u5230\uff0c\u56e0\u6b64\u5c31\u5220\u4e86\u3002\u4e0b\u9762\u7684 <code>sys_create_process</code> \u5b9e\u8d28\u4e0a\u5f00\u542f\u4e86\u4e00\u4e2a\u65b0\u4efb\u52a1\u6267\u884c <code>shell.bin</code>\u3002\u6700\u540e\uff0c\u8c03\u7528 <code>task_exit(0)</code> \u9000\u51fa\u5f53\u524d\u4efb\u52a1\uff0c\u4e8e\u662f\u64cd\u4f5c\u7cfb\u7edf\u5c31\u8fdb\u5165\u540e\u53f0\uff0c\u800c\u4e3b\u8981\u662f ring3 \u7528\u6237\u5c42\u7684 <code>shell</code> \u5728\u8d77\u4ea4\u4e92\u4f5c\u7528\u4e86\u3002</p> <p>\u5728 <code>Makefile</code> \u7684 <code>APPS</code> \u4e2d\u52a0\u5165 <code>out/shell.bin</code>\uff0c<code>OBJS</code> \u4e2d\u5220\u9664 <code>out/shell.o</code>\uff0c\u5b8c\u6210\u6700\u540e\u7684\u4ea4\u63a5\u3002<code>shell</code> \u7684\u5730\u4f4d\u751a\u81f3\u56e0\u6b64\u8fd8\u63d0\u5347\u4e86\uff08\uff1f\uff09</p> <p>\u6700\u540e\u5f53\u7136\u662f\u7f16\u8bd1\u8fd0\u884c\u5566\uff1a</p> <p> \uff08\u56fe 24-1 \u6548\u679c\uff09</p> <p>\u6267\u884c\u5185\u90e8\u547d\u4ee4\u8fd8\u662f\u5e94\u7528\u7a0b\u5e8f\u90fd\u6ca1\u95ee\u9898\uff0c\u4e0d\u8fc7\u6309\u7406\u6765\u8bf4\u4e5f\u7b97\u7406\u6240\u5e94\u5f53\u5427\uff0c\u5230\u6700\u540e\u4e5f\u6ca1\u505a\u591a\u5c11\u4fee\u6539\uff08\u7b11\uff09\u3002</p> <p>\u70ed\u8eab\u5b8c\u6210\uff0c\u7b4b\u9aa8\u4e5f\u6d3b\u52a8\u5f97\u5dee\u4e0d\u591a\u4e86\uff0c\u4e5f\u8be5\u56de\u987e\u4e00\u4e0b\u4e0a\u4e00\u8282\u7684\u4e24\u5927\u76ee\u6807\uff1a\u5b9e\u73b0 <code>malloc</code> \u4ee5\u53ca\u7ed9\u5e94\u7528\u7a0b\u5e8f\u4f20\u53c2\u3002</p> <p>\u8bf4\u5230\u5e95\uff0c\u8fd9\u5176\u5b9e\u662f\u540c\u4e00\u4e2a\u95ee\u9898\uff1a\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u80fd\u76f4\u63a5\u8bbf\u95ee\u64cd\u4f5c\u7cfb\u7edf\u7684\u5185\u5b58\u4e0d\u5c31\u597d\u4e86\uff1f\u8fd9\u6837\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 <code>kmalloc</code>\u3001<code>kfree</code>\uff0c\u4f20\u53c2\u968f\u4fbf\u5199\u4e2a\u7cfb\u7edf\u8c03\u7528\u4e5f\u5c31\u53ef\u4ee5\u505a\u5230\u4e86\u3002\u53ef\u662f\u5e94\u7528\u7a0b\u5e8f\u53ea\u80fd\u8bbf\u95ee\u5e94\u7528\u7a0b\u5e8f\u6bb5\u81ea\u5df1\u7684\u5730\u5740\uff0c\u8fd9\u662f\u51fa\u4e8e\u5b89\u5168\u7684\u8003\u8651\uff1a\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u80fd\u8bbf\u95ee\u64cd\u4f5c\u7cfb\u7edf\u7684\u5185\u5b58\uff0c\u90a3\u4e0d\u5c31\u80fd\u968f\u4fbf\u7834\u574f\u4e86\u5417\u3002</p> <p>\u6240\u4ee5\uff0c\u73b0\u5728\u7684\u95ee\u9898\u5c31\u53d8\u6210\u4e86\uff1a\u8981\u7531\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u4e00\u6bb5\u4f4d\u4e8e\u5e94\u7528\u7a0b\u5e8f\u6570\u636e\u6bb5\u5185\u7684\u5185\u5b58\uff0c\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u8ba9\u5e94\u7528\u7a0b\u5e8f\u81ea\u6cbb\uff0c\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u7b49\u7b49\u624b\u6bb5\u4ece\u8fd9\u91cc\u83b7\u53d6\u5185\u5b58\u3002</p> <p>\u5bf9 C \u8bed\u8a00\u6709\u4e9b\u4e86\u89e3\u7684\u8bfb\u8005\u5e94\u8be5\u77e5\u9053\uff0c<code>malloc</code> \u5b9e\u9645\u4e0a\u662f\u4ece\u4e00\u4e2a\u53eb\u201c\u5806\u201d\u7684\u5730\u65b9\u83b7\u53d6\u5185\u5b58\u7684\uff1b\u5b83\u5e76\u4e0d\u662f\u76f4\u63a5\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u771f\u6b63\u7528\u4e8e\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5185\u5b58\u7684\u7cfb\u7edf\u8c03\u7528\u662f <code>brk</code>\u3001 <code>sbrk</code> \u548c <code>mmap</code>\u3002<code>mmap</code> \u7684\u672c\u610f\u662f\u5c06\u6587\u4ef6\u5185\u5bb9\u6620\u5c04\u5230\u5185\u5b58\u5f53\u4e2d\uff0c\u4e0e\u666e\u901a\u7684\u8bfb\u53d6\u4e0d\u540c\u7684\u662f\uff0c\u5bf9\u6620\u5c04\u540e\u5185\u5b58\u7684\u4fee\u6539\u4f1a\u7acb\u523b\u540c\u6b65\u5230\u6587\u4ef6\uff1b\u800c\u901a\u8fc7\u4f7f\u7528\u4e00\u4e9b\u7279\u6b8a\u6587\u4ef6\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u51ed\u7a7a\u7533\u8bf7\u5185\u5b58\u7684\u6548\u679c\u3002</p> <p>\u7136\u800c\uff0c\u5b9e\u73b0\u4e00\u4e2a <code>mmap</code> \u5bf9\u6211\u4eec\u6765\u8bf4\u592a\u8fc7\u56f0\u96be\uff0c\u51c6\u5907\u4e00\u4e2a\u7279\u6b8a\u6587\u4ef6\u4e5f\u4e0d\u5728\u73b0\u6709\u7684\u6846\u67b6\u4e4b\u5185\uff0c\u56e0\u6b64\u5c31\u7b97\u4e86\u3002\u63a5\u4e0b\u6765\u7684 <code>brk</code> \u548c <code>sbrk</code>\uff0c\u4e00\u770b\u540d\u5b57\u5c31\u77e5\u9053\u662f\u4e00\u5bf9\u51fd\u6570\uff0c\u67e5\u9605 linux manual \u77e5\u9053\u5b83\u4eec\u64cd\u63a7\u7740\u4e00\u4e2a\u53eb\u505a <code>program break</code> \u7684\u73a9\u610f\u3002\u624b\u518c\u4e0a\u8bf4\u5b83\u662f\u4ec0\u4e48\u6570\u636e\u6bb5\u7684\u7ec8\u6b62\uff0c\u8fd9\u662f\u4ec0\u4e48\u4e0d\u77e5\u9053\uff1b\u4e0d\u8fc7\u4f7f\u7528\u8fd9\u4e24\u4e2a\u51fd\u6570\u53ef\u4ee5\u4fee\u6539\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u4ece\u800c\u7ed9\u6570\u636e\u6bb5\u91cc\u51ed\u7a7a\u591a\u51fa\u5185\u5b58\u6765\uff0c\u8fd9\u5c31\u662f\u4e3a\u6211\u4eec\u6240\u7528\u7684\u5185\u5b58\u4e86\u3002</p> <p><code>brk</code> \u662f\u76f4\u63a5\u8bbe\u7f6e <code>program break</code>\uff0c\u6211\u8fd8\u5f97\u81ea\u5df1\u7ef4\u62a4\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u624d\u80fd\u7533\u8bf7\uff0c\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u8fd8\u662f\u76f4\u63a5\u4f7f\u7528 <code>sbrk</code> \u66f4\u52a0\u76f4\u63a5\uff0c\u5b83\u7684\u53c2\u6570\u662f\u589e\u91cf\uff0c\u8fd4\u56de\u7684\u662f\u65e7\u7684 <code>program break</code> \u7684\u4f4d\u7f6e\uff0c\u539f\u578b\u5982\u4e0b\uff1a</p> <pre><code>void *sbrk(int incr);\n</code></pre> <p>\u548c <code>malloc</code> \u4e00\u5bf9\u6bd4\uff0c\u662f\u4e0d\u662f\u770b\u7740\u5f88\u63a5\u8fd1\uff1f\u66f4\u68d2\u7684\u662f\uff0c<code>incr</code> \u8fd8\u53ef\u4ee5\u662f\u8d1f\u6570\uff0c\u76f8\u5f53\u4e8e\u5728\u91ca\u653e\u7528\u5b8c\u7684\u5185\u5b58\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u7528 <code>sbrk</code> \u4e00\u4e2a\u51fd\u6570\u5c31\u53ef\u4ee5\u5b9e\u73b0\u5185\u5b58\u7684\u5206\u914d\u548c\u91ca\u653e\uff0c\u63a5\u4e0b\u6765\u5c31\u53ea\u662f\u7ba1\u7406\u7684\u4e8b\u4e86\u3002</p> <p>\u90a3\u4e48\u6211\u4eec\u6700\u7ec8\u7684\u95ee\u9898\uff0c\u5c31\u53d8\u6210\u4e86\u4e24\u4e2a\uff1a</p> <p>1) \u5982\u4f55\u5b9e\u73b0 <code>sbrk</code>\uff1b</p> <p>2) \u5982\u4f55\u901a\u8fc7 <code>sbrk</code> \u5b9e\u73b0 <code>malloc</code>\u3002</p> <p>\u5148\u4ece\u7b2c\u4e00\u4e2a\u5f00\u59cb\u5427\u3002\u65e2\u7136\u6240\u8c13\u7684 <code>program break</code> \u8868\u793a\u6570\u636e\u6bb5\u7684\u7ec8\u6b62\uff0c\u6211\u4eec\u5148\u6765\u5b9e\u73b0\u4e00\u4e2a\u53ef\u4ee5\u7528\u6765\u6269\u5f20\u6570\u636e\u6bb5\u7684\u51fd\u6570\u3002\u4e0d\u8fc7\u8bf4\u662f\u6269\u5f20\uff0c\u5230\u5934\u6765\u5176\u5b9e\u4e5f\u8fd8\u662f\u5220\u6389\u65e7\u7684\u521b\u5efa\u65b0\u7684\u3002</p> <p>\u5185\u6838\u7684\u6570\u636e\u6bb5\u5df2\u7ecf\u5360\u6ee1\u4e86 4GB\uff0c\u7ed9\u5185\u6838\u5b9e\u73b0\u6269\u5f20\u6beb\u65e0\u610f\u4e49\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u7ed9\u4efb\u52a1\u6dfb\u52a0\u4e00\u4e2a <code>is_user</code> \u6807\u7b7e\uff0c\u8868\u793a\u662f\u4e0d\u662f\u5e94\u7528\u7a0b\u5e8f\uff1a</p> <p>\u4ee3\u7801 24-4 \u6dfb\u52a0\u65b0\u6807\u7b7e\uff08include/mtask.h\u3001kernel/mtask.c\u3001kernel/exec.c\uff09 <pre><code>typedef struct TASK {\n    uint32_t sel;\n    int32_t flags;\n    exit_retval_t my_retval;\n    int fd_table[MAX_FILE_OPEN_PER_TASK];\n    gdt_entry_t ldt[2];\n    int ds_base;\n    bool is_user; // here\n    tss32_t tss;\n} task_t;\n</code></pre> <pre><code>            for (int i = 3; i &lt; MAX_FILE_OPEN_PER_TASK; i++) {\n                task-&gt;fd_table[i] = -1;\n            }\n            task-&gt;is_user = false; // here\n            return task;\n</code></pre> <pre><code>void app_entry(const char *app_name, const char *cmdline, const char *work_dir)\n{\n    int fd = sys_open((char *) app_name, O_RDONLY);\n    int size = sys_lseek(fd, -1, SEEK_END) + 1;\n    sys_lseek(fd, 0, SEEK_SET);\n    char *buf = (char *) kmalloc(size + 5);\n    sys_read(fd, buf, size);\n    int first, last;\n    char *code;\n    int entry = load_elf((Elf32_Ehdr *) buf, &amp;code, &amp;first, &amp;last);\n    if (entry == -1) task_exit(-1);\n    char *ds = (char *) kmalloc(last - first + 4 * 1024 * 1024 + 5);\n    memcpy(ds, code, last - first);\n    task_now()-&gt;is_user = true; // here\n    task_now()-&gt;ds_base = (int) ds;\n    ldt_set_gate(0, (int) code, last - first - 1, 0x409a | 0x60);\n    ldt_set_gate(1, (int) ds, last - first + 4 * 1024 * 1024 + 1 * 1024 * 1024 - 1, 0x4092 | 0x60);\n    start_app(entry, 0 * 8 + 4, last - first + 4 * 1024 * 1024 - 4, 1 * 8 + 4, &amp;(task_now()-&gt;tss.esp0));\n    while (1);\n}\n</code></pre></p> <p>\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u5b9e\u73b0\u7ed9\u7528\u6237\u6269\u5f20\u6570\u636e\u6bb5\u7684\u51fd\u6570\u4e86\uff1a</p> <p>\u4ee3\u7801 24-5 \u6269\u5f20\u6570\u636e\u6bb5\uff08kernel/exec.c\uff09 <pre><code>static void expand_user_segment(int increment)\n{\n    task_t *task = task_now();\n    if (!task-&gt;is_user) return; // \u5185\u6838\u90fd\u6253\u6ee14GB\u4e86\u8fd8\u9700\u8981\u6269\u5bb9\uff1f\n    gdt_entry_t *segment = &amp;task-&gt;ldt[1];\n    // \u63a5\u4e0b\u6765\u628abase\u548climit\u7684\u77f3\u5757\u62fc\u51fa\u6765\n    uint32_t base = segment-&gt;base_low | (segment-&gt;base_mid &lt;&lt; 16) | (segment-&gt;base_high &lt;&lt; 24); // \u5176\u5b9e\u53ef\u4ee5\u4e0d\u7528\u62fc\u76f4\u63a5\u7528ds_base \u4f46\u8fd8\u662f\u62fc\u4e00\u4e0b\u5427\u5f53\u7ec3\u4e60\n    uint32_t size = segment-&gt;limit_low | ((segment-&gt;limit_high &amp; 0x0F) &lt;&lt; 16);\n    if (segment-&gt;limit_high &amp; 0x80) size *= 0x1000;\n    size++;\n    // \u5206\u914d\u65b0\u7684\u5185\u5b58\n    void *new_base = (void *) kmalloc(size + increment + 5);\n    if (increment &gt; 0) return; // expand\u662f\u6269\u5bb9\u4f60\u7f29\u6c34\u662f\u51e0\u4e2a\u610f\u601d\n    memcpy(new_base, (void *) base, size); // \u539f\u6765\u7684\u5185\u5bb9\u5168\u590d\u5236\u8fdb\u53bb\n    // \u7528\u6237\u8fdb\u7a0b\u7684base\u5fc5\u7136\u7531malloc\u5206\u914d\uff0c\u6545\u7528free\u91ca\u653e\u4e4b\n    kfree((void *) base);\n    // \u90a3\u4e48\u63a5\u4e0b\u6765\u5c31\u662f\u628anew_base\u8bbe\u7f6e\u6210\u65b0\u7684\u6bb5\u4e86\n    ldt_set_gate(1, (int) new_base, size + increment - 1, 0x4092 | 0x60); // \u53cd\u6b63\u53ea\u6709\u6570\u636e\u6bb5\u5141\u8bb8\u6269\u5bb9\u6211\u4e5f\u5c31\u8bbe\u7f6e\u6210\u6570\u636e\u6bb5\u7b97\u4e86\n    task-&gt;ds_base = (int) new_base; // \u65e2\u7136ds_base\u53d8\u4e86task\u91cc\u7684\u5e94\u8be5\u540c\u6b65\u66f4\u65b0\n}\n</code></pre></p> <p>\u5f00\u5934\u4e09\u884c\u663e\u7136\u4e0d\u9700\u8981\u89e3\u91ca\u3002\u63a5\u4e0b\u6765\u628a\u5e94\u7528\u7a0b\u5e8f\u6570\u636e\u6bb5\u7684\u57fa\u5740\uff08\u8fd9\u6837\u6211\u624d\u77e5\u9053\u4ece\u54ea\u62ff\u5230\u65e7\u6570\u636e\uff09\u548c\u5927\u5c0f\uff08\u8fd9\u6837\u6211\u624d\u77e5\u9053\u65b0\u7684\u9700\u8981\u591a\u5927\uff09\u62fc\u51fa\u6765\u3002\u6b7b\u53bb\u7684 GDT \u53c8\u5f00\u59cb\u653b\u51fb\u6211\u4eec\u4e86\uff0c\u5077\u4e00\u4e2a\u5c0f\u56fe\u8fc7\u6765\uff1a</p> <p></p> <p>\uff08\u56fe 24-2 <code>GDT</code> \u63cf\u8ff0\u7b26\u7ed3\u6784\uff09</p> <p>\u4ee5\u53ca\u5b83\u7684\u4ee3\u7801\u8868\u793a\uff1a</p> <pre><code>struct gdt_entry_struct {\n    uint16_t limit_low; // BYTE 0~1\n    uint16_t base_low; // BYTE 2~3\n    uint8_t base_mid; // BYTE 4\n    uint8_t access_right; // BYTE 5, P|DPL|S|TYPE (1|2|1|4)\n    uint8_t limit_high; // BYTE 6, G|D/B|0|AVL|limit_high (1|1|1|1|4)\n    uint8_t base_high; // BYTE 7\n} __attribute__((packed));\n\ntypedef struct gdt_entry_struct gdt_entry_t;\n</code></pre> <p>\u6309\u7167\u8fd9\u4e2a\u7ed3\u6784\u518d\u53bb\u770b\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u62fc <code>base</code> \u662f\u663e\u800c\u6613\u89c1\u7684\uff0c\u62fc <code>limit</code> \u5219\u6d89\u53ca\u5230\u4e00\u4e2a G \u4f4d\u7684\u95ee\u9898\uff1aG \u4f4d\u4f4d\u4e8e <code>limit_high</code> \u7684\u6700\u9ad8\u4f4d\uff0c\u5f53\u5b83\u4e3a 1 \u65f6\uff0c\u4ee3\u8868\u6574\u4e2a <code>limit</code> \u4ee3\u8868\u7684\u662f\u4e00\u4e2a\u4ee5 4KB \u4e3a\u5355\u4f4d\u7684\u6bb5\uff08\u8bf4\u767d\u4e86\u5c31\u662f\u8981\u7ed9 <code>limit</code> \u4e58\u4e0a 4096\uff09\u3002\u62fc\u5b8c\u4ee5\u540e\u7531\u4e8e <code>limit</code> \u52a0 1 \u624d\u662f <code>size</code>\uff0c\u6240\u4ee5\u518d\u628a <code>1</code> \u7ed9\u52a0\u4e0a\u3002</p> <p>\u63a5\u4e0b\u6765\u91cd\u65b0\u5206\u914d\u4e00\u6bb5\u65b0\u7684\u6570\u636e\u6bb5\uff0c\u628a\u65e7\u7684\u4e1c\u897f\u5168\u90fd\u590d\u5236\u8fc7\u53bb\uff0c\u552f\u4e00\u7684\u53d8\u5316\u5c31\u662f\u5927\u5c0f\u53d8\u5927\u4e86\u3002\u65e7\u7684\u6570\u636e\u6bb5\u7559\u7740\u4e5f\u6ca1\u6709\u7528\uff0c\u65e2\u7136\u524d\u9762\u521d\u59cb\u5316\u662f\u7528 <code>kmalloc</code> \u521d\u59cb\u5316\u7684 <code>ds</code>\uff0c\u65b0\u7684\u6bb5\u4e5f\u4f7f\u7528 <code>kmalloc</code> \u5206\u914d\uff0c\u6240\u4ee5\u53ef\u4ee5\u5b89\u5168\u5730\u4f7f\u7528 <code>kfree</code> \u628a\u5185\u5b58\u91ca\u653e\u6389\u3002\u6700\u540e\u8c03\u7528 <code>ldt_set_gate</code> \u628a\u6570\u636e\u6bb5\u6362\u6210\u65b0\u7684\uff0c\u540c\u65f6\u66f4\u65b0 <code>task</code> \u91cc\u7684 <code>ds_base</code>\uff0c\u8fd9\u6837\u5982\u5047\u5305\u6362\uff0c\u5e94\u7528\u7a0b\u5e8f\u6beb\u65e0\u611f\u77e5\u3002</p> <p>\u63a5\u4e0b\u6765\u5c31\u662f\u5b9e\u73b0 <code>sbrk</code> \u4e86\u3002\u4e0a\u9762\u7684 <code>program break</code> \u8bf4\u662f\u6570\u636e\u6bb5\u7ed3\u5c3e\uff0c\u4f46\u5982\u679c\u8001\u662f\u66f4\u65b0\u6570\u636e\u6bb5\u7684\u8bdd\uff0c\u5185\u5b58\u4e5f\u5403\u4e0d\u6d88\uff0c\u901f\u5ea6\u4e5f\u4f1a\u6162\u4e0a\u4e00\u70b9\uff08\u4e0d\u8fc7\u4e0d\u4ed4\u7ec6\u770b\u7684\u8bdd\uff0c\u5927\u6982\u662f\u770b\u4e0d\u51fa\u6765\u7684\uff09\u3002\u6240\u4ee5\u6211\u4eec\u5148\u4e34\u65f6\u5f00 1MB \u7f13\u51b2\u533a\uff0c\u8fd9 1MB \u7528\u5b8c\u4e86\u518d\u6269\u5c55\u81f3\u5c11 32KB\uff0c\u8fd9\u6837\u4e5f\u8bb8\u4f1a\u628a\u5360\u7528\u641e\u5c0f\u4e00\u70b9\uff08\u5fc3\u865a\uff09\u3002</p> <p>\u56e0\u6b64\uff0c\u5b58 <code>program break</code> \u4e0d\u4ec5\u8981\u5b58\u5b83\u73b0\u5728\u7684\u4f4d\u7f6e\uff0c\u8fd8\u8981\u5b58\u7ed9\u5b83\u7684\u7f13\u51b2\u533a\u5728\u54ea\u91cc\u7ed3\u675f\uff0c\u8fd9\u6837\u624d\u53ef\u4ee5\u6269\u5c55\u6570\u636e\u6bb5\u3002</p> <p>\u4ee3\u7801 24-6 \u5b9e\u73b0 <code>sbrk</code>\uff081\uff09\u2014\u2014\u521b\u5efa <code>program break</code>\uff08include/mtask.h\uff09 <pre><code>typedef struct TASK {\n    uint32_t sel;\n    int32_t flags;\n    exit_retval_t my_retval;\n    int fd_table[MAX_FILE_OPEN_PER_TASK];\n    gdt_entry_t ldt[2];\n    int ds_base;\n    bool is_user;\n    void *brk_start, *brk_end; // here\n    tss32_t tss;\n} task_t;\n</code></pre></p> <p>\u63a5\u4e0b\u6765\u5728 <code>app_entry</code> \u4e2d\u521d\u59cb\u5316\u5b83\uff1a</p> <p>\u4ee3\u7801 24-7 \u5b9e\u73b0 <code>sbrk</code>\uff082\uff09\u2014\u2014\u521d\u59cb\u5316 <code>program break</code>\uff08kernel/exec.c\uff09 <pre><code>void app_entry(const char *app_name, const char *cmdline, const char *work_dir)\n{\n    int fd = sys_open((char *) app_name, O_RDONLY);\n    int size = sys_lseek(fd, -1, SEEK_END) + 1;\n    sys_lseek(fd, 0, SEEK_SET);\n    char *buf = (char *) kmalloc(size + 5);\n    sys_read(fd, buf, size);\n    int first, last;\n    char *code;\n    int entry = load_elf((Elf32_Ehdr *) buf, &amp;code, &amp;first, &amp;last);\n    if (entry == -1) task_exit(-1);\n    char *ds = (char *) kmalloc(last - first + 4 * 1024 * 1024 + 1 * 1024 * 1024 - 5);\n    memcpy(ds, code, last - first);\n    task_now()-&gt;is_user = true;\n    // \u8fd9\u4e00\u5757\u5c31\u662f\u7ed9\u7528\u6237\u7528\u7684\n    task_now()-&gt;brk_start = (void *) last - first + 4 * 1024 * 1024;\n    task_now()-&gt;brk_end = (void *) last - first + 5 * 1024 * 1024 - 1;\n    task_now()-&gt;ds_base = (int) ds; // \u8bbe\u7f6eds\u57fa\u5740\n    ldt_set_gate(0, (int) code, last - first - 1, 0x409a | 0x60);\n    ldt_set_gate(1, (int) ds, last - first + 4 * 1024 * 1024 + 1 * 1024 * 1024 - 1, 0x4092 | 0x60);\n    start_app(entry, 0 * 8 + 4, last - first + 4 * 1024 * 1024 - 4, 1 * 8 + 4, &amp;(task_now()-&gt;tss.esp0));\n    while (1);\n}\n</code></pre></p> <p>\u6700\u540e\u5c31\u662f <code>sbrk</code> \u7684\u672c\u4f53\u4e86\uff0c\u4e3a\u4e86\u5077\u61d2\u4e5f\u653e\u5728\u4e86 <code>kernel/exec.c</code> \u4e0b\u9762\uff08\u867d\u7136\u653e\u8fd9\u91cc\u597d\u50cf\u4e0d\u5927\u597d\uff1f\uff09\uff1a</p> <p>\u4ee3\u7801 24-8 \u5b9e\u73b0 <code>sbrk</code>\uff083\uff09\u2014\u2014\u64cd\u63a7 <code>program break</code>\uff08kernel/exec.c\uff09 <pre><code>void *sys_sbrk(int incr)\n{\n    task_t *task = task_now();\n    if (task-&gt;is_user) { // \u662f\u5e94\u7528\u7a0b\u5e8f\n        if (task-&gt;brk_start + incr &gt; task-&gt;brk_end) { // \u5982\u679c\u8d85\u51fa\u5df2\u6709\u7f13\u51b2\u533a\n            expand_user_segment(incr + 32 * 1024); // \u518d\u591a\u6269\u5c5532KB\n            task-&gt;brk_end += incr + 32 * 1024; // \u7531\u4e8e\u6269\u5c55\u4e8632KB\uff0c\u540c\u6b65\u5c06brk_end\u79fb\u5230\u73b0\u5728\u7684\u6570\u636e\u6bb5\u7ed3\u5c3e\n        }\n        void *ret = task-&gt;brk_start; // \u65e7\u7684program break\n        task-&gt;brk_start += incr; // \u76f4\u63a5\u6dfb\u52a0\u5c31\u5b8c\u4e8b\u4e86\n        return ret; // \u8fd4\u56de\u4e4b\n    }\n    return NULL; // \u975e\u7528\u6237\u4e0d\u5141\u8bb8\u4f7f\u7528sbrk\n}\n</code></pre></p> <p>\u5230\u73b0\u5728\u4e3a\u6b62\uff0c\u5c31\u5b9e\u73b0\u4e86\u6700\u57fa\u672c\u7684\u5411\u5185\u6838\u7533\u8bf7\u5185\u5b58\u7684\u51fd\u6570\u3002\u63a5\u4e0b\u6765\u628a\u5b83\u641e\u6210\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\uff0c<code>sbrk</code> \u5c31\u53ef\u4ee5\u4f7f\u7528\u4e86\uff1a</p> <p>\u4ee3\u7801 24-9 \u5b9e\u73b0 <code>sbrk</code>\uff084\uff09\u2014\u2014\u6dfb\u52a0\u7cfb\u7edf\u8c03\u7528\uff08include/syscall.h\u3001kernel/syscall.c\u3001kernel/syscall_impl.asm\uff09 <pre><code>#ifndef _SYSCALL_H_\n#define _SYSCALL_H_\n// \u4e0a\u7565...\n// exec.c\nvoid *sys_sbrk(int incr);\n\n#endif\n</code></pre> <pre><code>    switch (eax) {\n        // \u4e0a\u7565...\n        case 10:\n            ret = (int) sys_sbrk(ebx);\n            break;\n    }\n    // \u4e0b\u7565...\n</code></pre> <pre><code>[global sbrk]\nsbrk:\n    push ebx\n    mov eax, 10\n    mov ebx, [esp + 8]\n    int 80h\n    pop ebx\n    ret\n</code></pre></p> <p>\u52a0\u4e86\u5341\u4e2a\u7cfb\u7edf\u8c03\u7528\u4e86\uff0c\u76f8\u4fe1\u5927\u5bb6\u4e5f\u5e94\u8be5\u5927\u81f4\u719f\u6089\u4e86\u6dfb\u52a0\u7cfb\u7edf\u8c03\u7528\u7684\u6d41\u7a0b\u4e86\u5427\uff1a\u9996\u5148\u5b9e\u73b0\u7cfb\u7edf\u8c03\u7528\u672c\u8eab\uff0c\u7136\u540e\u5728 <code>syscall.c</code> \u7684 <code>switch-case</code> \u91cc\u65b0\u52a0\u4e00\u4e2a\u5206\u652f\uff0c\u6700\u540e\u7528\u6c47\u7f16\u4eff\u7167\u683c\u5f0f\u5199\u4e00\u4e2a\u5b9e\u73b0\uff0c\u6ca1\u6709\u53c2\u6570\uff08getpid\uff09\u3001\u4e00\u4e2a\u53c2\u6570\uff08\u4e00\u5806\u4e0d\u5217\u4e3e\uff09\u3001\u4e24\u4e2a\u53c2\u6570\uff08open\uff09\u3001\u4e09\u4e2a\u53c2\u6570\uff08\u4e00\u5806\u4e0d\u5217\u4e3e\uff09\u7684\u7cfb\u7edf\u8c03\u7528\u76ee\u524d\u90fd\u6709\u4e86\u3002</p> <p>\u4e0b\u9762\u6267\u884c\u7b2c\u4e8c\u6b65\uff0c\u7528 <code>sbrk</code> \u5b9e\u73b0 <code>malloc</code>\u3002\u8fd9\u4e2a\u7f51\u4e0a\u6559\u7a0b\u6709\u4e00\u5927\u5806\uff0c\u4f60\u5e72\u8106\u76f4\u63a5\u79fb\u690d <code>ptmalloc</code> \u90fd\u884c\uff0c\u8fd9\u91cc\u6211\u9009\u62e9\u4e86\u4e00\u79cd\u6700\u7b80\u5355\u4f46\u540c\u65f6\u5927\u6982\u4e5f\u662f\u6700\u4e0d\u7a33\u5b9a \u8dd1\u5728 CoolPotOS \u4e0a\u6210\u529f\u9020\u6210\u4e86 114514 \u6b21\u5f02\u5e38 \u7684\u4e00\u79cd\u3002 </p> <p>\u65b0\u5efa <code>lib/malloc.c</code>\uff0c\u8fd9\u5c31\u662f\u6211\u4eec <code>malloc</code> \u7684\u5b9e\u73b0\u3002</p> <p>\u6211\u4eec\u7684\u5806\u5b9e\u8d28\u4e0a\u662f\u4e00\u5757\u4e00\u5757\u7684\u5185\u5b58\u788e\u7247\uff0c\u8fd9\u4e9b\u788e\u7247\u91c7\u7528\u94fe\u8868\u7684\u65b9\u5f0f\u6765\u7ec4\u7ec7\uff0c\u4ee5\u4e0b\u662f\u6bcf\u4e00\u4e2a\u94fe\u8868\u7684\u8282\u70b9\uff1a</p> <p>\u4ee3\u7801 24-10 \u4e32\u8054\u53ef\u7528\u5185\u5b58\u7684\u94fe\u8868\u8282\u70b9\uff08lib/malloc.c\uff09 <pre><code>#include &lt;unistd.h&gt;\n#include &lt;stddef.h&gt;\n\ntypedef char ALIGN[16];\n\ntypedef union header {\n    struct {\n        uint32_t size;\n        uint32_t is_free;\n        union header *next;\n    } s;\n    ALIGN stub;\n} header_t;\n\nstatic header_t *head, *tail;\n</code></pre></p> <p><code>ALIGN</code> \u7eaf\u7cb9\u662f\u7528\u6765\u5bf9\u9f50\u7684\u7c7b\u578b\uff0c\u636e\u4f20\u7ed9\u641e\u6210 16 \u5b57\u8282\u5bf9\u9f50\u7684\u5730\u5740\u80fd\u591f\u4f7f CPU \u66f4\u9ad8\u6548\u3002\u91cc\u9762\u7684 <code>s</code> \u6210\u5458\u624d\u662f\u4f1a\u771f\u6b63\u7528\u5230\u7684\u90e8\u5206\uff0c\u4e09\u4e2a\u6210\u5458\u5e72\u4ec0\u4e48\u7684\u4e00\u770b\u5c31\u660e\u767d\uff1a<code>size</code> \u662f\u788e\u7247\u5927\u5c0f\uff0c<code>is_free</code> \u662f\u53ef\u7528\u4e0e\u5426\uff0c<code>next</code> \u662f\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002</p> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u627e\u4e00\u4e2a\u80fd\u591f\u76db\u4e0b\u5f85\u5206\u914d\u5185\u5b58\u7684\u8282\u70b9\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u5f88\u7b80\u5355\uff0c\u987a\u7740\u94fe\u8868\u627e\u4e0b\u53bb\u5c31\u5b8c\u4e86\u3002</p> <p>\u4ee3\u7801 24-11 \u5bfb\u627e\u80fd\u76db\u4e0b\u5f85\u5206\u914d\u5185\u5b58\u7684\u8282\u70b9\uff08lib/malloc.c\uff09 <pre><code>// \u5bfb\u627e\u4e00\u4e2a\u7b26\u5408\u6761\u4ef6\u7684\u6307\u5b9a\u5927\u5c0f\u7684\u7a7a\u95f2\u5185\u5b58\u5757\nstatic header_t *get_free_block(uint32_t size)\n{\n    header_t *curr = head; // \u4ece\u5934\u5f00\u59cb\n    while (curr) {\n        if (curr-&gt;s.is_free &amp;&amp; curr-&gt;s.size &gt;= size) return curr; // \u7a7a\u95f2\uff0c\u5e76\u4e14\u5927\u5c0f\u4e5f\u6ee1\u8db3\u6761\u4ef6\uff0c\u76f4\u63a5\u8fd4\u56de\n        curr = curr-&gt;s.next; // \u4e0b\u4e00\u4f4d\n    }\n    return NULL; // \u627e\u4e0d\u5230\n}\n</code></pre></p> <p>\u7136\u540e\u5c31\u53ef\u4ee5\u5f00\u59cb\u5b9e\u73b0 <code>malloc</code> \u4e86\u3002\u5148\u628a\u4ee3\u7801\u653e\u5728\u8fd9\u91cc\uff0c\u540e\u9762\u518d\u6162\u6162\u89e3\u8bf4\u3002</p> <p>\u4ee3\u7801 24-12 \u5b9e\u73b0 <code>malloc</code>\uff08lib/malloc.c\uff09 <pre><code>void *malloc(uint32_t size)\n{\n    uint32_t total_size;\n    void *block;\n    header_t *header;\n    if (!size) return NULL; // size == 0\uff0c\u81ea\u7136\u4e0d\u7528\u8fd4\u56de\n    header = get_free_block(size);\n    if (header) { // \u627e\u5230\u4e86\u5bf9\u5e94\u7684header\uff01\n        header-&gt;s.is_free = 0;\n        return (void *) (header + 1);\n        // header + 1\uff0c\u76f8\u5f53\u4e8e\u628aheader\u7684\u503c\u5728\u6307\u9488\u4e0a\u540e\u79fb\u4e86\u4e00\u4e2aheader_t\uff0c\u4ece\u800c\u5728\u8fd4\u56de\u7684\u5185\u5b58\u4e2d\u4e0d\u5b58\u5728\u8986\u5199header\u7684\u73b0\u8c61\n    }\n    // \u5426\u5219\uff0c\u7533\u8bf7\u5185\u5b58\n    total_size = sizeof(header_t) + size; // \u9700\u8981\u4e00\u5904\u653eheader\u7684\u7a7a\u95f4\n    block = sbrk(total_size); // sbrk\uff0c\u7533\u8bf7total_size\u5927\u5c0f\u5185\u5b58\n    if (block == (void *) -1) return NULL; // \u6ca1\u6709\u8db3\u591f\u7684\u5185\u5b58\uff0c\u8fd4\u56deNULL\n    // \u7533\u8bf7\u6210\u529f\uff01\n    header = block; // \u521d\u59cb\u5316header\n    header-&gt;s.size = size;\n    header-&gt;s.is_free = 0;\n    header-&gt;s.next = NULL;\n    if (!head) head = header; // \u7b2c\u4e00\u4e2a\u8fd8\u662f\u7a7a\u7684\uff0c\u76f4\u63a5\u8bbe\u4e3aheader\n    if (tail) tail-&gt;s.next = header; // \u6709\u6700\u540e\u4e00\u4e2a\uff0c\u628a\u6700\u540e\u4e00\u4e2a\u7684next\u6307\u5411header\n    tail = header; // header\u8363\u767b\u6700\u540e\u4e00\u4e2a\n    return (void *) (header + 1); // \u540c\u4e0a\n}\n</code></pre></p> <p>\u524d\u4e09\u884c\u58f0\u660e\u53d8\u91cf\u4e0d\u7528\u7ba1\uff0c\u7d27\u63a5\u7740\u5f53 <code>size</code> \u4e3a 0 \u65f6\u81ea\u7136\u65e0\u9700\u5206\u914d\uff0c\u8fd4\u56de NULL \u5373\u53ef\u3002\u63a5\u4e0b\u6765\u5bfb\u627e\u53ef\u7528\u7684\u8282\u70b9\uff0c\u5982\u679c\u627e\u5230\u4e86\uff0c\u5219\u76f4\u63a5\u66b4\u529b\u5360\u7528\u8fd9\u4e2a\u8282\u70b9\uff0c\u540c\u65f6\u8fd4\u56de <code>header + 1</code> \u8fd9\u4e2a\u4f4d\u7f6e\u3002\u8fd9\u4e2a\u4f4d\u7f6e\u662f\u5e72\u4ec0\u4e48\u7684\uff0c\u60f3\u5fc5\u4e0d\u7528\u5570\u55e6\u3002</p> <p>\u63a5\u4e0b\u6765\u8ba8\u8bba\u6ca1\u627e\u5230\u7684\u60c5\u51b5\uff0c\u8fd9\u65f6\u518d\u53bb\u627e\u64cd\u4f5c\u7cfb\u7edf\u4f7f\u7528 <code>sbrk</code> \u7533\u8bf7\u5185\u5b58\u3002\u7531\u4e8e\u4f7f\u7528\u4e86 <code>header + 1</code>\uff0c\u5185\u5b58\u5757\u7684\u5f00\u5934\u5e94\u8be5\u662f\u4e00\u4e2a <code>header_t</code>\uff0c\u8981\u7ed9\u52a0\u4e0a\u8fd9\u4e00\u7247\u5185\u5b58\u3002</p> <p>\u63a5\u4e0b\u6765 <code>if (block == (void *) -1)</code> \u662f\u5728\u5e72\u4ec0\u4e48\u5462\uff1f\u6309\u7167\u6807\u51c6\u89c4\u5b9a\uff0c\u5f53 <code>sbrk</code> \u5931\u8d25\u65f6\u5e94\u5f53\u8fd4\u56de -1\uff0c\u4f46\u6211\u4eec\u7684 <code>sbrk</code> \u4e0d\u4f1a\u5931\u8d25\uff0c\u5c31\u5bfc\u81f4\u8fd9\u4e00\u884c\u6ca1\u6709\u7528\u4e86\u3002</p> <p>\u7136\u540e\u5c31\u662f\u628a\u8fd9\u4e2a\u5185\u5b58\u5757\u521d\u59cb\u5316\uff0c\u8fde\u5230\u94fe\u8868\u91cc\u5e76\u8fd4\u56de\u3002\u7531\u4e8e\u53ea\u80fd\u76f4\u63a5\u77e5\u9053\u94fe\u8868\u672b\u5c3e\u7684\u4f4d\u7f6e\uff0c\u628a\u5b83\u4e32\u8054\u5230\u672b\u5c3e\u3002\u6700\u540e\u8fd4\u56de <code>header + 1</code> \u8df3\u8fc7\u521a\u521a\u6784\u9020\u7684 <code>header_t</code> \u7ed3\u6784\u3002</p> <p><code>malloc</code> \u5b8c\u4e86\uff0c\u7d27\u63a5\u7740\u5b9e\u73b0 <code>free</code>\uff0c\u57fa\u672c\u4e0a\u5dee\u4e0d\u591a\u7b80\u5355\uff1a</p> <p>\u4ee3\u7801 24-13 \u5b9e\u73b0 <code>free</code>\uff08lib/malloc.c\uff09 <pre><code>void free(void *block)\n{\n    header_t *header, *tmp;\n    if (!block) return; // free(NULL)\uff0c\u6709\u4ec0\u4e48\u7528\u634f\n    header = (header_t *) block - 1; // \u51cf\u53bb\u4e00\u4e2aheader_t\u7684\u5927\u5c0f\uff0c\u521a\u597d\u6307\u5411header_t\n\n    if ((char *) block + header-&gt;s.size == sbrk(0)) { // \u6b63\u597d\u5728\u5806\u672b\u5c3e\n        if (head == tail) head = tail = NULL; // \u53ea\u6709\u4e00\u4e2a\u5185\u5b58\u5757\uff0c\u5168\u90e8\u6e05\u7a7a\n        else {\n            // \u904d\u5386\u6574\u4e2a\u5185\u5b58\u5757\u94fe\u8868\uff0c\u627e\u5230\u5bf9\u5e94\u7684\u5185\u5b58\u5757\uff0c\u5e76\u628a\u5b83\u4ece\u94fe\u8868\u4e2d\u5220\u9664\n            tmp = head;\n            while (tmp) {\n                // \u5982\u679c\u5185\u5b58\u5728\u5806\u672b\u5c3e\uff0c\u90a3\u8fd9\u4e2a\u5757\u80af\u5b9a\u4e5f\u5728\u94fe\u8868\u672b\u5c3e\n                if (tmp-&gt;s.next == tail) { // \u4e0b\u4e00\u4e2a\u5c31\u662f\u539f\u672c\u672b\u5c3e\n                    tmp-&gt;s.next = NULL; // \u8e22\u6389\n                    tail = tmp; // \u672b\u5c3e\u4f4d\u7f6e\u9876\u66ff\n                }\n                tmp = tmp-&gt;s.next; // \u4e0b\u4e00\u4e2a\n            }\n        }\n        // \u91ca\u653e\u8fd9\u4e00\u5757\u5185\u5b58\n        sbrk(0 - sizeof(header_t) - header-&gt;s.size);\n        return;\n    }\n    // \u5426\u5219\uff0c\u8bbe\u7f6e\u4e3afree\n    header-&gt;s.is_free = 1;\n}\n</code></pre></p> <p>\u9996\u5148\u5224\u65ad <code>block</code> \u662f\u4e0d\u662f NULL\uff0c\u7136\u540e\u628a <code>block</code> \u51cf\u53bb\u4e00\u4e2a <code>header</code> \u7684\u5927\u5c0f\uff0c\u62ff\u5230\u5bf9\u5e94\u7684 <code>header</code>\u3002\u5982\u679c\u8fd9\u4e2a\u5757\u6b63\u597d\u5728\u5806\u672b\u5c3e\uff0c\u90a3\u5c31\u6d89\u53ca\u5230\u628a\u8fd9\u6bb5\u5185\u5b58\u5f52\u8fd8\u7ed9\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e8b\u60c5\uff1b\u5426\u5219\uff0c\u76f4\u63a5\u628a\u5c5e\u6027\u8bbe\u7f6e\u6210 <code>free</code> \u5c31\u53ef\u4ee5\u4e3a\u524d\u9762\u7684 <code>get_free_block</code> \u6240\u7528\u3002</p> <p>\u4e2d\u95f4\u7684\u5927 <code>if</code> \u5c31\u662f\u5728\u5411\u64cd\u4f5c\u7cfb\u7edf\u5f52\u8fd8\u5185\u5b58\uff0c\u9996\u5148\u5224\u65ad\u80fd\u4e0d\u80fd\u5f52\u8fd8\uff0c\u53ea\u8981\u5f53\u524d\u7684\u8fd9\u4e2a\u5185\u5b58\u6b63\u597d\u62b5\u7740\u73b0\u5728\u7684 <code>program break</code>\uff0c\u90a3\u5c31\u53ef\u4ee5\u628a\u8fd9\u6bb5\u5185\u5b58\u5f52\u8fd8\u3002\u9996\u5148\u5224\u65ad\u662f\u4e0d\u662f\u53ea\u6709\u8fd9\u4e00\u4e2a\u5185\u5b58\u5757\uff0c\u5982\u679c\u662f\u7684\u8bdd\u76f4\u63a5\u6e05\u7a7a\u6574\u4e2a\u94fe\u8868\u5373\u53ef\uff1b\u5426\u5219\uff0c\u7531\u4e8e\u94fe\u8868\u4e2d\u7684\u5185\u5b58\u5757\u6309\u5206\u914d\u5148\u540e\u987a\u5e8f\u6392\u5217\uff0c\u90a3\u4e48\u5728\u5806\u672b\u5c3e\u7684\u5185\u5b58\u5757\uff0c\u4e00\u5b9a\u4e5f\u5728\u94fe\u8868\u672b\u5c3e\u3002\u6240\u4ee5\uff0c\u8fd9\u91cc\u76f4\u63a5\u904d\u5386\u6574\u4e2a\u94fe\u8868\uff0c\u5728\u5373\u5c06\u5230\u8fbe\u672b\u5c3e\u7684\u65f6\u5019\u628a\u672b\u5c3e\u5185\u5b58\u5757\u8e22\u51fa\u94fe\u8868\uff0c\u5e76\u540c\u65f6\u66f4\u65b0\u73b0\u5728\u7684\u672b\u5c3e\u4f4d\u7f6e\u3002\u6700\u540e\uff0c\u5c31\u53ef\u4ee5\u91ca\u653e\u6389\u8fd9\u4e2a\u5185\u5b58\u5757\u5bf9\u5e94\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u4ee5\u53ca\u8fd9\u4e2a\u5185\u5b58\u5757\u672c\u8eab\u5360\u636e\u7684\u5185\u5b58\u3002\u4ee5\u514d\u4f60\u5fd8\u4e86\uff0c<code>sbrk</code> \u53ef\u4ee5\u4f7f\u7528\u6b63\u6570\u5206\u914d\u3001\u8d1f\u6570\u91ca\u653e\u3002\u800c\u4f7f\u7528 <code>sbrk(0)</code>\uff0c\u5219\u76f8\u5f53\u4e8e\u8fd4\u56de\u73b0\u5728\u7684 <code>program break</code>\uff0c\u56e0\u4e3a\u5b83\u7684\u884c\u4e3a\u76f8\u5f53\u4e8e\u7ed9\u539f <code>program break</code> \u52a0 0 \u518d\u8fd4\u56de\u65e7\u7684\u3002</p> <p>\u597d\u4e86\uff0c\u4e00\u4e2a\u7b80\u5355\u7684 <code>malloc/free</code> \u5c31\u5df2\u7ecf\u5b9e\u73b0\u4e86\uff0c\u5c45\u7136\u8fde 100 \u884c\u90fd\u4e0d\u5230\uff0c\u5e94\u8be5\u5f88\u7b80\u5355\u5427\u3002</p> <p>\u6709\u4e86 <code>malloc</code> \u6253\u5e95\uff08\u4e8b\u5b9e\u4e0a\u6709 <code>sbrk</code> \u5c31\u591f\u4e86\uff09\uff0c\u7ed9\u5e94\u7528\u7a0b\u5e8f\u4f20\u53c2\u4e5f\u5c31\u4e0d\u662f\u4ec0\u4e48\u96be\u4e8b\uff0c<code>malloc</code> \u5c31\u7b49\u7740\u5199\u5b8c\u5e94\u7528\u7a0b\u5e8f\u4f20\u53c2\u518d\u6d4b\u5427\u3002</p>"}]}